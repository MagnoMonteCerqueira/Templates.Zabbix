<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:14:41Z</date><groups><group><uuid>57b7ae836ca64446ba2c296389c009b7</uuid><name>Templates/Modules</name></group></groups><templates><template><uuid>18ecfb2a7e754315bb8d7f71917153da</uuid><template>Linux network interfaces by Zabbix agent</template><name>Linux network interfaces by Zabbix agent</name><description>Template tooling version used: 0.41</description><groups><group><name>Templates/Modules</name></group></groups><discovery_rules><discovery_rule><uuid>aea284394a914ede923d0004369184cf</uuid><name>Network interface discovery</name><key>net.if.discovery</key><delay>1h</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#IFNAME}</macro><value>{$NET.IF.IFNAME.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#IFNAME}</macro><value>{$NET.IF.IFNAME.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition></conditions></filter><description>Discovery of network interfaces.</description><item_prototypes><item_prototype><uuid>5a57cd0076d346ae953d0c85ff64ecaf</uuid><name>Interface {#IFNAME}: Inbound packets discarded</name><key>net.if.in[&quot;{#IFNAME}&quot;,dropped]</key><delay>3m</delay><history>7d</history><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>f0c78df653744f03aaef06f909525a3d</uuid><name>Interface {#IFNAME}: Inbound packets with errors</name><key>net.if.in[&quot;{#IFNAME}&quot;,errors]</key><delay>3m</delay><history>7d</history><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>544b545925344458ae3895198fa5b00a</uuid><name>Interface {#IFNAME}: Bits received</name><key>net.if.in[&quot;{#IFNAME}&quot;]</key><delay>3m</delay><history>7d</history><units>bps</units><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>8</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>3502455ff20742439521d5b9d2f015a3</uuid><name>Interface {#IFNAME}: Outbound packets discarded</name><key>net.if.out[&quot;{#IFNAME}&quot;,dropped]</key><delay>3m</delay><history>7d</history><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>0044c70afff64bf99ecec9173ef7a0f8</uuid><name>Interface {#IFNAME}: Outbound packets with errors</name><key>net.if.out[&quot;{#IFNAME}&quot;,errors]</key><delay>3m</delay><history>7d</history><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>efa9c1b34b86486c9260730316c7a67c</uuid><name>Interface {#IFNAME}: Bits sent</name><key>net.if.out[&quot;{#IFNAME}&quot;]</key><delay>3m</delay><history>7d</history><units>bps</units><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>8</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>f9d88bf4e5b245ed80870b50506e7db3</uuid><name>Interface {#IFNAME}: Operational status</name><key>vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;]</key><history>7d</history><trends>0</trends><description>Reference: https://www.kernel.org/doc/Documentation/networking/operstates.txt</description><valuemap><name>ifOperStatus</name></valuemap><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>var newvalue;
switch(value) {
  case &quot;unknown&quot;:
    newvalue = 0;
    break;
  case &quot;notpresent&quot;:
    newvalue = 1;
    break;
  case &quot;down&quot;:
    newvalue = 2;
    break;
  case &quot;lowerlayerdown&quot;:
    newvalue = 3;
    break;
  case &quot;testing&quot;:
    newvalue = 4;
    break;
  case &quot;dormant&quot;:
    newvalue = 5;
    break;
  case &quot;up&quot;:
    newvalue = 6;
    break;  default:
    newvalue = &quot;Problem parsing interface operstate in JS&quot;;
}
return newvalue;</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>4b06b63814d34a90abe971abcd97cf83</uuid><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])=2 and (last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;],#1)&lt;&gt;last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;],#2))</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression><name>Interface {#IFNAME}: Link down</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>This trigger expression works as follows:
1. Can be triggered if operations status is down.
2. {$IFCONTROL:&quot;{#IFNAME}&quot;}=1 - user can redefine Context macro to value - 0. That marks this interface as not important. No new trigger will be fired if this interface is down.
3. {TEMPLATE_NAME:METRIC.diff()}=1) - trigger fires only if operational status was up(1) sometime before. (So, do not fire 'ethernal off' interfaces.)

WARNING: if closed manually - won't fire again on next poll, because of .diff.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>4644f15077474647bc7104431cf1bb74</uuid><name>Interface {#IFNAME}: Speed</name><key>vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;]</key><delay>5m</delay><history>7d</history><trends>0d</trends><units>bps</units><description>Indicates the interface latest or current speed value. Value is an integer representing the link speed in bits/sec.
This attribute is only valid for interfaces that implement the ethtool get_link_ksettings method (mostly Ethernet).
Reference: https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-net</description><preprocessing><step><type>MULTIPLIER</type><parameters><parameter>1000000</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1h</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>09bb129b088d493990bb4fa381eacad8</uuid><name>Interface {#IFNAME}: Interface type</name><key>vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/type&quot;]</key><delay>1h</delay><history>7d</history><trends>0d</trends><description>Indicates the interface protocol type as a decimal value.
See include/uapi/linux/if_arp.h for all possible values.
Reference: https://www.kernel.org/doc/Documentation/ABI/testing/sysfs-class-net</description><valuemap><name>Linux::Interface protocol types</name></valuemap><preprocessing><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype></item_prototypes><trigger_prototypes><trigger_prototype><uuid>42ba7cc36b734d4a933ed4f7ceb8f3a4</uuid><expression>change(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;])&lt;0 and last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;])&gt;0
and
(last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/type&quot;])=6 or last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/type&quot;])=1)
and
(last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])&lt;&gt;2)</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>(change(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;])&gt;0 and last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;],#2)&gt;0) or
(last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])=2)</recovery_expression><name>Interface {#IFNAME}: Ethernet has changed to lower speed than it was before</name><opdata>Current reported speed: {ITEM.LASTVALUE1}</opdata><priority>INFO</priority><description>This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}: Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])=2 and (last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;],#1)&lt;&gt;last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;],#2))</expression><recovery_expression>last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype><trigger_prototype><uuid>678d795a043a4f5a84fc9690d0d29783</uuid><expression>(avg(/Linux network interfaces by Zabbix agent/net.if.in[&quot;{#IFNAME}&quot;],15m)&gt;({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}/100)*last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;]) or
avg(/Linux network interfaces by Zabbix agent/net.if.out[&quot;{#IFNAME}&quot;],15m)&gt;({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}/100)*last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;])) and
last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;])&gt;0</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>avg(/Linux network interfaces by Zabbix agent/net.if.in[&quot;{#IFNAME}&quot;],15m)&lt;(({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}-3)/100)*last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;]) and
avg(/Linux network interfaces by Zabbix agent/net.if.out[&quot;{#IFNAME}&quot;],15m)&lt;(({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}-3)/100)*last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/speed&quot;])</recovery_expression><name>Interface {#IFNAME}: High bandwidth usage</name><event_name>Interface {#IFNAME}: High bandwidth usage (&gt;{$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}%)</event_name><opdata>In: {ITEM.LASTVALUE1}, out: {ITEM.LASTVALUE3}, speed: {ITEM.LASTVALUE2}</opdata><priority>WARNING</priority><description>The network interface utilization is close to its estimated maximum bandwidth.</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}: Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])=2 and (last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;],#1)&lt;&gt;last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;],#2))</expression><recovery_expression>last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype><trigger_prototype><uuid>b4da7325b41647ab997cf6906a9cba23</uuid><expression>min(/Linux network interfaces by Zabbix agent/net.if.in[&quot;{#IFNAME}&quot;,errors],5m)&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}
or min(/Linux network interfaces by Zabbix agent/net.if.out[&quot;{#IFNAME}&quot;,errors],5m)&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>max(/Linux network interfaces by Zabbix agent/net.if.in[&quot;{#IFNAME}&quot;,errors],5m)&lt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}*0.8
and max(/Linux network interfaces by Zabbix agent/net.if.out[&quot;{#IFNAME}&quot;,errors],5m)&lt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}*0.8</recovery_expression><name>Interface {#IFNAME}: High error rate</name><event_name>Interface {#IFNAME}: High error rate (&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;} for 5m)</event_name><opdata>errors in: {ITEM.LASTVALUE1}, errors out: {ITEM.LASTVALUE2}</opdata><priority>WARNING</priority><description>Recovers when below 80% of {$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;} threshold</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}: Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])=2 and (last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;],#1)&lt;&gt;last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;],#2))</expression><recovery_expression>last(/Linux network interfaces by Zabbix agent/vfs.file.contents[&quot;/sys/class/net/{#IFNAME}/operstate&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes><graph_prototypes><graph_prototype><uuid>4b1489e1d06a4443a4f379854936cfee</uuid><name>Interface {#IFNAME}: Network traffic</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>Linux network interfaces by Zabbix agent</host><key>net.if.in[&quot;{#IFNAME}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>Linux network interfaces by Zabbix agent</host><key>net.if.out[&quot;{#IFNAME}&quot;]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><yaxisside>RIGHT</yaxisside><item><host>Linux network interfaces by Zabbix agent</host><key>net.if.out[&quot;{#IFNAME}&quot;,errors]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><yaxisside>RIGHT</yaxisside><item><host>Linux network interfaces by Zabbix agent</host><key>net.if.in[&quot;{#IFNAME}&quot;,errors]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><yaxisside>RIGHT</yaxisside><item><host>Linux network interfaces by Zabbix agent</host><key>net.if.out[&quot;{#IFNAME}&quot;,dropped]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><yaxisside>RIGHT</yaxisside><item><host>Linux network interfaces by Zabbix agent</host><key>net.if.in[&quot;{#IFNAME}&quot;,dropped]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes></discovery_rule></discovery_rules><macros><macro><macro>{$IF.ERRORS.WARN}</macro><value>2</value></macro><macro><macro>{$IF.UTIL.MAX}</macro><value>90</value><description>This macro is used as a threshold in interface utilization trigger.</description></macro><macro><macro>{$IFCONTROL}</macro><value>1</value></macro><macro><macro>{$NET.IF.IFNAME.MATCHES}</macro><value>^.*$</value></macro><macro><macro>{$NET.IF.IFNAME.NOT_MATCHES}</macro><value>(^Software Loopback Interface|^NULL[0-9.]*$|^[Ll]o[0-9.]*$|^[Ss]ystem$|^Nu[0-9.]*$|^veth[0-9A-z]+$|docker[0-9]+|br-[a-z0-9]{12})</value><description>Filter out loopbacks, nulls, docker veth links and docker0 bridge by default</description></macro></macros><dashboards><dashboard><uuid>1cbc445224b14af1b72f1580d7444ba5</uuid><name>Network interfaces</name><pages><page><widgets><widget><type>GRAPH_PROTOTYPE</type><width>24</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>2</value></field><field><type>INTEGER</type><name>columns</name><value>1</value></field><field><type>INTEGER</type><name>rows</name><value>1</value></field><field><type>GRAPH_PROTOTYPE</type><name>graphid</name><value><host>Linux network interfaces by Zabbix agent</host><name>Interface {#IFNAME}: Network traffic</name></value></field></fields></widget></widgets></page></pages></dashboard></dashboards><valuemaps><valuemap><uuid>8513cf23b8d34952b92a31bbd82a31d3</uuid><name>ifOperStatus</name><mappings><mapping><value>0</value><newvalue>unknown</newvalue></mapping><mapping><value>1</value><newvalue>notpresent</newvalue></mapping><mapping><value>2</value><newvalue>down</newvalue></mapping><mapping><value>3</value><newvalue>lowerlayerdown</newvalue></mapping><mapping><value>4</value><newvalue>testing</newvalue></mapping><mapping><value>5</value><newvalue>dormant</newvalue></mapping><mapping><value>6</value><newvalue>up</newvalue></mapping></mappings></valuemap><valuemap><uuid>e2db25377a2b49c897bbb8b6c30831e2</uuid><name>Linux::Interface protocol types</name><mappings><mapping><value>0</value><newvalue>from KA9Q: NET/ROM pseudo</newvalue></mapping><mapping><value>1</value><newvalue>Ethernet</newvalue></mapping><mapping><value>2</value><newvalue>Experimental Ethernet</newvalue></mapping><mapping><value>3</value><newvalue>AX.25 Level 2</newvalue></mapping><mapping><value>4</value><newvalue>PROnet token ring</newvalue></mapping><mapping><value>5</value><newvalue>Chaosnet</newvalue></mapping><mapping><value>6</value><newvalue>IEEE 802.2 Ethernet/TR/TB</newvalue></mapping><mapping><value>7</value><newvalue>ARCnet</newvalue></mapping><mapping><value>8</value><newvalue>APPLEtalk</newvalue></mapping><mapping><value>15</value><newvalue>Frame Relay DLCI</newvalue></mapping><mapping><value>19</value><newvalue>ATM</newvalue></mapping><mapping><value>23</value><newvalue>Metricom STRIP (new IANA id)</newvalue></mapping><mapping><value>24</value><newvalue>IEEE 1394 IPv4 - RFC 2734</newvalue></mapping><mapping><value>27</value><newvalue>EUI-64</newvalue></mapping><mapping><value>32</value><newvalue>InfiniBand</newvalue></mapping><mapping><value>256</value><newvalue>ARPHRD_SLIP</newvalue></mapping><mapping><value>257</value><newvalue>ARPHRD_CSLIP</newvalue></mapping><mapping><value>258</value><newvalue>ARPHRD_SLIP6</newvalue></mapping><mapping><value>259</value><newvalue>ARPHRD_CSLIP6</newvalue></mapping><mapping><value>260</value><newvalue>Notional KISS type</newvalue></mapping><mapping><value>264</value><newvalue>ARPHRD_ADAPT</newvalue></mapping><mapping><value>270</value><newvalue>ARPHRD_ROSE</newvalue></mapping><mapping><value>271</value><newvalue>CCITT X.25</newvalue></mapping><mapping><value>272</value><newvalue>Boards with X.25 in firmware</newvalue></mapping><mapping><value>280</value><newvalue>Controller Area Network</newvalue></mapping><mapping><value>512</value><newvalue>ARPHRD_PPP</newvalue></mapping><mapping><value>513</value><newvalue>Cisco HDLC</newvalue></mapping><mapping><value>516</value><newvalue>LAPB</newvalue></mapping><mapping><value>517</value><newvalue>Digital's DDCMP protocol</newvalue></mapping><mapping><value>518</value><newvalue>Raw HDLC</newvalue></mapping><mapping><value>519</value><newvalue>Raw IP</newvalue></mapping><mapping><value>768</value><newvalue>IPIP tunnel</newvalue></mapping><mapping><value>769</value><newvalue>IP6IP6 tunnel</newvalue></mapping><mapping><value>770</value><newvalue>Frame Relay Access Device</newvalue></mapping><mapping><value>771</value><newvalue>SKIP vif</newvalue></mapping><mapping><value>772</value><newvalue>Loopback device</newvalue></mapping><mapping><value>773</value><newvalue>Localtalk device</newvalue></mapping><mapping><value>774</value><newvalue>Fiber Distributed Data Interface</newvalue></mapping><mapping><value>775</value><newvalue>AP1000 BIF</newvalue></mapping><mapping><value>776</value><newvalue>sit0 device - IPv6-in-IPv4</newvalue></mapping><mapping><value>777</value><newvalue>IP over DDP tunneller</newvalue></mapping><mapping><value>778</value><newvalue>GRE over IP</newvalue></mapping><mapping><value>779</value><newvalue>PIMSM register interface</newvalue></mapping><mapping><value>780</value><newvalue>High Performance Parallel Interface</newvalue></mapping><mapping><value>781</value><newvalue>Nexus 64Mbps Ash</newvalue></mapping><mapping><value>782</value><newvalue>Acorn Econet</newvalue></mapping><mapping><value>783</value><newvalue>Linux-IrDA</newvalue></mapping><mapping><value>784</value><newvalue>Point to point fibrechannel</newvalue></mapping><mapping><value>785</value><newvalue>Fibrechannel arbitrated loop</newvalue></mapping><mapping><value>786</value><newvalue>Fibrechannel public loop</newvalue></mapping><mapping><value>787</value><newvalue>Fibrechannel fabric</newvalue></mapping><mapping><value>800</value><newvalue>Magic type ident for TR</newvalue></mapping><mapping><value>801</value><newvalue>IEEE 802.11</newvalue></mapping><mapping><value>802</value><newvalue>IEEE 802.11 + Prism2 header</newvalue></mapping><mapping><value>803</value><newvalue>IEEE 802.11 + radiotap header</newvalue></mapping><mapping><value>804</value><newvalue>ARPHRD_IEEE802154</newvalue></mapping><mapping><value>805</value><newvalue>IEEE 802.15.4 network monitor</newvalue></mapping><mapping><value>820</value><newvalue>PhoNet media type</newvalue></mapping><mapping><value>821</value><newvalue>PhoNet pipe header</newvalue></mapping><mapping><value>822</value><newvalue>CAIF media type</newvalue></mapping><mapping><value>823</value><newvalue>GRE over IPv6</newvalue></mapping><mapping><value>824</value><newvalue>Netlink header</newvalue></mapping><mapping><value>825</value><newvalue>IPv6 over LoWPAN</newvalue></mapping><mapping><value>826</value><newvalue>Vsock monitor header</newvalue></mapping></mappings></valuemap></valuemaps></template></templates></zabbix_export>
