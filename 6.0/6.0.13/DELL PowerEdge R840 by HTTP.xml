<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:14:58Z</date><groups><group><uuid>e960332b3f6c46a1956486d4f3f99fce</uuid><name>Templates/Server hardware</name></group></groups><templates><template><uuid>20147f00f92d4240aab0b70cf578c022</uuid><template>DELL PowerEdge R840 by HTTP</template><name>DELL PowerEdge R840 by HTTP</name><description>Template for DELL PowerEdge R840 servers with iDRAC 8/9 firmware 4.32 and later and Redfish API enabled.

You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/426752-discussion-thread-for-official-zabbix-dell-templates

Template tooling version used: 0.41</description><groups><group><name>Templates/Server hardware</name></group></groups><items><item><uuid>57f456366d3442f394ea3524c1f2855b</uuid><name>Dell R840: Firmware version</name><type>DEPENDENT</type><key>dell.server.hw.firmware</key><delay>0</delay><history>2w</history><trends>0</trends><value_type>CHAR</value_type><description>This attribute defines the firmware version of a remote access card.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.firmware</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.system.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>9fa14edc793842ba8858dd09d1c3058c</uuid><expression>last(/DELL PowerEdge R840 by HTTP/dell.server.hw.firmware,#1)&lt;&gt;last(/DELL PowerEdge R840 by HTTP/dell.server.hw.firmware,#2) and length(last(/DELL PowerEdge R840 by HTTP/dell.server.hw.firmware))&gt;0</expression><name>Dell R840: Firmware has changed</name><opdata>Current value: {ITEM.LASTVALUE1}</opdata><priority>INFO</priority><description>Firmware version has changed. Ack to close.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>0002bc9eaeb34479819b027f58460970</uuid><name>Dell R840: Hardware model name</name><type>DEPENDENT</type><key>dell.server.hw.model</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>This attribute defines the model name of the system.</description><inventory_link>MODEL</inventory_link><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.model</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.system.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>5031003a95fe4a23a3a706813f1221c4</uuid><name>Dell R840: Hardware serial number</name><type>DEPENDENT</type><key>dell.server.hw.serialnumber</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>This attribute defines the service tag of the system.</description><inventory_link>SERIALNO_A</inventory_link><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.serialnumber</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.system.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>5932f468c8614187aefc284a5c2e1475</uuid><expression>last(/DELL PowerEdge R840 by HTTP/dell.server.hw.serialnumber,#1)&lt;&gt;last(/DELL PowerEdge R840 by HTTP/dell.server.hw.serialnumber,#2) and length(last(/DELL PowerEdge R840 by HTTP/dell.server.hw.serialnumber))&gt;0</expression><name>Dell R840: Device has been replaced</name><event_name>Dell R840: Device has been replaced (new serial number received)</event_name><priority>INFO</priority><description>Device serial number has changed. Ack to close</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>de315f6a1fd44475a7c5a84ae337f37c</uuid><name>Dell R840: Overall system health status</name><type>DEPENDENT</type><key>dell.server.status</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>This attribute defines the overall rollup status of all components in the system being monitored by the remote access card. Includes system, storage, IO devices, iDRAC, CPU, memory, etc.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.status</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.system.get</key></master_item><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>41fac4cfc084411081db8d7a4b81e18d</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.status,,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: Server is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger><trigger><uuid>60a19490be4142be800a8a9fc2c3917d</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.status,,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: Server is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: Server is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.status,,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>b7f3a7fba3924e7ab12d692b62dccda5</uuid><name>Dell R840: Get system</name><type>HTTP_AGENT</type><key>dell.server.system.get</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Returns the metrics of a system.</description><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    system = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    system = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = {
    model: '',
    serialnumber: '',
    status: '',
    firmware: ''
};

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

result.model = getField(system, 'Model', '');
result.serialnumber = getField(system, 'Oem.Dell.DellSystem.ChassisServiceTag', '');
result.status = getField(system, 'Status.Health', '');

response = request(params.url + '/redfish/v1/Managers/iDRAC.Embedded.1');
result.firmware = getField(response.body, 'FirmwareVersion', '');

return JSON.stringify(result);</parameter></parameters></step></preprocessing><url>{$API.URL}/redfish/v1/Systems/System.Embedded.1</url><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>c98a5cd525ea4a93a9c48ba4a817a434</uuid><name>Dell R840: Redfish API</name><type>SIMPLE</type><key>net.tcp.service[https]</key><history>7d</history><description>The availability of Redfish API on the server.
Possible values:
  0 unavailable
  1 available</description><valuemap><name>zabbix.host.available</name></valuemap><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>bb504167936543818487aef62bb5bbb1</uuid><expression>last(/DELL PowerEdge R840 by HTTP/net.tcp.service[https])=0</expression><name>Dell R840: Redfish API service is unavailable</name><priority>HIGH</priority><description>The service is unavailable or does not accept TCP connections.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item></items><discovery_rules><discovery_rule><uuid>c77e51cd40324a9f98f6c42127fb0503</uuid><name>Array controller cache discovery</name><type>HTTP_AGENT</type><key>array.cache.discovery</key><delay>1h</delay><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Discovery of a cache of disk array controllers.</description><item_prototypes><item_prototype><uuid>12b53eaff1194969addf13ae2d47fbdf</uuid><name>Dell R840: {#BATTERY_NAME} Status</name><type>HTTP_AGENT</type><key>dell.server.hw.diskarray.cache.battery.status[{#BATTERY_NAME}]</key><history>7d</history><trends>0</trends><value_type>CHAR</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>The status of the job. Possible values: OK, Warning, Critical.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Oem.Dell.DellControllerBattery.PrimaryStatus</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><url>{$API.URL}{#ODATA}</url><tags><tag><tag>component</tag><value>battery</value></tag><tag><tag>component</tag><value>diskarray</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>4e8f7f543ff9448ba091117548a7957c</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.diskarray.cache.battery.status[{#BATTERY_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: {#BATTERY_NAME} is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype><trigger_prototype><uuid>76035c29874c4ad5912737230b0fcfcb</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.diskarray.cache.battery.status[{#BATTERY_NAME}],,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: {#BATTERY_NAME} is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: {#BATTERY_NAME} is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.diskarray.cache.battery.status[{#BATTERY_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><url>{$API.URL}/redfish/v1/Systems/System.Embedded.1/Storage</url><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    storages = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    storages = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (storages.Members instanceof Array) {
    storages.Members.forEach(function (storage) {
        if (typeof storage[&quot;@odata.id&quot;] === 'string') {
            response = request(params.url + storage[&quot;@odata.id&quot;]);
            controller = response.body;
            if (getField(controller, 'Id', '').search('RAID') &gt; -1) {
                result.push({
                    '{#BATTERY_NAME}': getField(response.body, 'Oem.Dell.DellControllerBattery.Name', ''),
                    '{#ODATA}': controller[&quot;@odata.id&quot;]
                });
            }
        }
    });
}

return JSON.stringify(result);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>8932e168a4344c2fa3af9bc936d88af8</uuid><name>Array controller discovery</name><type>HTTP_AGENT</type><key>array.discovery</key><delay>1h</delay><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Discovery of disk array controllers.</description><item_prototypes><item_prototype><uuid>e679f6d481ac411fa6d5ffd7d8293e14</uuid><name>Dell R840: {#CNTLR_NAME} in slot {#SLOT} Status</name><type>HTTP_AGENT</type><key>dell.server.hw.diskarray.status[{#CNTLR_NAME}{#SLOT}]</key><history>7d</history><trends>0</trends><value_type>CHAR</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>The status of the job. Possible values: OK, Warning, Critical.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.Health</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><url>{$API.URL}{#ODATA}</url><tags><tag><tag>component</tag><value>diskarray</value></tag><tag><tag>component</tag><value>storage</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>94f468fe3f8142b4903a4e4f7186d5f8</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.diskarray.status[{#CNTLR_NAME}{#SLOT}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: {#CNTLR_NAME} in slot {#SLOT} is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype><trigger_prototype><uuid>9b4f65ee67b748469d4226d556211de1</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.diskarray.status[{#CNTLR_NAME}{#SLOT}],,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: {#CNTLR_NAME} in slot {#SLOT} is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: {#CNTLR_NAME} in slot {#SLOT} is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.diskarray.status[{#CNTLR_NAME}{#SLOT}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><url>{$API.URL}/redfish/v1/Systems/System.Embedded.1/Storage</url><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    storages = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    storages = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (storages.Members instanceof Array) {
    storages.Members.forEach(function (storage) {
        if (typeof storage[&quot;@odata.id&quot;] === 'string') {
            response = request(params.url + storage[&quot;@odata.id&quot;]);
            controller = response.body;
            if (getField(controller, 'Id', '').search('RAID') &gt; -1) {
                result.push({
                    '{#CNTLR_NAME}': getField(response.body, 'Name', ''),
                    '{#SLOT}': getField(response.body, 'Oem.Dell.DellController.PCISlot', ''),
                    '{#ODATA}': controller[&quot;@odata.id&quot;]
                });
            }
        }
    });
}

return JSON.stringify(result);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>1056b450faa84dc0ae8fda6d4e073e7c</uuid><name>FAN discovery</name><type>HTTP_AGENT</type><key>fan.discovery</key><delay>1h</delay><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Discovery of FAN sensors.</description><item_prototypes><item_prototype><uuid>2099dd04605646ecacaba58e1defa4f2</uuid><name>Dell R840: {#SENSOR_NAME} Get sensor</name><type>HTTP_AGENT</type><key>dell.server.sensor.fan.get[{#SENSOR_NAME}]</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Returns the metrics of a sensor.</description><url>{$API.URL}{#ODATA}</url><tags><tag><tag>component</tag><value>fan</value></tag><tag><tag>component</tag><value>raw</value></tag></tags></item_prototype><item_prototype><uuid>76a021e37c19459fa224fa1ec694a8da</uuid><name>Dell R840: {#SENSOR_NAME} Speed</name><type>DEPENDENT</type><key>dell.server.sensor.fan.speed[{#SENSOR_NAME}]</key><delay>0</delay><history>7d</history><units>rpm</units><description>The sensor value.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Reading</parameter></parameters></step></preprocessing><master_item><key>dell.server.sensor.fan.get[{#SENSOR_NAME}]</key></master_item><tags><tag><tag>component</tag><value>fan</value></tag></tags></item_prototype><item_prototype><uuid>77ea551bc11949b59ce5a653d3823f99</uuid><name>Dell R840: {#SENSOR_NAME} Status</name><type>DEPENDENT</type><key>dell.server.sensor.fan.status[{#SENSOR_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The status of the job. Possible values: OK, Warning, Critical.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.Health</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.sensor.fan.get[{#SENSOR_NAME}]</key></master_item><tags><tag><tag>component</tag><value>fan</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>45d2e75c18b34f5aa1e46296d71debe4</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.fan.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: {#SENSOR_NAME} is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype><trigger_prototype><uuid>9b5b5fd923624f05bb7c9cce28f29116</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.fan.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: {#SENSOR_NAME} is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: {#SENSOR_NAME} is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.fan.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><url>{$API.URL}/redfish/v1/Chassis/System.Embedded.1/Sensors</url><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

try {
    sensors = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    sensors = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (sensors.Members instanceof Array) {
    sensors.Members.forEach(function (sensor) {
        if (typeof sensor[&quot;@odata.id&quot;] === 'string') {
            response = request(params.url + sensor[&quot;@odata.id&quot;]);
            if (response.body.ReadingType === 'Rotational') {
                if (typeof response.body.Name === 'string') {
                    result.push({ '{#SENSOR_NAME}': response.body.Name, '{#ODATA}': sensor[&quot;@odata.id&quot;] });
                }
            }
        }
    });
}

return JSON.stringify(result);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>1bf642f354a347c5b8a3d9f305d878ed</uuid><name>Network interface discovery</name><type>HTTP_AGENT</type><key>net.if.discovery</key><delay>1h</delay><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>The NetworkInterface schema describes links to the NetworkAdapter and represents the functionality available to the containing system.</description><item_prototypes><item_prototype><uuid>412f27eb6d014433a98c0b1eeb5dacb7</uuid><name>Dell R840: {#IFNAME} Get interface</name><type>HTTP_AGENT</type><key>dell.server.net.if.get[{#IFNAME}]</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Returns the metrics of a network interface.</description><url>{$API.URL}{#ODATA}</url><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>component</tag><value>raw</value></tag></tags></item_prototype><item_prototype><uuid>c633aac31c3d45738007dac60f538950</uuid><name>Dell R840: {#IFNAME} Status</name><type>DEPENDENT</type><key>dell.server.net.if.health[{#IFNAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The status of the job. Possible values: OK, Warning, Critical.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.Health</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.net.if.get[{#IFNAME}]</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>f46e4a69e41a42d091f378d7dc0fa3c2</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.net.if.health[{#IFNAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: {#IFNAME} is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype><trigger_prototype><uuid>e325ba5c20834fa6ad7db6cb2a12a927</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.net.if.health[{#IFNAME}],,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: {#IFNAME} is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: {#IFNAME} is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.net.if.health[{#IFNAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>f784b9a5e50549dab4fd3522998ae65d</uuid><name>Dell R840: {#IFNAME} Speed</name><type>DEPENDENT</type><key>dell.server.net.if.speed[{#IFNAME}]</key><delay>0</delay><history>7d</history><units>!Mbps</units><description>Network port current link speed.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.CurrentLinkSpeedMbps</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.net.if.get[{#IFNAME}]</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags></item_prototype><item_prototype><uuid>7b948100c1c14ec18c676d5b53e04fd7</uuid><name>Dell R840: {#IFNAME} State</name><type>DEPENDENT</type><key>dell.server.net.if.state[{#IFNAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The known state of the Resource, for example, enabled. Possible values: Enabled, Disabled, StandbyOffline, StandbySpare, InTest, Starting, Absent, UnavailableOffline, Deferring, Quiesced, Updating, Qualified.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.State</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.net.if.get[{#IFNAME}]</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags></item_prototype><item_prototype><uuid>c9412c81178a4e4c81b87163d0d47ae9</uuid><name>Dell R840: {#IFNAME} Link status</name><type>DEPENDENT</type><key>dell.server.net.if.status[{#IFNAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The status of the link between this port and its link partner. Possible values: Down, Up, null.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.LinkStatus</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.net.if.get[{#IFNAME}]</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>b3c1ceb91dc342d9aa4c05ca4b55b10c</uuid><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and (find(/DELL PowerEdge R840 by HTTP/dell.server.net.if.status[{#IFNAME}],,&quot;like&quot;)=&quot;Down&quot; and last(/DELL PowerEdge R840 by HTTP/dell.server.net.if.status[{#IFNAME}],#1)&lt;&gt;last(/DELL PowerEdge R840 by HTTP/dell.server.net.if.status[{#IFNAME}],#2))</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>find(/DELL PowerEdge R840 by HTTP/dell.server.net.if.status[{#IFNAME}],,&quot;like&quot;)&lt;&gt;&quot;Down&quot; or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression><name>Dell R840: {#IFNAME} Link down</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>This trigger expression works as follows:
1. Can be triggered if operations status is down.
2. {$IFCONTROL:&quot;{#IFNAME}&quot;}=1 - user can redefine Context macro to value - 0. That marks this interface as not important. No new trigger will be fired if this interface is down.
3. Condition of difference between last and previous value - trigger fires only if operational status was up(1) sometime before. (So, do not fire 'ethernal off' interfaces.)

WARNING: if closed manually - won't fire again on next poll, because of .diff.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><url>{$API.URL}/redfish/v1/Chassis/System.Embedded.1/NetworkAdapters</url><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    adapters = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    adapters = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (adapters.Members instanceof Array) {
    adapters.Members.forEach(function (adapter) {
        if (typeof adapter[&quot;@odata.id&quot;] === 'string') {
            response = request(params.url + adapter[&quot;@odata.id&quot;] + &quot;/NetworkPorts&quot;);
            ports = response.body;
            if (ports.Members instanceof Array) {
                ports.Members.forEach(function (port) {
                    if (typeof port[&quot;@odata.id&quot;] === 'string') {
                        response = request(params.url + port[&quot;@odata.id&quot;]);
                        result.push({ '{#IFNAME}': getField(response.body, 'Id', ''), '{#ODATA}': port[&quot;@odata.id&quot;] });
                    }
                });
            }
        }
    });
}

return JSON.stringify(result);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>0fa27e14a8714ec089100bec0d91a64a</uuid><name>Physical disk discovery</name><type>HTTP_AGENT</type><key>physicaldisk.discovery</key><delay>1h</delay><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Discovery of physical disks.</description><item_prototypes><item_prototype><uuid>429273af827045d1b4914ab41bcefcf1</uuid><name>Dell R840: {#DISK_NAME} Get disk</name><type>HTTP_AGENT</type><key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Returns the metrics of a physical disk.</description><url>{$API.URL}{#ODATA}</url><tags><tag><tag>component</tag><value>physicaldisk</value></tag><tag><tag>component</tag><value>raw</value></tag><tag><tag>component</tag><value>storage</value></tag></tags></item_prototype><item_prototype><uuid>d3cd9e2c0b7745ebb069e3d7bba8f4ae</uuid><name>Dell R840: {#DISK_NAME} Media type</name><type>DEPENDENT</type><key>dell.server.hw.physicaldisk.media_type[{#DISK_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The type of media contained in this drive. Possible values: HDD, SSD, SMR, null.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.MediaType</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>physicaldisk</value></tag><tag><tag>component</tag><value>storage</value></tag></tags></item_prototype><item_prototype><uuid>941a692ea9dd4246ad990f8926e267ab</uuid><name>Dell R840: {#DISK_NAME} Model name</name><type>DEPENDENT</type><key>dell.server.hw.physicaldisk.model[{#DISK_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The model number of the drive.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Model</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>physicaldisk</value></tag><tag><tag>component</tag><value>storage</value></tag></tags></item_prototype><item_prototype><uuid>6af8448b44614fecbf532fac3a0a8e49</uuid><name>Dell R840: {#DISK_NAME} Serial number</name><type>DEPENDENT</type><key>dell.server.hw.physicaldisk.serialnumber[{#DISK_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The serial number of this drive.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.SerialNumber</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>physicaldisk</value></tag><tag><tag>component</tag><value>storage</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>859aeaa7bebb4958ac82b19d787a1d34</uuid><expression>last(/DELL PowerEdge R840 by HTTP/dell.server.hw.physicaldisk.serialnumber[{#DISK_NAME}],#1)&lt;&gt;last(/DELL PowerEdge R840 by HTTP/dell.server.hw.physicaldisk.serialnumber[{#DISK_NAME}],#2) and length(last(/DELL PowerEdge R840 by HTTP/dell.server.hw.physicaldisk.serialnumber[{#DISK_NAME}]))&gt;0</expression><name>Dell R840: {#DISK_NAME} has been replaced</name><event_name>Dell R840: {#DISK_NAME} has been replaced (new serial number received)</event_name><priority>INFO</priority><description>{#DISK_NAME} serial number has changed. Ack to close</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>3a9ce45d4ced4053b52f68453705066d</uuid><name>Dell R840: {#DISK_NAME} Size</name><type>DEPENDENT</type><key>dell.server.hw.physicaldisk.size[{#DISK_NAME}]</key><delay>0</delay><history>7d</history><trends>0d</trends><units>B</units><description>The size, in bytes, of this drive.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.CapacityBytes</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>physicaldisk</value></tag><tag><tag>component</tag><value>storage</value></tag></tags></item_prototype><item_prototype><uuid>03ef4df980114b6aaa42e5ae965813b9</uuid><name>Dell R840: {#DISK_NAME} Status</name><type>DEPENDENT</type><key>dell.server.hw.physicaldisk.status[{#DISK_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The status of the job. Possible values: OK, Warning, Critical.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.Health</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.physicaldisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>physicaldisk</value></tag><tag><tag>component</tag><value>storage</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>92c13e7385be48f898a74ee54d8ec382</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.physicaldisk.status[{#DISK_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: {#DISK_NAME} is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype><trigger_prototype><uuid>a1c432739ea942c7a7463531d4b268c9</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.physicaldisk.status[{#DISK_NAME}],,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: {#DISK_NAME} is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: {#DISK_NAME} is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.physicaldisk.status[{#DISK_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><url>{$API.URL}/redfish/v1/Systems/System.Embedded.1/Storage</url><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    storages = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    storages = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (storages.Members instanceof Array) {
    storages.Members.forEach(function (storage) {
        if (typeof storage[&quot;@odata.id&quot;] === 'string') {
            response = request(params.url + storage[&quot;@odata.id&quot;]);
            drives = response.body;
            if (drives.Drives instanceof Array) {
                drives.Drives.forEach(function (drive) {
                    if (typeof drive[&quot;@odata.id&quot;] === 'string') {
                        response = request(params.url + drive[&quot;@odata.id&quot;]);
                        result.push({ '{#DISK_NAME}': getField(response.body, 'Name', ''), '{#ODATA}': drive[&quot;@odata.id&quot;] });
                    }
                });
            }
        }
    });
}

return JSON.stringify(result);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>c1d96429dee84a9b940c08f93e91bae9</uuid><name>PSU discovery</name><type>HTTP_AGENT</type><key>psu.discovery</key><delay>1h</delay><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Discovery of PSU sensors.</description><item_prototypes><item_prototype><uuid>74024c4d58b64da18551a96c9bcf8b0b</uuid><name>Dell R840: {#SENSOR_NAME} Get sensor</name><type>HTTP_AGENT</type><key>dell.server.sensor.psu.get[{#SENSOR_NAME}]</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Returns the metrics of a sensor.</description><url>{$API.URL}{#ODATA}</url><tags><tag><tag>component</tag><value>psu</value></tag><tag><tag>component</tag><value>raw</value></tag></tags></item_prototype><item_prototype><uuid>c9ea5871c9214aa1986bf0f2b78ad47c</uuid><name>Dell R840: {#SENSOR_NAME} Status</name><type>DEPENDENT</type><key>dell.server.sensor.psu.status[{#SENSOR_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The status of the job. Possible values: OK, Warning, Critical.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.Health</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.sensor.psu.get[{#SENSOR_NAME}]</key></master_item><tags><tag><tag>component</tag><value>psu</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>4b381c89bf0e41f1843eff537f20db34</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.psu.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: {#SENSOR_NAME} is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype><trigger_prototype><uuid>4f72a8417a9048449ab56353c27fe0b7</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.psu.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: {#SENSOR_NAME} is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: {#SENSOR_NAME} is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.psu.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><url>{$API.URL}/redfish/v1/Chassis/System.Embedded.1/Sensors</url><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    sensors = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    sensors = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (sensors.Members instanceof Array) {
    sensors.Members.forEach(function (sensor) {
        if (typeof sensor[&quot;@odata.id&quot;] === 'string') {
            response = request(params.url + sensor[&quot;@odata.id&quot;]);
            if (getField(response.body, 'ReadingType', '') === 'Voltage') {
                result.push({ '{#SENSOR_NAME}': getField(response.body, 'Name', ''), '{#ODATA}': sensor[&quot;@odata.id&quot;] });
            }
        }
    });
}

return JSON.stringify(result);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>bc09dfd3ae534562ab9dc85fb55ebc66</uuid><name>Temperature discovery</name><type>HTTP_AGENT</type><key>temp.discovery</key><delay>1h</delay><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Discovery of temperature sensors.</description><item_prototypes><item_prototype><uuid>a6dec856a1394b62b31897d697e9c0ed</uuid><name>Dell R840: {#SENSOR_NAME} Get sensor</name><type>HTTP_AGENT</type><key>dell.server.sensor.temp.get[{#SENSOR_NAME}]</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Returns the metrics of a sensor.</description><url>{$API.URL}{#ODATA}</url><tags><tag><tag>component</tag><value>raw</value></tag><tag><tag>component</tag><value>temperature</value></tag></tags></item_prototype><item_prototype><uuid>e2a386c8abfa4bcdac269d780bcc4ee9</uuid><name>Dell R840: {#SENSOR_NAME} Status</name><type>DEPENDENT</type><key>dell.server.sensor.temp.status[{#SENSOR_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The status of the job. Possible values: OK, Warning, Critical.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.Health</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.sensor.temp.get[{#SENSOR_NAME}]</key></master_item><tags><tag><tag>component</tag><value>temperature</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>8611c1a1594a45318da88cd556db6310</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.temp.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: {#SENSOR_NAME} is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype><trigger_prototype><uuid>9f9ff19a71274eef890776c942b3dfa1</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.temp.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: {#SENSOR_NAME} is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: {#SENSOR_NAME} is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.sensor.temp.status[{#SENSOR_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>2de5e243052b4adf86921ea83ef33026</uuid><name>Dell R840: {#SENSOR_NAME} Value</name><type>DEPENDENT</type><key>dell.server.sensor.temp.value[{#SENSOR_NAME}]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>°C</units><description>The sensor value.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Reading</parameter></parameters></step></preprocessing><master_item><key>dell.server.sensor.temp.get[{#SENSOR_NAME}]</key></master_item><tags><tag><tag>component</tag><value>temperature</value></tag></tags></item_prototype></item_prototypes><url>{$API.URL}/redfish/v1/Chassis/System.Embedded.1/Sensors</url><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    sensors = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    sensors = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (sensors.Members instanceof Array) {
    sensors.Members.forEach(function (sensor) {
        if (typeof sensor[&quot;@odata.id&quot;] === 'string') {
            response = request(params.url + sensor[&quot;@odata.id&quot;]);
            if (getField(response.body, 'ReadingType', '') === 'Temperature') {
                result.push({ '{#SENSOR_NAME}': getField(response.body, 'Name', ''), '{#ODATA}': sensor[&quot;@odata.id&quot;] });
            }
        }
    });
}

return JSON.stringify(result);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>9b38e31e898d49e783e8684bcdddcd3e</uuid><name>Virtual disk discovery</name><type>HTTP_AGENT</type><key>virtualdisk.discovery</key><delay>1h</delay><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Discovery of virtual disks.</description><item_prototypes><item_prototype><uuid>ef158ff3dd4644c3b00ead75590d4a22</uuid><name>Dell R840: {#DISK_NAME} Get disk</name><type>HTTP_AGENT</type><key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$API.USER}</username><password>{$API.PASSWORD}</password><description>Returns the metrics of a virtual disk.</description><url>{$API.URL}{#ODATA}</url><tags><tag><tag>component</tag><value>raw</value></tag><tag><tag>component</tag><value>virtualdisk</value></tag></tags></item_prototype><item_prototype><uuid>736e0df33a1a44b99cdf8c93f12db99a</uuid><name>Dell R840: {#DISK_NAME} RAID status</name><type>DEPENDENT</type><key>dell.server.hw.virtualdisk.raidstatus[{#DISK_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>This property represents the RAID specific status. Possible values: Blocked, Degraded, Failed, Foreign, Offline, Online, Ready, Unknown, null.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Oem.Dell.DellVirtualDisk.RaidStatus</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>component</tag><value>virtualdisk</value></tag></tags></item_prototype><item_prototype><uuid>1247bccb744a4b8b81c4d98c275dbf96</uuid><name>Dell R840: {#DISK_NAME} Read policy</name><type>DEPENDENT</type><key>dell.server.hw.virtualdisk.readpolicy[{#DISK_NAME}]</key><delay>0</delay><history>2w</history><trends>0</trends><value_type>CHAR</value_type><description>Indicates the read cache policy setting for the Volume. Possible values: ReadAhead, AdaptiveReadAhead, Off.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Oem.Dell.DellVirtualDisk.ReadCachePolicy</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>component</tag><value>virtualdisk</value></tag></tags></item_prototype><item_prototype><uuid>9e299d9046de421e8c35a64894ee8f34</uuid><name>Dell R840: {#DISK_NAME} Size</name><type>DEPENDENT</type><key>dell.server.hw.virtualdisk.size[{#DISK_NAME}]</key><delay>0</delay><history>7d</history><trends>0d</trends><units>B</units><description>The size in bytes of this Volume.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.CapacityBytes</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>component</tag><value>virtualdisk</value></tag></tags></item_prototype><item_prototype><uuid>e0ac8a63aa634240941b2497d40c7d1f</uuid><name>Dell R840: {#DISK_NAME} Current state</name><type>DEPENDENT</type><key>dell.server.hw.virtualdisk.state[{#DISK_NAME}]</key><delay>0</delay><history>2w</history><trends>0</trends><value_type>CHAR</value_type><description>The known state of the Resource, for example, enabled. Possible values: Enabled, Disabled, StandbyOffline, StandbySpare, InTest, Starting, Absent, UnavailableOffline, Deferring, Quiesced, Updating, Qualified.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.State</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>component</tag><value>virtualdisk</value></tag></tags></item_prototype><item_prototype><uuid>1bb3f5e218bf4f1d984e160bb8e4a169</uuid><name>Dell R840: {#DISK_NAME} Status</name><type>DEPENDENT</type><key>dell.server.hw.virtualdisk.status[{#DISK_NAME}]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>The status of the job. Possible values: OK, Warning, Critical.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Status.Health</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>component</tag><value>virtualdisk</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>6c9e68f155634b9e95beeaf4cbf06ce2</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.virtualdisk.status[{#DISK_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression><name>Dell R840: {#DISK_NAME} is in a critical state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>HIGH</priority><description>Please check the device for faults.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype><trigger_prototype><uuid>ceb271b06657474aa9a9b0c4c7462474</uuid><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.virtualdisk.status[{#DISK_NAME}],,&quot;like&quot;,&quot;Warning&quot;)=1</expression><name>Dell R840: {#DISK_NAME} is in warning state</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>Please check the device for warnings.</description><dependencies><dependency><name>Dell R840: {#DISK_NAME} is in a critical state</name><expression>find(/DELL PowerEdge R840 by HTTP/dell.server.hw.virtualdisk.status[{#DISK_NAME}],,&quot;like&quot;,&quot;Critical&quot;)=1</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>5b5679210d5f4f9e915d20a0e529b338</uuid><name>Dell R840: {#DISK_NAME} Write policy</name><type>DEPENDENT</type><key>dell.server.hw.virtualdisk.writepolicy[{#DISK_NAME}]</key><delay>0</delay><history>2w</history><trends>0</trends><value_type>CHAR</value_type><description>Indicates the write cache policy setting for the Volume. Possible values: WriteThrough, ProtectedWriteBack, UnprotectedWriteBack.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.Oem.Dell.DellVirtualDisk.WriteCachePolicy</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing><master_item><key>dell.server.hw.virtualdisk.get[{#DISK_NAME}]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>component</tag><value>virtualdisk</value></tag></tags></item_prototype></item_prototypes><url>{$API.URL}/redfish/v1/Systems/System.Embedded.1/Storage</url><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>function request(url) {
    api_request = new HttpRequest();
    api_request.addHeader('Authorization: Basic ' + btoa(params.user + ':' + params.password));
    Zabbix.log(4, '[ DELL ] Sending request: ' + url);

    try {
        response = api_request.get(url);
    } catch (error) {
        Zabbix.log(4, '[ DELL ] Get request returned error ' + error);
        throw 'Get request returned error ' + error + '. Check debug log for more information.';
    }

    Zabbix.log(4, '[ DELL ] Received response with status code ' +
        api_request.getStatus() + '\n' + response);

    if (api_request.getStatus() !== 200) {
        var message = 'Request failed with status code ' + api_request.getStatus();
        if (response !== null) {
            if (typeof response.message === 'string') {
                message += ': ' + response.message;
            }
        }

        throw message + ' Check debug log for more information.';
    }

    if (response !== null) {
        try {
            response = JSON.parse(response);
        }
        catch (error) {
            Zabbix.log(4, '[ DELL ] Failed to parse response.');
            response = null;
        }
    }

    return {
        status: api_request.getStatus(),
        body: response
    };
}

function getField(object, field, def) {
    var names = field.split('.');
    var name = names.shift();

    while (typeof name !== 'undefined') {
        if (typeof object === undefined || typeof object[name] === 'undefined') {
            return def;
        }

        object = object[name];
        name = names.shift();
    }

    return object;
}

try {
    storages = JSON.parse(value);
}
catch (error) {
    Zabbix.log(4, '[ DELL ] Failed to parse response.');
    storages = null;
}

var params = {
    url: '{$API.URL}',
    user: '{$API.USER}',
    password: '{$API.PASSWORD}'
};
var result = [];

var index = params.url.indexOf('://');
index = params.url.indexOf('/', (index !== -1) ? (index + 3) : 0);
if (index !== -1) {
    params.url = params.url.substring(0, index);
}

if (storages.Members instanceof Array) {
    storages.Members.forEach(function (storage) {
        if (typeof storage[&quot;@odata.id&quot;] === 'string') {
            response = request(params.url + storage[&quot;@odata.id&quot;] + &quot;/Volumes&quot;);
            volumes = response.body;
            if (volumes.Members instanceof Array) {
                volumes.Members.forEach(function (volume) {
                    if (typeof volume[&quot;@odata.id&quot;] === 'string') {
                        response = request(params.url + volume[&quot;@odata.id&quot;]);
                        result.push({ '{#DISK_NAME}': getField(response.body, 'Name', ''), '{#ODATA}': volume[&quot;@odata.id&quot;] });
                    }
                });
            }
        }
    });
}

return JSON.stringify(result);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>6h</parameter></parameters></step></preprocessing></discovery_rule></discovery_rules><tags><tag><tag>class</tag><value>hardware</value></tag><tag><tag>target</tag><value>dell</value></tag><tag><tag>target</tag><value>dell poweredge</value></tag></tags><macros><macro><macro>{$API.PASSWORD}</macro><value>&lt;Put your password here&gt;</value><description>The Dell iDRAC user password.</description></macro><macro><macro>{$API.URL}</macro><value>&lt;Put your URL here&gt;</value><description>The Dell iDRAC Redfish API URL in the format `&lt;scheme&gt;://&lt;host&gt;:&lt;port&gt;`.</description></macro><macro><macro>{$API.USER}</macro><value>&lt;Put your username here&gt;</value><description>The Dell iDRAC username.</description></macro><macro><macro>{$IFCONTROL}</macro><value>1</value><description>Link status trigger will be fired only for interfaces that have the context macro equaled 1.</description></macro></macros><valuemaps><valuemap><uuid>82a264b7c920495ca0de966a3a7c0a14</uuid><name>zabbix.host.available</name><mappings><mapping><value>0</value><newvalue>not available</newvalue></mapping><mapping><value>1</value><newvalue>available</newvalue></mapping><mapping><value>2</value><newvalue>unknown</newvalue></mapping></mappings></valuemap></valuemaps></template></templates></zabbix_export>
