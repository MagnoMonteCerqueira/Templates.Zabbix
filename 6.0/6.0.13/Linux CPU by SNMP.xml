<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:14:41Z</date><groups><group><uuid>57b7ae836ca64446ba2c296389c009b7</uuid><name>Templates/Modules</name></group></groups><templates><template><uuid>f55b1b1c10a44fe8aef0631f6f41b86d</uuid><template>Linux CPU by SNMP</template><name>Linux CPU by SNMP</name><description>MIBs used:
HOST-RESOURCES-MIB
UCD-SNMP-MIB

Template tooling version used: 0.41</description><groups><group><name>Templates/Modules</name></group></groups><items><item><uuid>cf935e4e2f224ce5a9d09662df90e5b2</uuid><name>Interrupts per second</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.59.0</snmp_oid><key>system.cpu.intr[ssRawInterrupts.0]</key><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>335279fa524d48089d99ffba47017a0f</uuid><name>Load average (1m avg)</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.10.1.3[&quot;index&quot;,&quot;1.3.6.1.4.1.2021.10.1.2&quot;, &quot;Load-1&quot;]</snmp_oid><key>system.cpu.load.avg1[laLoad.1]</key><history>7d</history><value_type>FLOAT</value_type><description>MIB: UCD-SNMP-MIB</description><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>74a03675fdba49969d7286d718edc4e8</uuid><name>Load average (5m avg)</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.10.1.3[&quot;index&quot;,&quot;1.3.6.1.4.1.2021.10.1.2&quot;, &quot;Load-5&quot;]</snmp_oid><key>system.cpu.load.avg5[laLoad.2]</key><history>7d</history><value_type>FLOAT</value_type><description>MIB: UCD-SNMP-MIB</description><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>d774c8d00aab4158b856feda354fcef6</uuid><name>Load average (15m avg)</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.10.1.3[&quot;index&quot;,&quot;1.3.6.1.4.1.2021.10.1.2&quot;, &quot;Load-15&quot;]</snmp_oid><key>system.cpu.load.avg15[laLoad.3]</key><history>7d</history><value_type>FLOAT</value_type><description>MIB: UCD-SNMP-MIB</description><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>20dbc1d9ed25400983eadb6e9d6f1f04</uuid><name>Number of CPUs</name><type>SNMP_AGENT</type><snmp_oid>discovery[{#SNMPVALUE},1.3.6.1.2.1.25.3.3.1.1]</snmp_oid><key>system.cpu.num[snmp]</key><history>7d</history><description>MIB: HOST-RESOURCES-MIB
Count the number of CPU cores by counting number of cores discovered in hrProcessorTable using LLD</description><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>//count the number of cores
return JSON.parse(value).length;</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>2e52405bed144bd392ba386d8d8fa752</uuid><name>Context switches per second</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.60.0</snmp_oid><key>system.cpu.switches[ssRawContexts.0]</key><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item></items><discovery_rules><discovery_rule><uuid>bb04cfa331214963b311d7b397cb3c12</uuid><name>CPU discovery</name><type>DEPENDENT</type><key>cpu.discovery[snmp]</key><delay>0</delay><description>This discovery will create set of per core CPU metrics from UCD-SNMP-MIB, using {#CPU.COUNT} in preprocessing. That's the only reason why LLD is used.</description><item_prototypes><item_prototype><uuid>7cb1bdc138a041039b229804e5f55676</uuid><name>CPU guest time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.65.0</snmp_oid><key>system.cpu.guest[ssCpuRawGuest.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
Guest  time (time  spent  running  a  virtual  CPU  for  a  guest  operating  system).</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>47939519397147e7be84d1d3223e8111</uuid><name>CPU guest nice time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.66.0</snmp_oid><key>system.cpu.guest_nice[ssCpuRawGuestNice.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
Time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel).</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>b20769f44f8247e1a6a5908ff084ff81</uuid><name>CPU idle time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.53.0</snmp_oid><key>system.cpu.idle[ssCpuRawIdle.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
The time the CPU has spent doing nothing.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>7da67bc8887a4d36abba6b041a72f221</uuid><name>CPU interrupt time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.56.0</snmp_oid><key>system.cpu.interrupt[ssCpuRawInterrupt.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
The amount of time the CPU has been servicing hardware interrupts.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>ce41593112f1497884643f7f99075f4b</uuid><name>CPU iowait time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.54.0</snmp_oid><key>system.cpu.iowait[ssCpuRawWait.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
Amount of time the CPU has been waiting for I/O to complete.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>80c42f533f3d40529a1451ecdbaf3d62</uuid><name>CPU nice time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.51.0</snmp_oid><key>system.cpu.nice[ssCpuRawNice.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
The time the CPU has spent running users' processes that have been niced.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>1c121eeb3f864dd68569efff6ab79ac8</uuid><name>CPU softirq time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.61.0</snmp_oid><key>system.cpu.softirq[ssCpuRawSoftIRQ.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
The amount of time the CPU has been servicing software interrupts.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>b98feceb5d1b4dafbbbbc80d3f9598f9</uuid><name>CPU steal time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.64.0</snmp_oid><key>system.cpu.steal[ssCpuRawSteal.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
The amount of CPU 'stolen' from this virtual machine by the hypervisor for other tasks (such as running another virtual machine).</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>0b45abb043f14f23bd8d71f0bca70c06</uuid><name>CPU system time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.52.0</snmp_oid><key>system.cpu.system[ssCpuRawSystem.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
The time the CPU has spent running the kernel and its processes.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>295af9e607aa46c4886a49905137b7ad</uuid><name>CPU user time</name><type>SNMP_AGENT</type><snmp_oid>1.3.6.1.4.1.2021.11.50.0</snmp_oid><key>system.cpu.user[ssCpuRawUser.{#SNMPINDEX}]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>MIB: UCD-SNMP-MIB
The time the CPU has spent running users' processes that are not niced.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//to get utilization in %, divide by N, where N is number of cores.
return value/{#CPU.COUNT}</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item_prototype><item_prototype><uuid>aa01918c9d864f498cc211772103ba27</uuid><name>CPU utilization</name><type>DEPENDENT</type><key>system.cpu.util[snmp,{#SNMPINDEX}]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>CPU utilization in %.</description><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>//Calculate utilization
return (100 - value)</parameter></parameters></step></preprocessing><master_item><key>system.cpu.idle[ssCpuRawIdle.{#SNMPINDEX}]</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>305450aac4ce4170a3a7942f6b092593</uuid><expression>min(/Linux CPU by SNMP/system.cpu.util[snmp,{#SNMPINDEX}],5m)&gt;{$CPU.UTIL.CRIT}</expression><name>High CPU utilization</name><event_name>High CPU utilization (over {$CPU.UTIL.CRIT}% for 5m)</event_name><opdata>Current utilization: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>CPU utilization is too high. The system might be slow to respond.</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><graph_prototypes><graph_prototype><uuid>1ed285cca7774aad9335101f373eb642</uuid><name>CPU usage{#SINGLETON}</name><type>STACKED</type><ymin_type_1>FIXED</ymin_type_1><ymax_type_1>FIXED</ymax_type_1><graph_items><graph_item><color>1A7C11</color><item><host>Linux CPU by SNMP</host><key>system.cpu.system[ssCpuRawSystem.{#SNMPINDEX}]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>Linux CPU by SNMP</host><key>system.cpu.user[ssCpuRawUser.{#SNMPINDEX}]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>Linux CPU by SNMP</host><key>system.cpu.nice[ssCpuRawNice.{#SNMPINDEX}]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><item><host>Linux CPU by SNMP</host><key>system.cpu.iowait[ssCpuRawWait.{#SNMPINDEX}]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><item><host>Linux CPU by SNMP</host><key>system.cpu.steal[ssCpuRawSteal.{#SNMPINDEX}]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><item><host>Linux CPU by SNMP</host><key>system.cpu.interrupt[ssCpuRawInterrupt.{#SNMPINDEX}]</key></item></graph_item><graph_item><sortorder>6</sortorder><color>AC8C14</color><item><host>Linux CPU by SNMP</host><key>system.cpu.softirq[ssCpuRawSoftIRQ.{#SNMPINDEX}]</key></item></graph_item><graph_item><sortorder>7</sortorder><color>611F27</color><item><host>Linux CPU by SNMP</host><key>system.cpu.guest[ssCpuRawGuest.{#SNMPINDEX}]</key></item></graph_item><graph_item><sortorder>8</sortorder><color>F230E0</color><item><host>Linux CPU by SNMP</host><key>system.cpu.guest_nice[ssCpuRawGuestNice.{#SNMPINDEX}]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><uuid>27556abf8985458f9d300ab5981f6e96</uuid><name>CPU utilization{#SINGLETON}</name><ymin_type_1>FIXED</ymin_type_1><ymax_type_1>FIXED</ymax_type_1><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>Linux CPU by SNMP</host><key>system.cpu.util[snmp,{#SNMPINDEX}]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><master_item><key>system.cpu.num[snmp]</key></master_item><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>//count the number of CPU cores
return JSON.stringify([{&quot;{#CPU.COUNT}&quot;: value, &quot;{#SNMPINDEX}&quot;: 0, &quot;{#SINGLETON}&quot;:&quot;&quot;}])</parameter></parameters></step></preprocessing></discovery_rule></discovery_rules><macros><macro><macro>{$CPU.UTIL.CRIT}</macro><value>90</value></macro><macro><macro>{$LOAD_AVG_PER_CPU.MAX.WARN}</macro><value>1.5</value><description>Load per CPU considered sustainable. Tune if needed.</description></macro></macros></template></templates><triggers><trigger><uuid>4e08b6e41268476292ac92da123bd8d7</uuid><expression>min(/Linux CPU by SNMP/system.cpu.load.avg1[laLoad.1],5m)/last(/Linux CPU by SNMP/system.cpu.num[snmp])&gt;{$LOAD_AVG_PER_CPU.MAX.WARN}
and last(/Linux CPU by SNMP/system.cpu.load.avg5[laLoad.2])&gt;0
and last(/Linux CPU by SNMP/system.cpu.load.avg15[laLoad.3])&gt;0</expression><name>Load average is too high</name><event_name>Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)</event_name><opdata>Load averages(1m 5m 15m): ({ITEM.LASTVALUE1} {ITEM.LASTVALUE3} {ITEM.LASTVALUE4}), # of CPUs: {ITEM.LASTVALUE2}</opdata><priority>AVERAGE</priority><description>Per CPU load average is too high. Your system may be slow to respond.</description><tags><tag><tag>scope</tag><value>capacity</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers><graphs><graph><uuid>1b06aa0505e94191bce3bf15d41ad113</uuid><name>CPU jumps</name><graph_items><graph_item><color>1A7C11</color><item><host>Linux CPU by SNMP</host><key>system.cpu.switches[ssRawContexts.0]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>Linux CPU by SNMP</host><key>system.cpu.intr[ssRawInterrupts.0]</key></item></graph_item></graph_items></graph><graph><uuid>1ec155ff28e14859b26e9804e96c7fb8</uuid><name>System load</name><ymin_type_1>FIXED</ymin_type_1><graph_items><graph_item><color>1A7C11</color><item><host>Linux CPU by SNMP</host><key>system.cpu.load.avg1[laLoad.1]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>Linux CPU by SNMP</host><key>system.cpu.load.avg5[laLoad.2]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>Linux CPU by SNMP</host><key>system.cpu.load.avg15[laLoad.3]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><yaxisside>RIGHT</yaxisside><item><host>Linux CPU by SNMP</host><key>system.cpu.num[snmp]</key></item></graph_item></graph_items></graph></graphs></zabbix_export>
