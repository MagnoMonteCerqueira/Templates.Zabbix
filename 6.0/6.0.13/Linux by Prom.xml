<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:14:42Z</date><groups><group><uuid>846977d1dfed4968bc5f8bdb363285bc</uuid><name>Templates/Operating systems</name></group></groups><templates><template><uuid>2506b0ca01884903b547b1e19b76ce6d</uuid><template>Linux by Prom</template><name>Linux by Prom</name><description>Official Linux template using node exporter.

Known Issues:

  Description: node_exporter v0.16.0 renamed many metrics. CPU utilization for 'guest' and 'guest_nice' metrics are not supported in this template with node_exporter &lt; 0.16. Disk IO metrics are not supported. Other metrics provided as 'best effort'.
See https://github.com/prometheus/node_exporter/releases/tag/v0.16.0 for details.
  Version: below 0.16.0

  Description: metric node_network_info with label 'device' cannot be found, so network discovery is not possible.
  Version: below 0.18

You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387225-discussion-thread-for-official-zabbix-template-for-linux

Template tooling version used: 0.41</description><groups><group><name>Templates/Operating systems</name></group></groups><items><item><uuid>9a60d1e53caa4049a33aa52f3f55ad75</uuid><name>Version of node_exporter running</name><type>DEPENDENT</type><key>agent.version[node_exporter]</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_exporter_build_info</parameter><parameter>label</parameter><parameter>version</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>application</value></tag></tags></item><item><uuid>d3631bd7effc4cd1bc45c991b3c3038f</uuid><name>Number of open file descriptors</name><type>DEPENDENT</type><key>fd.open[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_filefd_allocated</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>a8b78e776e1d4011bbcb6dd54e32b40b</uuid><name>Maximum number of open file descriptors</name><type>DEPENDENT</type><key>kernel.maxfiles[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>It could be increased by using sysctl utility or modifying file /etc/sysctl.conf.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_filefd_maximum</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>c0002ad071d7497ab32633c93624e0c2</uuid><expression>last(/Linux by Prom/kernel.maxfiles[node_exporter])&lt;{$KERNEL.MAXFILES.MIN}</expression><name>Configured max number of open filedescriptors is too low</name><event_name>Configured max number of open filedescriptors is too low (&lt; {$KERNEL.MAXFILES.MIN})</event_name><priority>INFO</priority><dependencies><dependency><name>Running out of file descriptors</name><expression>last(/Linux by Prom/fd.open[node_exporter])/last(/Linux by Prom/kernel.maxfiles[node_exporter])*100&gt;80</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>8b2fffcba0b24ca8a687361645ffaa1d</uuid><name>Get node_exporter metrics</name><type>HTTP_AGENT</type><key>node_exporter.get</key><history>1h</history><trends>0</trends><value_type>TEXT</value_type><url>http://{HOST.CONN}:{$NODE_EXPORTER_PORT}/metrics</url><tags><tag><tag>component</tag><value>raw</value></tag></tags><triggers><trigger><uuid>e33fafc8476e404aa4150d0d491f4c83</uuid><expression>nodata(/Linux by Prom/node_exporter.get,30m)=1</expression><name>node_exporter is not available</name><event_name>node_exporter is not available (or no data for 30m)</event_name><priority>WARNING</priority><description>Failed to fetch system metrics from node_exporter in time.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>75afcb39d2d7496e9490cd14f1431600</uuid><name>System boot time</name><type>DEPENDENT</type><key>system.boottime[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>unixtime</units><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;^node_boot_time(?:_seconds)?$&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>a732c4df8af047fbb874e1fb363b5e9e</uuid><name>CPU guest time</name><type>DEPENDENT</type><key>system.cpu.guest[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>Guest  time (time  spent  running  a  virtual  CPU  for  a  guest  operating  system).</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_guest_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=~&quot;^(?:user|guest)$&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>759809ee6c9e43cf8ff44f987221a90e</uuid><name>CPU guest nice time</name><type>DEPENDENT</type><key>system.cpu.guest_nice[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>Time spent running a niced guest (virtual CPU for guest operating systems under the control of the Linux kernel).</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_guest_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=~&quot;^(?:nice|guest_nice)$&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>7bb99c606c6b497aaef279663b60829b</uuid><name>CPU idle time</name><type>DEPENDENT</type><key>system.cpu.idle[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>The time the CPU has spent doing nothing.</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;idle&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>4d3f64c79c684d55bcde14ca5bf3022a</uuid><name>CPU interrupt time</name><type>DEPENDENT</type><key>system.cpu.interrupt[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>The amount of time the CPU has been servicing hardware interrupts.</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;irq&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>76206cf435fd4a979dbbf74807b532de</uuid><name>Interrupts per second</name><type>DEPENDENT</type><key>system.cpu.intr[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;node_intr&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>6a727e148a2c4956bcfb6de0a3486c2d</uuid><name>CPU iowait time</name><type>DEPENDENT</type><key>system.cpu.iowait[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>Amount of time the CPU has been waiting for I/O to complete.</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;iowait&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>78fb393fe3d64cd7bf79be5427715add</uuid><name>Load average (1m avg)</name><type>DEPENDENT</type><key>system.cpu.load.avg1[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_load1</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>7fc62b26b9ff43429632f1985dc07851</uuid><name>Load average (5m avg)</name><type>DEPENDENT</type><key>system.cpu.load.avg5[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_load5</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>35fb0319c599403bbea0e616c9066e27</uuid><name>Load average (15m avg)</name><type>DEPENDENT</type><key>system.cpu.load.avg15[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_load15</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>86de794832794f57ba428cca31031005</uuid><name>CPU nice time</name><type>DEPENDENT</type><key>system.cpu.nice[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>The time the CPU has spent running users' processes that have been niced.</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;nice&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>d7db65cfeaac4541bd98d06dc35f89e2</uuid><name>Number of CPUs</name><type>DEPENDENT</type><key>system.cpu.num[node_exporter]</key><delay>0</delay><history>7d</history><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;idle&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//count the number of cores
return JSON.parse(value).length</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>cf3cd5840b91477d8e9254820896b978</uuid><name>CPU softirq time</name><type>DEPENDENT</type><key>system.cpu.softirq[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>The amount of time the CPU has been servicing software interrupts.</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;softirq&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>2ee5885c4de646c0926f0c1a48890e68</uuid><name>CPU steal time</name><type>DEPENDENT</type><key>system.cpu.steal[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>The amount of CPU 'stolen' from this virtual machine by the hypervisor for other tasks (such as running another virtual machine).</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;steal&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>b873e0d178d144fca3597d617fc119e7</uuid><name>Context switches per second</name><type>DEPENDENT</type><key>system.cpu.switches[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;node_context_switches&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>e296be976c5944b19a7178304ed6140c</uuid><name>CPU system time</name><type>DEPENDENT</type><key>system.cpu.system[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>The time the CPU has spent running the kernel and its processes.</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;system&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>832698e707d14bad8171ca71a2533350</uuid><name>CPU user time</name><type>DEPENDENT</type><key>system.cpu.user[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>The time the CPU has spent running users' processes that are not niced.</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_cpu(?:_seconds_total)?$&quot;,cpu=~&quot;.+&quot;,mode=&quot;user&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//calculates average, all cpu utilization
var valueArr = JSON.parse(value);
return valueArr.reduce(function(acc,obj){
   return acc + parseFloat(obj['value'])
},0)/valueArr.length;</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>76f60c7e4f1a482198ff4f101020bbcc</uuid><name>CPU utilization</name><type>DEPENDENT</type><key>system.cpu.util[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>CPU utilization in %.</description><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>//Calculate utilization
return (100 - value)</parameter></parameters></step></preprocessing><master_item><key>system.cpu.idle[node_exporter]</key></master_item><tags><tag><tag>component</tag><value>cpu</value></tag></tags><triggers><trigger><uuid>4c924f8243a7431886a2d69368cb7142</uuid><expression>min(/Linux by Prom/system.cpu.util[node_exporter],5m)&gt;{$CPU.UTIL.CRIT}</expression><name>High CPU utilization</name><event_name>High CPU utilization (over {$CPU.UTIL.CRIT}% for 5m)</event_name><opdata>Current utilization: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>CPU utilization is too high. The system might be slow to respond.</description><dependencies><dependency><name>Load average is too high</name><expression>min(/Linux by Prom/system.cpu.load.avg1[node_exporter],5m)/last(/Linux by Prom/system.cpu.num[node_exporter])&gt;{$LOAD_AVG_PER_CPU.MAX.WARN}
and last(/Linux by Prom/system.cpu.load.avg5[node_exporter])&gt;0
and last(/Linux by Prom/system.cpu.load.avg15[node_exporter])&gt;0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>c47995760ef3458eb6237e434ef4eef8</uuid><name>System description</name><type>DEPENDENT</type><key>system.descr[node_exporter]</key><delay>0</delay><history>2w</history><trends>0</trends><value_type>CHAR</value_type><description>Labeled system information as provided by the uname system call.</description><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>node_uname_info</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>var info = JSON.parse(value)[0];
return info.labels.sysname+' version: '+info.labels.release+' '+info.labels.version</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>9fcb3dd70dc244f2b2ff86560b37ec7e</uuid><name>System local time</name><type>DEPENDENT</type><key>system.localtime[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>unixtime</units><description>System local time of the host.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;^node_time(?:_seconds)?$&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>e91c10be1c4a4c3fadfe06aec6c1e4e4</uuid><expression>fuzzytime(/Linux by Prom/system.localtime[node_exporter],{$SYSTEM.FUZZYTIME.MAX})=0</expression><name>System time is out of sync</name><event_name>System time is out of sync (diff with Zabbix server &gt; {$SYSTEM.FUZZYTIME.MAX}s)</event_name><priority>WARNING</priority><description>The host system time is different from the Zabbix server time.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>c70cfa2ad5754089935883c5b3172656</uuid><name>System name</name><type>DEPENDENT</type><key>system.name[node_exporter]</key><delay>0</delay><history>2w</history><trends>0</trends><value_type>CHAR</value_type><description>System host name.</description><inventory_link>NAME</inventory_link><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_uname_info</parameter><parameter>label</parameter><parameter>nodename</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>e827e944568b46e284820630482317bd</uuid><expression>last(/Linux by Prom/system.name[node_exporter],#1)&lt;&gt;last(/Linux by Prom/system.name[node_exporter],#2) and length(last(/Linux by Prom/system.name[node_exporter]))&gt;0</expression><name>System name has changed</name><event_name>System name has changed (new name: {ITEM.VALUE})</event_name><priority>INFO</priority><description>System name has changed. Ack to close.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag><tag><tag>scope</tag><value>security</value></tag></tags></trigger></triggers></item><item><uuid>ce4bb6c485cc4b739dce31b631634790</uuid><name>Operating system architecture</name><type>DEPENDENT</type><key>system.sw.arch[node_exporter]</key><delay>0</delay><history>2w</history><trends>0</trends><value_type>CHAR</value_type><description>Operating system architecture of the host.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_uname_info</parameter><parameter>label</parameter><parameter>machine</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>os</value></tag></tags></item><item><uuid>11ff4e02245f4c2e9ce00e55c1a77b39</uuid><name>Operating system</name><type>DEPENDENT</type><key>system.sw.os[node_exporter]</key><delay>0</delay><history>2w</history><trends>0</trends><value_type>CHAR</value_type><inventory_link>OS</inventory_link><preprocessing><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>system.descr[node_exporter]</key></master_item><tags><tag><tag>component</tag><value>os</value></tag></tags><triggers><trigger><uuid>00974d5b128c4b1db64ca100770fb11b</uuid><expression>last(/Linux by Prom/system.sw.os[node_exporter],#1)&lt;&gt;last(/Linux by Prom/system.sw.os[node_exporter],#2) and length(last(/Linux by Prom/system.sw.os[node_exporter]))&gt;0</expression><name>Operating system description has changed</name><priority>INFO</priority><description>Operating system description has changed. Possible reasons that system has been updated or replaced. Ack to close.</description><manual_close>YES</manual_close><dependencies><dependency><name>System name has changed</name><expression>last(/Linux by Prom/system.name[node_exporter],#1)&lt;&gt;last(/Linux by Prom/system.name[node_exporter],#2) and length(last(/Linux by Prom/system.name[node_exporter]))&gt;0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>ccc3c4d69fef412aa53c6a7320ef44fb</uuid><name>Free swap space</name><type>DEPENDENT</type><key>system.swap.free[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>The free space of swap volume/file in bytes.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;node_memory_SwapFree&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>99feb76b7da04b00a0d191b92bf979a1</uuid><name>Free swap space in %</name><type>CALCULATED</type><key>system.swap.pfree[node_exporter]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><params>last(//system.swap.free[node_exporter])/last(//system.swap.total[node_exporter])*100</params><description>The free space of swap volume/file in percent.</description><tags><tag><tag>component</tag><value>memory</value></tag><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>d0c1ef0a679546d780df30a02a27df44</uuid><name>Total swap space</name><type>DEPENDENT</type><key>system.swap.total[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>The total space of swap volume/file in bytes.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;node_memory_SwapTotal&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>7eeabdb6bf44483bab91faaab8bb24d5</uuid><name>System uptime</name><type>DEPENDENT</type><key>system.uptime[node_exporter]</key><delay>0</delay><history>2w</history><trends>0d</trends><units>uptime</units><description>System uptime in 'N days, hh:mm:ss' format.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;^node_boot_time(?:_seconds)?$&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//use boottime to calculate uptime
return (Math.floor(Date.now()/1000)-Number(value));</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>83311a7c73c441d39d88fe0fc7b55af9</uuid><expression>last(/Linux by Prom/system.uptime[node_exporter])&lt;10m</expression><name>has been restarted</name><event_name>{HOST.NAME} has been restarted (uptime &lt; 10m)</event_name><priority>WARNING</priority><description>The device uptime is less than 10 minutes.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>70a75efafbc84cbebd1bb262ec797523</uuid><name>Available memory</name><type>DEPENDENT</type><key>vm.memory.available[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>Available memory, in Linux, available = free + buffers + cache. On other platforms calculation may vary. See also Appendixes in Zabbix Documentation about parameters of the vm.memory.size item.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;node_memory_MemAvailable&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>e3ad296f16084e9caa923b449d8c725f</uuid><name>Total memory</name><type>DEPENDENT</type><key>vm.memory.total[node_exporter]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>Total memory in Bytes.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;node_memory_MemTotal&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>60c716c692fb482f9abffb0fc9ce4324</uuid><name>Memory utilization</name><type>CALCULATED</type><key>vm.memory.util[node_exporter]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><params>(last(//vm.memory.total[node_exporter])-last(//vm.memory.available[node_exporter]))/last(//vm.memory.total[node_exporter])*100</params><description>Memory used percentage is calculated as (total-available)/total*100.</description><tags><tag><tag>component</tag><value>memory</value></tag></tags><triggers><trigger><uuid>72304b3a167e41ccbcdb75568c65294a</uuid><expression>min(/Linux by Prom/vm.memory.util[node_exporter],5m)&gt;{$MEMORY.UTIL.MAX}</expression><name>High memory utilization</name><event_name>High memory utilization (&gt;{$MEMORY.UTIL.MAX}% for 5m)</event_name><priority>AVERAGE</priority><description>The system is running out of free memory.</description><dependencies><dependency><name>Lack of available memory</name><expression>max(/Linux by Prom/vm.memory.available[node_exporter],5m)&lt;{$MEMORY.AVAILABLE.MIN} and last(/Linux by Prom/vm.memory.total[node_exporter])&gt;0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>capacity</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item></items><discovery_rules><discovery_rule><uuid>91531a7a68564860976096df6899fe88</uuid><name>Network interface discovery</name><type>DEPENDENT</type><key>net.if.discovery[node_exporter]</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#IFNAME}</macro><value>{$NET.IF.IFNAME.MATCHES}</value><formulaid>C</formulaid></condition><condition><macro>{#IFNAME}</macro><value>{$NET.IF.IFNAME.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>D</formulaid></condition><condition><macro>{#IFALIAS}</macro><value>{$NET.IF.IFALIAS.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#IFALIAS}</macro><value>{$NET.IF.IFALIAS.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition><condition><macro>{#IFOPERSTATUS}</macro><value>{$NET.IF.IFOPERSTATUS.MATCHES}</value><formulaid>E</formulaid></condition><condition><macro>{#IFOPERSTATUS}</macro><value>{$NET.IF.IFOPERSTATUS.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>F</formulaid></condition></conditions></filter><description>Discovery of network interfaces. Requires node_exporter v0.18 and up.</description><item_prototypes><item_prototype><uuid>ee28aff27b4f40eaa8e903ce3fab8555</uuid><name>Interface {#IFNAME}({#IFALIAS}): Inbound packets discarded</name><type>DEPENDENT</type><key>net.if.in.discards[node_exporter,&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_receive_drop_total{device=&quot;{#IFNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>f6b39f743bb6438d876236ae651f68ee</uuid><name>Interface {#IFNAME}({#IFALIAS}): Inbound packets with errors</name><type>DEPENDENT</type><key>net.if.in.errors[node_exporter,&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_receive_errs_total{device=&quot;{#IFNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>eea37c3779994ac5b35bb3b125429340</uuid><name>Interface {#IFNAME}({#IFALIAS}): Bits received</name><type>DEPENDENT</type><key>net.if.in[node_exporter,&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>bps</units><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_receive_bytes_total{device=&quot;{#IFNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>8</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>aec995b7fe724823bdb41f134594b648</uuid><name>Interface {#IFNAME}({#IFALIAS}): Outbound packets discarded</name><type>DEPENDENT</type><key>net.if.out.discards[node_exporter,&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_transmit_drop_total{device=&quot;{#IFNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>4ffe74b94eb14a4ea61c0df790d0920f</uuid><name>Interface {#IFNAME}({#IFALIAS}): Outbound packets with errors</name><type>DEPENDENT</type><key>net.if.out.errors[node_exporter&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_transmit_errs_total{device=&quot;{#IFNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>ddc4111fefec473e8d8b079f6eb50c05</uuid><name>Interface {#IFNAME}({#IFALIAS}): Bits sent</name><type>DEPENDENT</type><key>net.if.out[node_exporter,&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>bps</units><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_transmit_bytes_total{device=&quot;{#IFNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>8</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>51f9a39ad6d940ae914cd0a350d83dab</uuid><name>Interface {#IFNAME}({#IFALIAS}): Speed</name><type>DEPENDENT</type><key>net.if.speed[node_exporter,&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><trends>0d</trends><units>bps</units><description>Sets value to 0 if metric is missing in node_exporter output.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_speed_bytes{device=&quot;{#IFNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>MULTIPLIER</type><parameters><parameter>8</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>4097f76d86cd417db586c5973e1da90b</uuid><name>Interface {#IFNAME}({#IFALIAS}): Operational status</name><type>DEPENDENT</type><key>net.if.status[node_exporter,&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><trends>0</trends><description>Reference: https://www.kernel.org/doc/Documentation/networking/operstates.txt</description><valuemap><name>ifOperStatus</name></valuemap><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_info{device=&quot;{#IFNAME}&quot;}</parameter><parameter>label</parameter><parameter>operstate</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>var newvalue;
switch(value) {
  case &quot;unknown&quot;:
    newvalue = 0;
    break;
  case &quot;notpresent&quot;:
    newvalue = 1;
    break;
  case &quot;down&quot;:
    newvalue = 2;
    break;
  case &quot;lowerlayerdown&quot;:
    newvalue = 3;
    break;
  case &quot;testing&quot;:
    newvalue = 4;
    break;
  case &quot;dormant&quot;:
    newvalue = 5;
    break;
  case &quot;up&quot;:
    newvalue = 6;
    break;  default:
    newvalue = &quot;Problem parsing interface operstate in JS&quot;;
}
return newvalue;</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>e35b59dc09754451a721793831edc3d4</uuid><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])=2 and (last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#1)&lt;&gt;last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#2))</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>This trigger expression works as follows:
1. Can be triggered if operations status is down.
2. {$IFCONTROL:&quot;{#IFNAME}&quot;}=1 - user can redefine Context macro to value - 0. That marks this interface as not important. No new trigger will be fired if this interface is down.
3. {TEMPLATE_NAME:METRIC.diff()}=1) - trigger fires only if operational status was up(1) sometime before. (So, do not fire 'ethernal off' interfaces.)

WARNING: if closed manually - won't fire again on next poll, because of .diff.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>ce9cfd9880c44aaea18cfa2ab2fdf0e1</uuid><name>Interface {#IFNAME}({#IFALIAS}): Interface type</name><type>DEPENDENT</type><key>net.if.type[node_exporter,&quot;{#IFNAME}&quot;]</key><delay>0</delay><history>7d</history><trends>0d</trends><description>node_network_protocol_type protocol_type value of /sys/class/net/&lt;iface&gt;.</description><valuemap><name>Linux::Interface protocol types</name></valuemap><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_network_protocol_type{device=&quot;{#IFNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype></item_prototypes><trigger_prototypes><trigger_prototype><uuid>96bbb9726ef149a5b97f96d54502593a</uuid><expression>change(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;])&lt;0 and last(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;])&gt;0
and (
last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])=6 or
last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])=7 or
last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])=11 or
last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])=62 or
last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])=69 or
last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])=117
)
and
(last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])&lt;&gt;2)</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>(change(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;])&gt;0 and last(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;],#2)&gt;0) or
(last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])=2)</recovery_expression><name>Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before</name><opdata>Current reported speed: {ITEM.LASTVALUE1}</opdata><priority>INFO</priority><description>This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])=2 and (last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#1)&lt;&gt;last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#2))</expression><recovery_expression>last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype><trigger_prototype><uuid>08d5857e474042b5906288156c8c5d52</uuid><expression>change(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])&lt;0 and last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])&gt;0
and
(last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])=6
or last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])=1)
and
(last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])&lt;&gt;2)</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>(change(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;])&gt;0 and last(/Linux by Prom/net.if.type[node_exporter,&quot;{#IFNAME}&quot;],#2)&gt;0) or
(last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])=2)</recovery_expression><name>Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before</name><opdata>Current reported speed: {ITEM.LASTVALUE1}</opdata><priority>INFO</priority><description>This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])=2 and (last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#1)&lt;&gt;last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#2))</expression><recovery_expression>last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype><trigger_prototype><uuid>11e2c8023463482da878cdad5bb7de76</uuid><expression>(avg(/Linux by Prom/net.if.in[node_exporter,&quot;{#IFNAME}&quot;],15m)&gt;({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}/100)*last(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;]) or
avg(/Linux by Prom/net.if.out[node_exporter,&quot;{#IFNAME}&quot;],15m)&gt;({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}/100)*last(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;])) and
last(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;])&gt;0</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>avg(/Linux by Prom/net.if.in[node_exporter,&quot;{#IFNAME}&quot;],15m)&lt;(({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}-3)/100)*last(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;]) and
avg(/Linux by Prom/net.if.out[node_exporter,&quot;{#IFNAME}&quot;],15m)&lt;(({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}-3)/100)*last(/Linux by Prom/net.if.speed[node_exporter,&quot;{#IFNAME}&quot;])</recovery_expression><name>Interface {#IFNAME}({#IFALIAS}): High bandwidth usage</name><event_name>Interface {#IFNAME}({#IFALIAS}): High bandwidth usage (&gt;{$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}%)</event_name><opdata>In: {ITEM.LASTVALUE1}, out: {ITEM.LASTVALUE3}, speed: {ITEM.LASTVALUE2}</opdata><priority>WARNING</priority><description>The network interface utilization is close to its estimated maximum bandwidth.</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])=2 and (last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#1)&lt;&gt;last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#2))</expression><recovery_expression>last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype><trigger_prototype><uuid>6e8269b2260e42de97aec08043a768df</uuid><expression>min(/Linux by Prom/net.if.in.errors[node_exporter,&quot;{#IFNAME}&quot;],5m)&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}
or min(/Linux by Prom/net.if.out.errors[node_exporter&quot;{#IFNAME}&quot;],5m)&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>max(/Linux by Prom/net.if.in.errors[node_exporter,&quot;{#IFNAME}&quot;],5m)&lt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}*0.8
and max(/Linux by Prom/net.if.out.errors[node_exporter&quot;{#IFNAME}&quot;],5m)&lt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}*0.8</recovery_expression><name>Interface {#IFNAME}({#IFALIAS}): High error rate</name><event_name>Interface {#IFNAME}({#IFALIAS}): High error rate (&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;} for 5m)</event_name><opdata>errors in: {ITEM.LASTVALUE1}, errors out: {ITEM.LASTVALUE2}</opdata><priority>WARNING</priority><description>Recovers when below 80% of {$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;} threshold</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])=2 and (last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#1)&lt;&gt;last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;],#2))</expression><recovery_expression>last(/Linux by Prom/net.if.status[node_exporter,&quot;{#IFNAME}&quot;])&lt;&gt;2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes><graph_prototypes><graph_prototype><uuid>cf143a7bb6d548fc9d3b089dcbb47ccf</uuid><name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>Linux by Prom</host><key>net.if.in[node_exporter,&quot;{#IFNAME}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>Linux by Prom</host><key>net.if.out[node_exporter,&quot;{#IFNAME}&quot;]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><yaxisside>RIGHT</yaxisside><item><host>Linux by Prom</host><key>net.if.out.errors[node_exporter&quot;{#IFNAME}&quot;]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><yaxisside>RIGHT</yaxisside><item><host>Linux by Prom</host><key>net.if.in.errors[node_exporter,&quot;{#IFNAME}&quot;]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><yaxisside>RIGHT</yaxisside><item><host>Linux by Prom</host><key>net.if.out.discards[node_exporter,&quot;{#IFNAME}&quot;]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><yaxisside>RIGHT</yaxisside><item><host>Linux by Prom</host><key>net.if.in.discards[node_exporter,&quot;{#IFNAME}&quot;]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><master_item><key>node_exporter.get</key></master_item><lld_macro_paths><lld_macro_path><lld_macro>{#HELP}</lld_macro><path>$.help</path></lld_macro_path><lld_macro_path><lld_macro>{#IFALIAS}</lld_macro><path>$.labels.ifalias</path></lld_macro_path><lld_macro_path><lld_macro>{#IFNAME}</lld_macro><path>$.labels.device</path></lld_macro_path><lld_macro_path><lld_macro>{#IFOPERSTATUS}</lld_macro><path>$.labels.operstate</path></lld_macro_path></lld_macro_paths><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_network_info$&quot;}</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>920f367e232945b8992d0f32e6f9324d</uuid><name>Block devices discovery</name><type>DEPENDENT</type><key>vfs.dev.discovery[node_exporter]</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#DEVNAME}</macro><value>{$VFS.DEV.DEVNAME.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#DEVNAME}</macro><value>{$VFS.DEV.DEVNAME.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition></conditions></filter><item_prototypes><item_prototype><uuid>0a0949bcdf754fbe82e772ffbd69b5ba</uuid><name>{#DEVNAME}: Disk average queue size (avgqu-sz)</name><type>DEPENDENT</type><key>vfs.dev.queue_size[node_exporter,&quot;{#DEVNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Current average disk queue, the number of requests outstanding on the disk at the time the performance data is collected.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_disk_io_time_weighted_seconds_total{device=&quot;{#DEVNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>disk</tag><value>{#DEVNAME}</value></tag></tags></item_prototype><item_prototype><uuid>9d158ecffdaa43f6bd0ab867ca68620b</uuid><name>{#DEVNAME}: Disk read request avg waiting time (r_await)</name><type>CALCULATED</type><key>vfs.dev.read.await[node_exporter,&quot;{#DEVNAME}&quot;]</key><history>7d</history><value_type>FLOAT</value_type><units>!ms</units><params>(last(//vfs.dev.read.time.rate[node_exporter,&quot;{#DEVNAME}&quot;])/(last(//vfs.dev.read.rate[node_exporter,&quot;{#DEVNAME}&quot;])+(last(//vfs.dev.read.rate[node_exporter,&quot;{#DEVNAME}&quot;])=0)))*1000*(last(//vfs.dev.read.rate[node_exporter,&quot;{#DEVNAME}&quot;]) &gt; 0)</params><description>This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception.</description><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>disk</tag><value>{#DEVNAME}</value></tag></tags></item_prototype><item_prototype><uuid>dcd6f61ffb2f491ba78845514654a8cf</uuid><name>{#DEVNAME}: Disk read rate</name><type>DEPENDENT</type><key>vfs.dev.read.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>!r/s</units><description>r/s. The number (after merges) of read requests completed per second for the device.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_disk_reads_completed_total{device=&quot;{#DEVNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>disk</tag><value>{#DEVNAME}</value></tag></tags></item_prototype><item_prototype><uuid>73940f30ea2b4b88b0047e54b773b747</uuid><name>{#DEVNAME}: Disk read time (rate)</name><type>DEPENDENT</type><key>vfs.dev.read.time.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rate of total read time counter. Used in r_await calculation.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_disk_read_time_seconds_total{device=&quot;{#DEVNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>disk</tag><value>{#DEVNAME}</value></tag></tags></item_prototype><item_prototype><uuid>d087a0525500450c9a307ff21f58482a</uuid><name>{#DEVNAME}: Disk utilization</name><type>DEPENDENT</type><key>vfs.dev.util[node_exporter,&quot;{#DEVNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>This item is the percentage of elapsed time that the selected disk drive was busy servicing read or writes requests.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_disk_io_time_seconds_total{device=&quot;{#DEVNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>disk</tag><value>{#DEVNAME}</value></tag></tags></item_prototype><item_prototype><uuid>94203a49081047b6bc76cd66aecd55ce</uuid><name>{#DEVNAME}: Disk write request avg waiting time (w_await)</name><type>CALCULATED</type><key>vfs.dev.write.await[node_exporter,&quot;{#DEVNAME}&quot;]</key><history>7d</history><value_type>FLOAT</value_type><units>!ms</units><params>(last(//vfs.dev.write.time.rate[node_exporter,&quot;{#DEVNAME}&quot;])/(last(//vfs.dev.write.rate[node_exporter,&quot;{#DEVNAME}&quot;])+(last(//vfs.dev.write.rate[node_exporter,&quot;{#DEVNAME}&quot;])=0)))*1000*(last(//vfs.dev.write.rate[node_exporter,&quot;{#DEVNAME}&quot;]) &gt; 0)</params><description>This formula contains two boolean expressions that evaluates to 1 or 0 in order to set calculated metric to zero and to avoid division by zero exception.</description><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>disk</tag><value>{#DEVNAME}</value></tag></tags></item_prototype><item_prototype><uuid>806ba0a56fab4b5094008c98bb817e2b</uuid><name>{#DEVNAME}: Disk write rate</name><type>DEPENDENT</type><key>vfs.dev.write.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>!w/s</units><description>w/s. The number (after merges) of write requests completed per second for the device.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_disk_writes_completed_total{device=&quot;{#DEVNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>disk</tag><value>{#DEVNAME}</value></tag></tags></item_prototype><item_prototype><uuid>601cc30457934b7f8f050b2cea13ccea</uuid><name>{#DEVNAME}: Disk write time (rate)</name><type>DEPENDENT</type><key>vfs.dev.write.time.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rate of total write time counter. Used in w_await calculation.</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>node_disk_write_time_seconds_total{device=&quot;{#DEVNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>disk</tag><value>{#DEVNAME}</value></tag></tags></item_prototype></item_prototypes><trigger_prototypes><trigger_prototype><uuid>412381f71bba441b955898839f81d51c</uuid><expression>min(/Linux by Prom/vfs.dev.read.await[node_exporter,&quot;{#DEVNAME}&quot;],15m) &gt; {$VFS.DEV.READ.AWAIT.WARN:&quot;{#DEVNAME}&quot;} or min(/Linux by Prom/vfs.dev.write.await[node_exporter,&quot;{#DEVNAME}&quot;],15m) &gt; {$VFS.DEV.WRITE.AWAIT.WARN:&quot;{#DEVNAME}&quot;}</expression><name>{#DEVNAME}: Disk read/write request responses are too high</name><event_name>{#DEVNAME}: Disk read/write request responses are too high (read &gt; {$VFS.DEV.READ.AWAIT.WARN:&quot;{#DEVNAME}&quot;} ms for 15m or write &gt; {$VFS.DEV.WRITE.AWAIT.WARN:&quot;{#DEVNAME}&quot;} ms for 15m)</event_name><priority>WARNING</priority><description>This trigger might indicate disk {#DEVNAME} saturation.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes><graph_prototypes><graph_prototype><uuid>13a5a74a99734449b08075bbb25bb498</uuid><name>{#DEVNAME}: Disk average waiting time</name><graph_items><graph_item><color>1A7C11</color><item><host>Linux by Prom</host><key>vfs.dev.read.await[node_exporter,&quot;{#DEVNAME}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>GRADIENT_LINE</drawtype><color>2774A4</color><item><host>Linux by Prom</host><key>vfs.dev.write.await[node_exporter,&quot;{#DEVNAME}&quot;]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><uuid>bad3d3ba32534ef194a4837d666ddccb</uuid><name>{#DEVNAME}: Disk read/write rates</name><graph_items><graph_item><color>1A7C11</color><item><host>Linux by Prom</host><key>vfs.dev.read.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>GRADIENT_LINE</drawtype><color>2774A4</color><item><host>Linux by Prom</host><key>vfs.dev.write.rate[node_exporter,&quot;{#DEVNAME}&quot;]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><uuid>aa53b66adaac4e62863ea2dd59ba3ea1</uuid><name>{#DEVNAME}: Disk utilization and queue</name><graph_items><graph_item><color>1A7C11</color><yaxisside>RIGHT</yaxisside><item><host>Linux by Prom</host><key>vfs.dev.queue_size[node_exporter,&quot;{#DEVNAME}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>GRADIENT_LINE</drawtype><color>2774A4</color><item><host>Linux by Prom</host><key>vfs.dev.util[node_exporter,&quot;{#DEVNAME}&quot;]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><master_item><key>node_exporter.get</key></master_item><lld_macro_paths><lld_macro_path><lld_macro>{#DEVNAME}</lld_macro><path>$.labels.device</path></lld_macro_path><lld_macro_path><lld_macro>{#HELP}</lld_macro><path>$.help</path></lld_macro_path></lld_macro_paths><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>node_disk_io_now{device=~&quot;.+&quot;}</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>85d047920c1342b992fa1905eb489a44</uuid><name>Mounted filesystem discovery</name><type>DEPENDENT</type><key>vfs.fs.discovery[node_exporter]</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#FSTYPE}</macro><value>{$VFS.FS.FSTYPE.MATCHES}</value><formulaid>E</formulaid></condition><condition><macro>{#FSTYPE}</macro><value>{$VFS.FS.FSTYPE.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>F</formulaid></condition><condition><macro>{#FSNAME}</macro><value>{$VFS.FS.FSNAME.MATCHES}</value><formulaid>B</formulaid></condition><condition><macro>{#FSNAME}</macro><value>{$VFS.FS.FSNAME.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>C</formulaid></condition><condition><macro>{#FSNAME}</macro><value>{$VFS.FS.FSDEVICE.MATCHES}</value><formulaid>D</formulaid></condition><condition><macro>{#FSDEVICE}</macro><value>{$VFS.FS.FSDEVICE.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>A</formulaid></condition></conditions></filter><description>Discovery of file systems of different types.</description><item_prototypes><item_prototype><uuid>3a3edb8bf5a74a63baa27c64d1a44493</uuid><name>{#FSNAME}: Free space</name><type>DEPENDENT</type><key>vfs.fs.free[node_exporter,&quot;{#FSNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;^node_filesystem_avail(?:_bytes)?$&quot;, mountpoint=&quot;{#FSNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>filesystem</tag><value>{#FSNAME}</value></tag></tags></item_prototype><item_prototype><uuid>ee1dad3677214561baafa6d930358ee0</uuid><name>{#FSNAME}: Free inodes in %</name><type>DEPENDENT</type><key>vfs.fs.inode.pfree[node_exporter,&quot;{#FSNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>%</units><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;node_filesystem_files.*&quot;,mountpoint=&quot;{#FSNAME}&quot;}</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>//count vfs.fs.inode.pfree
var inode_free;
var inode_total;
JSON.parse(value).forEach(function(metric) {
  if (metric['name'] == 'node_filesystem_files'){
      inode_total = metric['value'];
  } else if (metric['name'] == 'node_filesystem_files_free'){
      inode_free = metric['value'];
  }
});
return (inode_free/inode_total)*100;</parameter></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>filesystem</tag><value>{#FSNAME}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>27cabcc9d9644ba6b7bd8c92a740e3cc</uuid><expression>min(/Linux by Prom/vfs.fs.inode.pfree[node_exporter,&quot;{#FSNAME}&quot;],5m)&lt;{$VFS.FS.INODE.PFREE.MIN.CRIT:&quot;{#FSNAME}&quot;}</expression><name>{#FSNAME}: Running out of free inodes</name><event_name>{#FSNAME}: Running out of free inodes (free &lt; {$VFS.FS.INODE.PFREE.MIN.CRIT:&quot;{#FSNAME}&quot;}%)</event_name><opdata>Free inodes: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>It may become impossible to write to disk if there are no index nodes left.
As symptoms, 'No space left on device' or 'Disk is full' errors may be seen even though free space is available.</description><tags><tag><tag>scope</tag><value>capacity</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype><trigger_prototype><uuid>c639215f6dd94c71aebf97265a282a0d</uuid><expression>min(/Linux by Prom/vfs.fs.inode.pfree[node_exporter,&quot;{#FSNAME}&quot;],5m)&lt;{$VFS.FS.INODE.PFREE.MIN.WARN:&quot;{#FSNAME}&quot;}</expression><name>{#FSNAME}: Running out of free inodes</name><event_name>{#FSNAME}: Running out of free inodes (free &lt; {$VFS.FS.INODE.PFREE.MIN.WARN:&quot;{#FSNAME}&quot;}%)</event_name><opdata>Free inodes: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>It may become impossible to write to disk if there are no index nodes left.
As symptoms, 'No space left on device' or 'Disk is full' errors may be seen even though free space is available.</description><dependencies><dependency><name>{#FSNAME}: Running out of free inodes</name><expression>min(/Linux by Prom/vfs.fs.inode.pfree[node_exporter,&quot;{#FSNAME}&quot;],5m)&lt;{$VFS.FS.INODE.PFREE.MIN.CRIT:&quot;{#FSNAME}&quot;}</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>capacity</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>89afe41bb0d74c579a9cff8b036d30dc</uuid><name>{#FSNAME}: Space utilization</name><type>CALCULATED</type><key>vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><params>(last(//vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;])/last(//vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;]))*100</params><description>Space utilization in % for {#FSNAME}</description><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>filesystem</tag><value>{#FSNAME}</value></tag></tags></item_prototype><item_prototype><uuid>acb3d42ae23b48cbacd0e99c27697798</uuid><name>{#FSNAME}: Total space</name><type>DEPENDENT</type><key>vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>Total space in Bytes</description><preprocessing><step><type>PROMETHEUS_PATTERN</type><parameters><parameter>{__name__=~&quot;^node_filesystem_size(?:_bytes)?$&quot;, mountpoint=&quot;{#FSNAME}&quot;}</parameter><parameter>value</parameter><parameter/></parameters></step></preprocessing><master_item><key>node_exporter.get</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>filesystem</tag><value>{#FSNAME}</value></tag></tags></item_prototype><item_prototype><uuid>89e559a7ff364dd78b638454896692c5</uuid><name>{#FSNAME}: Used space</name><type>CALCULATED</type><key>vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;]</key><history>7d</history><value_type>FLOAT</value_type><units>B</units><params>(last(//vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;])-last(//vfs.fs.free[node_exporter,&quot;{#FSNAME}&quot;]))</params><description>Used storage in Bytes</description><tags><tag><tag>component</tag><value>storage</value></tag><tag><tag>filesystem</tag><value>{#FSNAME}</value></tag></tags></item_prototype></item_prototypes><trigger_prototypes><trigger_prototype><uuid>d5687d7aa0484b389f0bd168d50ee1e6</uuid><expression>last(/Linux by Prom/vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;])&gt;{$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;} and
((last(/Linux by Prom/vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;])-last(/Linux by Prom/vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;]))&lt;{$VFS.FS.FREE.MIN.CRIT:&quot;{#FSNAME}&quot;} or timeleft(/Linux by Prom/vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;],1h,100)&lt;1d)</expression><name>{#FSNAME}: Disk space is critically low</name><event_name>{#FSNAME}: Disk space is critically low (used &gt; {$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;}%)</event_name><opdata>Space used: {ITEM.LASTVALUE3} of {ITEM.LASTVALUE2} ({ITEM.LASTVALUE1})</opdata><priority>AVERAGE</priority><description>Two conditions should match: First, space utilization should be above {$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;}.
 Second condition should be one of the following:
 - The disk free space is less than {$VFS.FS.FREE.MIN.CRIT:&quot;{#FSNAME}&quot;}.
 - The disk will be full in less than 24 hours.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag><tag><tag>scope</tag><value>capacity</value></tag></tags></trigger_prototype><trigger_prototype><uuid>8f765148cfd64d5ebda93f39d0b20e36</uuid><expression>last(/Linux by Prom/vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;])&gt;{$VFS.FS.PUSED.MAX.WARN:&quot;{#FSNAME}&quot;} and
((last(/Linux by Prom/vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;])-last(/Linux by Prom/vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;]))&lt;{$VFS.FS.FREE.MIN.WARN:&quot;{#FSNAME}&quot;} or timeleft(/Linux by Prom/vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;],1h,100)&lt;1d)</expression><name>{#FSNAME}: Disk space is low</name><event_name>{#FSNAME}: Disk space is low (used &gt; {$VFS.FS.PUSED.MAX.WARN:&quot;{#FSNAME}&quot;}%)</event_name><opdata>Space used: {ITEM.LASTVALUE3} of {ITEM.LASTVALUE2} ({ITEM.LASTVALUE1})</opdata><priority>WARNING</priority><description>Two conditions should match: First, space utilization should be above {$VFS.FS.PUSED.MAX.WARN:&quot;{#FSNAME}&quot;}.
 Second condition should be one of the following:
 - The disk free space is less than {$VFS.FS.FREE.MIN.WARN:&quot;{#FSNAME}&quot;}.
 - The disk will be full in less than 24 hours.</description><manual_close>YES</manual_close><dependencies><dependency><name>{#FSNAME}: Disk space is critically low</name><expression>last(/Linux by Prom/vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;])&gt;{$VFS.FS.PUSED.MAX.CRIT:&quot;{#FSNAME}&quot;} and
((last(/Linux by Prom/vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;])-last(/Linux by Prom/vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;]))&lt;{$VFS.FS.FREE.MIN.CRIT:&quot;{#FSNAME}&quot;} or timeleft(/Linux by Prom/vfs.fs.pused[node_exporter,&quot;{#FSNAME}&quot;],1h,100)&lt;1d)</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag><tag><tag>scope</tag><value>capacity</value></tag></tags></trigger_prototype></trigger_prototypes><graph_prototypes><graph_prototype><uuid>aa350a426fcd40af96cd15f778cdf62d</uuid><name>{#FSNAME}: Disk space usage</name><width>600</width><height>340</height><type>PIE</type><show_3d>YES</show_3d><graph_items><graph_item><color>969696</color><calc_fnc>LAST</calc_fnc><type>GRAPH_SUM</type><item><host>Linux by Prom</host><key>vfs.fs.total[node_exporter,&quot;{#FSNAME}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>C80000</color><calc_fnc>LAST</calc_fnc><item><host>Linux by Prom</host><key>vfs.fs.used[node_exporter,&quot;{#FSNAME}&quot;]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><master_item><key>node_exporter.get</key></master_item><lld_macro_paths><lld_macro_path><lld_macro>{#FSDEVICE}</lld_macro><path>$.labels.device</path></lld_macro_path><lld_macro_path><lld_macro>{#FSNAME}</lld_macro><path>$.labels.mountpoint</path></lld_macro_path><lld_macro_path><lld_macro>{#FSTYPE}</lld_macro><path>$.labels.fstype</path></lld_macro_path><lld_macro_path><lld_macro>{#HELP}</lld_macro><path>$.help</path></lld_macro_path></lld_macro_paths><preprocessing><step><type>PROMETHEUS_TO_JSON</type><parameters><parameter>{__name__=~&quot;^node_filesystem_size(?:_bytes)?$&quot;, mountpoint=~&quot;.+&quot;}</parameter></parameters></step></preprocessing></discovery_rule></discovery_rules><tags><tag><tag>class</tag><value>os</value></tag><tag><tag>target</tag><value>linux</value></tag></tags><macros><macro><macro>{$CPU.UTIL.CRIT}</macro><value>90</value></macro><macro><macro>{$IF.ERRORS.WARN}</macro><value>2</value></macro><macro><macro>{$IF.UTIL.MAX}</macro><value>90</value></macro><macro><macro>{$IFCONTROL}</macro><value>1</value></macro><macro><macro>{$KERNEL.MAXFILES.MIN}</macro><value>256</value></macro><macro><macro>{$LOAD_AVG_PER_CPU.MAX.WARN}</macro><value>1.5</value><description>Load per CPU considered sustainable. Tune if needed.</description></macro><macro><macro>{$MEMORY.AVAILABLE.MIN}</macro><value>20M</value></macro><macro><macro>{$MEMORY.UTIL.MAX}</macro><value>90</value></macro><macro><macro>{$NET.IF.IFALIAS.MATCHES}</macro><value>^.*$</value></macro><macro><macro>{$NET.IF.IFALIAS.NOT_MATCHES}</macro><value>CHANGE_IF_NEEDED</value></macro><macro><macro>{$NET.IF.IFNAME.MATCHES}</macro><value>^.*$</value></macro><macro><macro>{$NET.IF.IFNAME.NOT_MATCHES}</macro><value>(^Software Loopback Interface|^NULL[0-9.]*$|^[Ll]o[0-9.]*$|^[Ss]ystem$|^Nu[0-9.]*$|^veth[0-9A-z]+$|docker[0-9]+|br-[a-z0-9]{12})</value><description>Filter out loopbacks, nulls, docker veth links and docker0 bridge by default.</description></macro><macro><macro>{$NET.IF.IFOPERSTATUS.MATCHES}</macro><value>^.*$</value></macro><macro><macro>{$NET.IF.IFOPERSTATUS.NOT_MATCHES}</macro><value>^7$</value><description>Ignore notPresent(7).</description></macro><macro><macro>{$NODE_EXPORTER_PORT}</macro><value>9100</value><description>TCP Port node_exporter is listening on.</description></macro><macro><macro>{$SWAP.PFREE.MIN.WARN}</macro><value>50</value></macro><macro><macro>{$SYSTEM.FUZZYTIME.MAX}</macro><value>60</value></macro><macro><macro>{$VFS.DEV.DEVNAME.MATCHES}</macro><value>.+</value><description>This macro is used in block devices discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$VFS.DEV.DEVNAME.NOT_MATCHES}</macro><value>^(loop[0-9]*|sd[a-z][0-9]+|nbd[0-9]+|sr[0-9]+|fd[0-9]+|dm-[0-9]+|ram[0-9]+|ploop[a-z0-9]+|md[0-9]*|hcp[0-9]*|zram[0-9]*)</value><description>This macro is used in block devices discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$VFS.DEV.READ.AWAIT.WARN}</macro><value>20</value><description>Disk read average response time (in ms) before the trigger would fire.</description></macro><macro><macro>{$VFS.DEV.WRITE.AWAIT.WARN}</macro><value>20</value><description>Disk write average response time (in ms) before the trigger would fire.</description></macro><macro><macro>{$VFS.FS.FREE.MIN.CRIT}</macro><value>5G</value><description>The critical threshold of the filesystem utilization.</description></macro><macro><macro>{$VFS.FS.FREE.MIN.WARN}</macro><value>10G</value><description>The warning threshold of the filesystem utilization.</description></macro><macro><macro>{$VFS.FS.FSDEVICE.MATCHES}</macro><value>^.+$</value><description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$VFS.FS.FSDEVICE.NOT_MATCHES}</macro><value>^\s$</value><description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$VFS.FS.FSNAME.MATCHES}</macro><value>.+</value><description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$VFS.FS.FSNAME.NOT_MATCHES}</macro><value>^(/dev|/sys|/run|/proc|.+/shm$)</value><description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$VFS.FS.FSTYPE.MATCHES}</macro><value>^(btrfs|ext2|ext3|ext4|reiser|xfs|ffs|ufs|jfs|jfs2|vxfs|hfs|apfs|refs|ntfs|fat32|zfs)$</value><description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$VFS.FS.FSTYPE.NOT_MATCHES}</macro><value>^\s$</value><description>This macro is used in filesystems discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$VFS.FS.INODE.PFREE.MIN.CRIT}</macro><value>10</value></macro><macro><macro>{$VFS.FS.INODE.PFREE.MIN.WARN}</macro><value>20</value></macro><macro><macro>{$VFS.FS.PUSED.MAX.CRIT}</macro><value>90</value></macro><macro><macro>{$VFS.FS.PUSED.MAX.WARN}</macro><value>80</value></macro></macros><dashboards><dashboard><uuid>19dac6b780aa49558bf4a3782ba4b3b6</uuid><name>Network interfaces</name><pages><page><widgets><widget><type>GRAPH_PROTOTYPE</type><width>24</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>2</value></field><field><type>INTEGER</type><name>columns</name><value>1</value></field><field><type>INTEGER</type><name>rows</name><value>1</value></field><field><type>GRAPH_PROTOTYPE</type><name>graphid</name><value><host>Linux by Prom</host><name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name></value></field></fields></widget></widgets></page></pages></dashboard><dashboard><uuid>558606056f464970a7c544ba75d544f2</uuid><name>System performance</name><pages><page><widgets><widget><type>GRAPH_CLASSIC</type><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>Linux by Prom</host><name>System load</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><x>12</x><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>Linux by Prom</host><name>CPU usage</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><y>5</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>Linux by Prom</host><name>Memory usage</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><x>12</x><y>5</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>Linux by Prom</host><name>Swap usage</name></value></field></fields></widget><widget><type>GRAPH_PROTOTYPE</type><y>10</y><width>24</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>2</value></field><field><type>INTEGER</type><name>columns</name><value>1</value></field><field><type>INTEGER</type><name>rows</name><value>1</value></field><field><type>GRAPH_PROTOTYPE</type><name>graphid</name><value><host>Linux by Prom</host><name>{#FSNAME}: Disk space usage</name></value></field></fields></widget><widget><type>GRAPH_PROTOTYPE</type><y>15</y><width>24</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>2</value></field><field><type>INTEGER</type><name>columns</name><value>1</value></field><field><type>INTEGER</type><name>rows</name><value>1</value></field><field><type>GRAPH_PROTOTYPE</type><name>graphid</name><value><host>Linux by Prom</host><name>{#DEVNAME}: Disk read/write rates</name></value></field></fields></widget><widget><type>GRAPH_PROTOTYPE</type><y>20</y><width>24</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>2</value></field><field><type>INTEGER</type><name>columns</name><value>1</value></field><field><type>INTEGER</type><name>rows</name><value>1</value></field><field><type>GRAPH_PROTOTYPE</type><name>graphid</name><value><host>Linux by Prom</host><name>{#DEVNAME}: Disk average waiting time</name></value></field></fields></widget><widget><type>GRAPH_PROTOTYPE</type><y>25</y><width>24</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>2</value></field><field><type>INTEGER</type><name>columns</name><value>1</value></field><field><type>INTEGER</type><name>rows</name><value>1</value></field><field><type>GRAPH_PROTOTYPE</type><name>graphid</name><value><host>Linux by Prom</host><name>{#DEVNAME}: Disk utilization and queue</name></value></field></fields></widget><widget><type>GRAPH_PROTOTYPE</type><y>30</y><width>24</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>2</value></field><field><type>INTEGER</type><name>columns</name><value>1</value></field><field><type>INTEGER</type><name>rows</name><value>1</value></field><field><type>GRAPH_PROTOTYPE</type><name>graphid</name><value><host>Linux by Prom</host><name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name></value></field></fields></widget></widgets></page></pages></dashboard></dashboards><valuemaps><valuemap><uuid>4827063819f14d539f509552c84f5f94</uuid><name>ifOperStatus</name><mappings><mapping><value>0</value><newvalue>unknown</newvalue></mapping><mapping><value>1</value><newvalue>notpresent</newvalue></mapping><mapping><value>2</value><newvalue>down</newvalue></mapping><mapping><value>3</value><newvalue>lowerlayerdown</newvalue></mapping><mapping><value>4</value><newvalue>testing</newvalue></mapping><mapping><value>5</value><newvalue>dormant</newvalue></mapping><mapping><value>6</value><newvalue>up</newvalue></mapping></mappings></valuemap><valuemap><uuid>4d912f1ee95942038f306ddefb3a57b3</uuid><name>Linux::Interface protocol types</name><mappings><mapping><value>0</value><newvalue>from KA9Q: NET/ROM pseudo</newvalue></mapping><mapping><value>1</value><newvalue>Ethernet</newvalue></mapping><mapping><value>2</value><newvalue>Experimental Ethernet</newvalue></mapping><mapping><value>3</value><newvalue>AX.25 Level 2</newvalue></mapping><mapping><value>4</value><newvalue>PROnet token ring</newvalue></mapping><mapping><value>5</value><newvalue>Chaosnet</newvalue></mapping><mapping><value>6</value><newvalue>IEEE 802.2 Ethernet/TR/TB</newvalue></mapping><mapping><value>7</value><newvalue>ARCnet</newvalue></mapping><mapping><value>8</value><newvalue>APPLEtalk</newvalue></mapping><mapping><value>15</value><newvalue>Frame Relay DLCI</newvalue></mapping><mapping><value>19</value><newvalue>ATM</newvalue></mapping><mapping><value>23</value><newvalue>Metricom STRIP (new IANA id)</newvalue></mapping><mapping><value>24</value><newvalue>IEEE 1394 IPv4 - RFC 2734</newvalue></mapping><mapping><value>27</value><newvalue>EUI-64</newvalue></mapping><mapping><value>32</value><newvalue>InfiniBand</newvalue></mapping><mapping><value>256</value><newvalue>ARPHRD_SLIP</newvalue></mapping><mapping><value>257</value><newvalue>ARPHRD_CSLIP</newvalue></mapping><mapping><value>258</value><newvalue>ARPHRD_SLIP6</newvalue></mapping><mapping><value>259</value><newvalue>ARPHRD_CSLIP6</newvalue></mapping><mapping><value>260</value><newvalue>Notional KISS type</newvalue></mapping><mapping><value>264</value><newvalue>ARPHRD_ADAPT</newvalue></mapping><mapping><value>270</value><newvalue>ARPHRD_ROSE</newvalue></mapping><mapping><value>271</value><newvalue>CCITT X.25</newvalue></mapping><mapping><value>272</value><newvalue>Boards with X.25 in firmware</newvalue></mapping><mapping><value>280</value><newvalue>Controller Area Network</newvalue></mapping><mapping><value>512</value><newvalue>ARPHRD_PPP</newvalue></mapping><mapping><value>513</value><newvalue>Cisco HDLC</newvalue></mapping><mapping><value>516</value><newvalue>LAPB</newvalue></mapping><mapping><value>517</value><newvalue>Digital's DDCMP protocol</newvalue></mapping><mapping><value>518</value><newvalue>Raw HDLC</newvalue></mapping><mapping><value>519</value><newvalue>Raw IP</newvalue></mapping><mapping><value>768</value><newvalue>IPIP tunnel</newvalue></mapping><mapping><value>769</value><newvalue>IP6IP6 tunnel</newvalue></mapping><mapping><value>770</value><newvalue>Frame Relay Access Device</newvalue></mapping><mapping><value>771</value><newvalue>SKIP vif</newvalue></mapping><mapping><value>772</value><newvalue>Loopback device</newvalue></mapping><mapping><value>773</value><newvalue>Localtalk device</newvalue></mapping><mapping><value>774</value><newvalue>Fiber Distributed Data Interface</newvalue></mapping><mapping><value>775</value><newvalue>AP1000 BIF</newvalue></mapping><mapping><value>776</value><newvalue>sit0 device - IPv6-in-IPv4</newvalue></mapping><mapping><value>777</value><newvalue>IP over DDP tunneller</newvalue></mapping><mapping><value>778</value><newvalue>GRE over IP</newvalue></mapping><mapping><value>779</value><newvalue>PIMSM register interface</newvalue></mapping><mapping><value>780</value><newvalue>High Performance Parallel Interface</newvalue></mapping><mapping><value>781</value><newvalue>Nexus 64Mbps Ash</newvalue></mapping><mapping><value>782</value><newvalue>Acorn Econet</newvalue></mapping><mapping><value>783</value><newvalue>Linux-IrDA</newvalue></mapping><mapping><value>784</value><newvalue>Point to point fibrechannel</newvalue></mapping><mapping><value>785</value><newvalue>Fibrechannel arbitrated loop</newvalue></mapping><mapping><value>786</value><newvalue>Fibrechannel public loop</newvalue></mapping><mapping><value>787</value><newvalue>Fibrechannel fabric</newvalue></mapping><mapping><value>800</value><newvalue>Magic type ident for TR</newvalue></mapping><mapping><value>801</value><newvalue>IEEE 802.11</newvalue></mapping><mapping><value>802</value><newvalue>IEEE 802.11 + Prism2 header</newvalue></mapping><mapping><value>803</value><newvalue>IEEE 802.11 + radiotap header</newvalue></mapping><mapping><value>804</value><newvalue>ARPHRD_IEEE802154</newvalue></mapping><mapping><value>805</value><newvalue>IEEE 802.15.4 network monitor</newvalue></mapping><mapping><value>820</value><newvalue>PhoNet media type</newvalue></mapping><mapping><value>821</value><newvalue>PhoNet pipe header</newvalue></mapping><mapping><value>822</value><newvalue>CAIF media type</newvalue></mapping><mapping><value>823</value><newvalue>GRE over IPv6</newvalue></mapping><mapping><value>824</value><newvalue>Netlink header</newvalue></mapping><mapping><value>825</value><newvalue>IPv6 over LoWPAN</newvalue></mapping><mapping><value>826</value><newvalue>Vsock monitor header</newvalue></mapping></mappings></valuemap></valuemaps></template></templates><triggers><trigger><uuid>16e6a4d340164dee9379a3fc0aac0576</uuid><expression>max(/Linux by Prom/system.swap.pfree[node_exporter],5m)&lt;{$SWAP.PFREE.MIN.WARN} and last(/Linux by Prom/system.swap.total[node_exporter])&gt;0</expression><name>High swap space usage</name><event_name>High swap space usage (less than {$SWAP.PFREE.MIN.WARN}% free)</event_name><opdata>Free: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}</opdata><priority>WARNING</priority><description>This trigger is ignored, if there is no swap configured.</description><dependencies><dependency><name>High memory utilization</name><expression>min(/Linux by Prom/vm.memory.util[node_exporter],5m)&gt;{$MEMORY.UTIL.MAX}</expression></dependency><dependency><name>Lack of available memory</name><expression>max(/Linux by Prom/vm.memory.available[node_exporter],5m)&lt;{$MEMORY.AVAILABLE.MIN} and last(/Linux by Prom/vm.memory.total[node_exporter])&gt;0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>capacity</value></tag></tags></trigger><trigger><uuid>f78ed17586964a46a9de0c4f183984f6</uuid><expression>max(/Linux by Prom/vm.memory.available[node_exporter],5m)&lt;{$MEMORY.AVAILABLE.MIN} and last(/Linux by Prom/vm.memory.total[node_exporter])&gt;0</expression><name>Lack of available memory</name><event_name>Lack of available memory (&lt;{$MEMORY.AVAILABLE.MIN} of {ITEM.VALUE2})</event_name><opdata>Available: {ITEM.LASTVALUE1}, total: {ITEM.LASTVALUE2}</opdata><priority>AVERAGE</priority><tags><tag><tag>scope</tag><value>capacity</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger><trigger><uuid>e5897641e5594bf6b7b18ae4e107bd50</uuid><expression>min(/Linux by Prom/system.cpu.load.avg1[node_exporter],5m)/last(/Linux by Prom/system.cpu.num[node_exporter])&gt;{$LOAD_AVG_PER_CPU.MAX.WARN}
and last(/Linux by Prom/system.cpu.load.avg5[node_exporter])&gt;0
and last(/Linux by Prom/system.cpu.load.avg15[node_exporter])&gt;0</expression><name>Load average is too high</name><event_name>Load average is too high (per CPU load over {$LOAD_AVG_PER_CPU.MAX.WARN} for 5m)</event_name><opdata>Load averages(1m 5m 15m): ({ITEM.LASTVALUE1} {ITEM.LASTVALUE3} {ITEM.LASTVALUE4}), # of CPUs: {ITEM.LASTVALUE2}</opdata><priority>AVERAGE</priority><description>Per CPU load average is too high. Your system may be slow to respond.</description><tags><tag><tag>scope</tag><value>capacity</value></tag><tag><tag>scope</tag><value>performance</value></tag></tags></trigger><trigger><uuid>7effa63c9c994a6786279802aa7328ad</uuid><expression>last(/Linux by Prom/fd.open[node_exporter])/last(/Linux by Prom/kernel.maxfiles[node_exporter])*100&gt;80</expression><name>Running out of file descriptors</name><event_name>Running out of file descriptors (less than &lt; 20% free)</event_name><opdata>{ITEM.LASTVALUE1} of {ITEM.LASTVALUE2} file descriptors are in use.</opdata><priority>WARNING</priority><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers><graphs><graph><uuid>bb8bb267b32b46bfa2a6277b65730396</uuid><name>CPU jumps</name><graph_items><graph_item><color>1A7C11</color><item><host>Linux by Prom</host><key>system.cpu.switches[node_exporter]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>Linux by Prom</host><key>system.cpu.intr[node_exporter]</key></item></graph_item></graph_items></graph><graph><uuid>09ebf28dc8504ab2bfd07130d1f6ca91</uuid><name>CPU usage</name><type>STACKED</type><ymin_type_1>FIXED</ymin_type_1><ymax_type_1>FIXED</ymax_type_1><graph_items><graph_item><color>1A7C11</color><item><host>Linux by Prom</host><key>system.cpu.system[node_exporter]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>Linux by Prom</host><key>system.cpu.user[node_exporter]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>Linux by Prom</host><key>system.cpu.nice[node_exporter]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><item><host>Linux by Prom</host><key>system.cpu.iowait[node_exporter]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><item><host>Linux by Prom</host><key>system.cpu.steal[node_exporter]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><item><host>Linux by Prom</host><key>system.cpu.interrupt[node_exporter]</key></item></graph_item><graph_item><sortorder>6</sortorder><color>AC8C14</color><item><host>Linux by Prom</host><key>system.cpu.softirq[node_exporter]</key></item></graph_item><graph_item><sortorder>7</sortorder><color>611F27</color><item><host>Linux by Prom</host><key>system.cpu.guest[node_exporter]</key></item></graph_item><graph_item><sortorder>8</sortorder><color>F230E0</color><item><host>Linux by Prom</host><key>system.cpu.guest_nice[node_exporter]</key></item></graph_item></graph_items></graph><graph><uuid>9cd184535b6b4fd5978a302bdedeac0b</uuid><name>CPU utilization</name><ymin_type_1>FIXED</ymin_type_1><ymax_type_1>FIXED</ymax_type_1><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>Linux by Prom</host><key>system.cpu.util[node_exporter]</key></item></graph_item></graph_items></graph><graph><uuid>1383a8b57e6743de946c8a43016ee2f7</uuid><name>Memory usage</name><ymin_type_1>FIXED</ymin_type_1><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>Linux by Prom</host><key>vm.memory.total[node_exporter]</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>GRADIENT_LINE</drawtype><color>2774A4</color><item><host>Linux by Prom</host><key>vm.memory.available[node_exporter]</key></item></graph_item></graph_items></graph><graph><uuid>81e79ef1219a4c48af1f740017bbde6a</uuid><name>Memory utilization</name><ymin_type_1>FIXED</ymin_type_1><ymax_type_1>FIXED</ymax_type_1><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>Linux by Prom</host><key>vm.memory.util[node_exporter]</key></item></graph_item></graph_items></graph><graph><uuid>567684533d2442b286119c7d392e2bb7</uuid><name>Swap usage</name><graph_items><graph_item><color>1A7C11</color><item><host>Linux by Prom</host><key>system.swap.free[node_exporter]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>Linux by Prom</host><key>system.swap.total[node_exporter]</key></item></graph_item></graph_items></graph><graph><uuid>f9cbf136d01040ffa18753fb40d55f79</uuid><name>System load</name><ymin_type_1>FIXED</ymin_type_1><graph_items><graph_item><color>1A7C11</color><item><host>Linux by Prom</host><key>system.cpu.load.avg1[node_exporter]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>Linux by Prom</host><key>system.cpu.load.avg5[node_exporter]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>Linux by Prom</host><key>system.cpu.load.avg15[node_exporter]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><yaxisside>RIGHT</yaxisside><item><host>Linux by Prom</host><key>system.cpu.num[node_exporter]</key></item></graph_item></graph_items></graph></graphs></zabbix_export>
