<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:14:43Z</date><groups><group><uuid>a571c0d144b14fd4a87a9d9b2aa9fcd6</uuid><name>Templates/Applications</name></group></groups><templates><template><uuid>b9514029d03b44de9adf24251778dbf3</uuid><template>RabbitMQ node by HTTP</template><name>RabbitMQ node by HTTP</name><description>Get node metrics from RabbitMQ management plugin provided an HTTP-based API using HTTP agent.

You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387226-discussion-thread-for-official-zabbix-template-rabbitmq

Template tooling version used: 0.41</description><groups><group><name>Templates/Applications</name></group></groups><items><item><uuid>542f36f0b4e24d99a402a98b6f6fe4c4</uuid><name>RabbitMQ: Service response time</name><type>SIMPLE</type><key>net.tcp.service.perf[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{HOST.CONN}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;]</key><history>7d</history><value_type>FLOAT</value_type><units>s</units><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>220eedd4f69b43fabe233b5127e09c50</uuid><expression>min(/RabbitMQ node by HTTP/net.tcp.service.perf[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{HOST.CONN}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;],5m)&gt;{$RABBITMQ.RESPONSE_TIME.MAX.WARN}</expression><name>RabbitMQ: Service response time is too high</name><event_name>RabbitMQ: Service response time is too high (over {$RABBITMQ.RESPONSE_TIME.MAX.WARN}s for 5m)</event_name><priority>WARNING</priority><manual_close>YES</manual_close><dependencies><dependency><name>RabbitMQ: Service is down</name><expression>last(/RabbitMQ node by HTTP/net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{HOST.CONN}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;])=0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>f53379f858f74714b15ee12fe6fc2d08</uuid><name>RabbitMQ: Service ping</name><type>SIMPLE</type><key>net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{HOST.CONN}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;]</key><history>7d</history><valuemap><name>Service state</name></valuemap><preprocessing><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>10m</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>network</value></tag></tags><triggers><trigger><uuid>636356e5255d49d992df4b7a0c7d222d</uuid><expression>last(/RabbitMQ node by HTTP/net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{HOST.CONN}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;])=0</expression><name>RabbitMQ: Service is down</name><priority>AVERAGE</priority><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>14468c29d16440cfb40429f58a0399f4</uuid><name>RabbitMQ: Get nodes</name><type>HTTP_AGENT</type><key>rabbitmq.get_nodes</key><history>1h</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>The HTTP API endpoint that returns nodes metrics</description><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true</url><tags><tag><tag>component</tag><value>raw</value></tag></tags><triggers><trigger><uuid>d4452f05d08343c7a374da412c0f1de6</uuid><expression>nodata(/RabbitMQ node by HTTP/rabbitmq.get_nodes,30m)=1</expression><name>RabbitMQ: Failed to fetch nodes data</name><event_name>RabbitMQ: Failed to fetch nodes data (or no data for 30m)</event_name><priority>WARNING</priority><description>Zabbix has not received data for items for the last 30 minutes.</description><manual_close>YES</manual_close><dependencies><dependency><name>RabbitMQ: Service is down</name><expression>last(/RabbitMQ node by HTTP/net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{HOST.CONN}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;])=0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>ff7ec5f6e2354c90bffdbd25f9360555</uuid><name>RabbitMQ: Get node overview</name><type>HTTP_AGENT</type><key>rabbitmq.get_node_overview</key><history>1h</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>The HTTP API endpoint that returns cluster-wide metrics</description><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/overview</url><tags><tag><tag>component</tag><value>raw</value></tag></tags></item><item><uuid>3d0770d550b24f5ca80289cb723c8386</uuid><name>RabbitMQ: Get queues</name><type>HTTP_AGENT</type><key>rabbitmq.get_queues</key><history>1h</history><trends>0</trends><value_type>TEXT</value_type><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>The HTTP API endpoint that returns queues metrics</description><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/queues</url><tags><tag><tag>component</tag><value>raw</value></tag></tags></item><item><uuid>8cb8f380645f4d7f8250b110acd47d1c</uuid><name>RabbitMQ: Free disk space</name><type>DEPENDENT</type><key>rabbitmq.node.disk_free</key><delay>0</delay><history>7d</history><units>B</units><description>Current free disk space</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.disk_free</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>38099990b854421ca39f178b9c9be016</uuid><name>RabbitMQ: Disk free alarm</name><type>DEPENDENT</type><key>rabbitmq.node.disk_free_alarm</key><delay>0</delay><history>7d</history><description>Does the node have disk alarm</description><valuemap><name>Alarm state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.disk_free_alarm</parameter></parameters></step><step><type>BOOL_TO_DECIMAL</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag></tags><triggers><trigger><uuid>093eec2fd9264f158087509d8364dc09</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.node.disk_free_alarm)=1</expression><name>RabbitMQ: Free disk space alarm</name><event_name>RabbitMQ: Free disk space alarm (Free space threshold has been reached)</event_name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>https://www.rabbitmq.com/disk-alarms.html</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>ce9f4b99c77545fb8acd596d72725898</uuid><name>RabbitMQ: Disk free limit</name><type>DEPENDENT</type><key>rabbitmq.node.disk_free_limit</key><delay>0</delay><history>7d</history><units>B</units><description>Disk free space limit in bytes</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.disk_free_limit</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>fae24c176bd34b81b0f578883c5c2760</uuid><name>RabbitMQ: Used file descriptors</name><type>DEPENDENT</type><key>rabbitmq.node.fd_used</key><delay>0</delay><history>7d</history><description>Used file descriptors</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.fd_used</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>70ec112fc828476e96a469e0f94fc415</uuid><name>RabbitMQ: Memory alarm</name><type>DEPENDENT</type><key>rabbitmq.node.mem_alarm</key><delay>0</delay><history>7d</history><description>Does the host has memory alarm</description><valuemap><name>Alarm state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.mem_alarm</parameter></parameters></step><step><type>BOOL_TO_DECIMAL</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags><triggers><trigger><uuid>843be64cfdcd4df5b3fea4726da69c7e</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.node.mem_alarm)=1</expression><name>RabbitMQ: Memory alarm</name><event_name>RabbitMQ: Memory alarm (Memory usage threshold has been reached)</event_name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>https://www.rabbitmq.com/memory.html</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>2445b494bf0648248b333d6f0afd95a2</uuid><name>RabbitMQ: Memory limit</name><type>DEPENDENT</type><key>rabbitmq.node.mem_limit</key><delay>0</delay><history>7d</history><units>B</units><description>Memory usage high watermark in bytes</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.mem_limit</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>9e4f2c0cb6604364ab0a2b4def7466e2</uuid><name>RabbitMQ: Memory used</name><type>DEPENDENT</type><key>rabbitmq.node.mem_used</key><delay>0</delay><history>7d</history><units>B</units><description>Memory used in bytes</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.mem_used</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>129026dd49124ff2ba4f0bcc7f1fa9de</uuid><name>RabbitMQ: Management plugin version</name><type>DEPENDENT</type><key>rabbitmq.node.overview.management_version</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>Version of the management plugin in use</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.management_version</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_node_overview</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>d63d8001d5134e2590d3e7ca8b62958c</uuid><name>RabbitMQ: RabbitMQ version</name><type>DEPENDENT</type><key>rabbitmq.node.overview.rabbitmq_version</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>Version of RabbitMQ on the node which processed this request</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.rabbitmq_version</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_node_overview</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>19989038dfe84fcdb12262ee3782ab41</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version,#1)&lt;&gt;last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version,#2) and length(last(/RabbitMQ node by HTTP/rabbitmq.node.overview.rabbitmq_version))&gt;0</expression><name>RabbitMQ: Version has changed</name><event_name>RabbitMQ: Version has changed (new version: {ITEM.VALUE})</event_name><priority>INFO</priority><description>The RabbitMQ version has changed. Perform Ack to close.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>ac9282c012bd4249a096a462d21dcf62</uuid><name>RabbitMQ: Number of network partitions</name><type>DEPENDENT</type><key>rabbitmq.node.partitions</key><delay>0</delay><history>7d</history><description>Number of network partitions this node is seeing</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.partitions</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>return JSON.parse(value).length;</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags><triggers><trigger><uuid>943d239a9fa5443dac3205c65a4da033</uuid><expression>min(/RabbitMQ node by HTTP/rabbitmq.node.partitions,5m)&gt;0</expression><name>RabbitMQ: Number of network partitions is too high</name><event_name>RabbitMQ: Number of network partitions is too high (more than 0 for 5m)</event_name><opdata>Current value: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>https://www.rabbitmq.com/partitions.html#detecting</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>5f819282c32b49039a2dae56b9be23cd</uuid><name>RabbitMQ: Is running</name><type>DEPENDENT</type><key>rabbitmq.node.running</key><delay>0</delay><history>7d</history><description>Is the node running or not</description><valuemap><name>Service state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.running</parameter></parameters></step><step><type>BOOL_TO_DECIMAL</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>4b15e72e2133458ebac9c72c5fcb90e6</uuid><expression>max(/RabbitMQ node by HTTP/rabbitmq.node.running,5m)=0</expression><name>RabbitMQ: Node is not running</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>RabbitMQ node is not running</description><dependencies><dependency><name>RabbitMQ: Service is down</name><expression>last(/RabbitMQ node by HTTP/net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{HOST.CONN}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;])=0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>ddc906d9a969401ebf520490e62f4086</uuid><name>RabbitMQ: Runtime run queue</name><type>DEPENDENT</type><key>rabbitmq.node.run_queue</key><delay>0</delay><history>7d</history><description>Average number of Erlang processes waiting to run</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.run_queue</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>16f4f6a6d8f14980a6edcc2d84b0cd8d</uuid><name>RabbitMQ: Sockets available</name><type>DEPENDENT</type><key>rabbitmq.node.sockets_total</key><delay>0</delay><history>7d</history><description>File descriptors available for use as sockets</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.sockets_total</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>31455694c0994c9d9eaa8af048e88e95</uuid><name>RabbitMQ: Sockets used</name><type>DEPENDENT</type><key>rabbitmq.node.sockets_used</key><delay>0</delay><history>7d</history><description>Number of file descriptors used as sockets</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.sockets_used</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>65a2fd59ddfe413b9259c547338f3351</uuid><name>RabbitMQ: Uptime</name><type>DEPENDENT</type><key>rabbitmq.node.uptime</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>s</units><description>Uptime in milliseconds</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.uptime</parameter></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>0.001</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_nodes</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>6edfa365704f480da4b35b51b6ed84f4</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.node.uptime)&lt;10m</expression><name>RabbitMQ: Host has been restarted</name><event_name>RabbitMQ: {HOST.NAME} has been restarted (uptime &lt; 10m)</event_name><priority>INFO</priority><description>Uptime is less than 10 minutes.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item></items><discovery_rules><discovery_rule><uuid>fd10dbe5b1ba407dbb52632ecd713ccf</uuid><name>Health Check 3.8.9- discovery</name><type>DEPENDENT</type><key>rabbitmq.healthcheck.v389.discovery</key><delay>0</delay><description>Specific metrics up to and including version 3.8.4</description><item_prototypes><item_prototype><uuid>22f9a51fd0ea41148846ecde7dbf4d99</uuid><name>RabbitMQ: Healthcheck{#SINGLETON}</name><type>HTTP_AGENT</type><key>rabbitmq.healthcheck[{#SINGLETON}]</key><history>7h</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Runs basic healthchecks in the current node. Checks that the rabbit application is running, channels and queues can be listed successfully, and that no alarms are in effect.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.status</parameter></parameters></step><step><type>BOOL_TO_DECIMAL</type><parameters><parameter/></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/healthchecks/node</url><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>system</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>5c9c080ddd3748a6b5e62ba7765d270d</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.healthcheck[{#SINGLETON}])=0</expression><name>RabbitMQ: Node healthcheck failed</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>https://www.rabbitmq.com/monitoring.html#health-checks</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><master_item><key>rabbitmq.get_node_overview</key></master_item><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.management_version</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                     parseInt(value.split('.')[1]) * 100 +
                     parseInt(value.split('.')[2])
return JSON.stringify(rabbit_version &lt; 30810 ? [{'{#SINGLETON}': ''}] : []);</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>ab89d103c015400fbbeecaaf9bf01400</uuid><name>Health Check 3.8.10+ discovery</name><type>DEPENDENT</type><key>rabbitmq.healthcheck.v3810.discovery</key><delay>0</delay><description>Version 3.8.10+ specific metrics</description><item_prototypes><item_prototype><uuid>d18cd1fd8cd749e4a00b8186fd93345f</uuid><name>RabbitMQ: Healthcheck: expiration date on the certificates{#SINGLETON}</name><type>HTTP_AGENT</type><key>rabbitmq.healthcheck.certificate_expiration[{#SINGLETON}]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Checks the expiration date on the certificates for every listener configured to use TLS. Responds a 200 OK if all certificates are valid (have not expired), otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/certificate-expiration/1/months</url><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>certificate</value></tag><tag><tag>component</tag><value>health</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>20f7cd2d1d2448d5b84711caba2f093b</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.certificate_expiration[{#SINGLETON}])=0</expression><name>RabbitMQ: There are valid TLS certificates expiring in the next month</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>e1359646453e43cbaf0b4e1b89bdcdeb</uuid><name>RabbitMQ: Healthcheck: local alarms in effect on this node{#SINGLETON}</name><type>HTTP_AGENT</type><key>rabbitmq.healthcheck.local_alarms[{#SINGLETON}]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Responds a 200 OK if there are no local alarms in effect on the target node, otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/local-alarms</url><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>system</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>9761757a70bf4f65b9438471a5de2af0</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.local_alarms[{#SINGLETON}])=0</expression><name>RabbitMQ: There are active alarms in the node</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>9867c266760a48d981caa1f34f2c3238</uuid><name>RabbitMQ: Healthcheck: classic mirrored queues without synchronized mirrors online{#SINGLETON}</name><type>HTTP_AGENT</type><key>rabbitmq.healthcheck.mirror_sync[{#SINGLETON}]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Checks if there are classic mirrored queues without synchronized mirrors online (queues that would potentially lose data if the target node is shut down). Responds a 200 OK if there are no such classic mirrored queues, otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-mirror-sync-critical</url><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>queues</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>36b4702437614a3681a5a77acef323fc</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.mirror_sync[{#SINGLETON}])=0</expression><name>RabbitMQ: There are queues that could potentially lose data if this node goes offline.</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>972b6409c80d4ac796e5472b72ce82ae</uuid><name>RabbitMQ: Healthcheck: queues with minimum online quorum{#SINGLETON}</name><type>HTTP_AGENT</type><key>rabbitmq.healthcheck.quorum[{#SINGLETON}]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Checks if there are quorum queues with minimum online quorum (queues that would lose their quorum and availability if the target node is shut down). Responds a 200 OK if there are no such quorum queues, otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-quorum-critical</url><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>queues</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>cfaba160cc0441c09010de05316596bd</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.quorum[{#SINGLETON}])=0</expression><name>RabbitMQ: There are queues that would lose their quorum and availability if this node is shut down.</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>d701b9acae86464282b308df720a1de2</uuid><name>RabbitMQ: Healthcheck: virtual hosts on this node{#SINGLETON}</name><type>HTTP_AGENT</type><key>rabbitmq.healthcheck.virtual_hosts[{#SINGLETON}]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Responds a 200 OK if all virtual hosts and running on the target node, otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><url>{$RABBITMQ.API.SCHEME}://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/health/checks/virtual-hosts</url><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>system</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>d1638953e2794c3e8113ba907837c968</uuid><expression>last(/RabbitMQ node by HTTP/rabbitmq.healthcheck.virtual_hosts[{#SINGLETON}])=0</expression><name>RabbitMQ: There are not running virtual hosts</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><master_item><key>rabbitmq.get_node_overview</key></master_item><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.management_version</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                     parseInt(value.split('.')[1]) * 100 +
                     parseInt(value.split('.')[2])
return JSON.stringify(rabbit_version &gt;= 30810 ? [{'{#SINGLETON}': ''}] : []);</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>cc1d85b6045b44b38f588cd9a4c6c62d</uuid><name>Queues discovery</name><type>DEPENDENT</type><key>rabbitmq.queues.discovery</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#QUEUE}</macro><value>{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}</value><formulaid>B</formulaid></condition><condition><macro>{#QUEUE}</macro><value>{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>C</formulaid></condition><condition><macro>{#NODE}</macro><value>{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}</value><formulaid>A</formulaid></condition></conditions></filter><description>Individual queue metrics</description><item_prototypes><item_prototype><uuid>335ed3ef31e2471b9cdb25537cee4fe8</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Get data</name><type>DEPENDENT</type><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>The HTTP API endpoint that returns [{#VHOST}][{#QUEUE}] queue metrics</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].first()</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_queues</key></master_item><tags><tag><tag>component</tag><value>raw</value></tag></tags></item_prototype><item_prototype><uuid>be1c1c6b727a45cca039f0f00f184943</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Consumers</name><type>DEPENDENT</type><key>rabbitmq.queue.consumers[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of consumers</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.consumers</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>consumers</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>5d420017c0f14f37aa7c7ef986b54a77</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Memory</name><type>DEPENDENT</type><key>rabbitmq.queue.memory[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><units>B</units><description>Bytes of memory consumed by the Erlang process associated with the queue, including stack, heap and internal structures</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.memory</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>3902227627d84cad8794604bd4f091fd</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages acknowledged per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.ack.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number per second of messages delivered to clients and acknowledged</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.ack_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>2f2ca541c80b47cba2b5147a1c77aac5</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages acknowledged</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.ack[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of messages delivered to clients and acknowledged</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.ack</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>b8a9c0ca7fda4756a8b79ac83c4bcd07</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages delivered per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.deliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Count of messages delivered in acknowledgement mode to consumers</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.deliver_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>e150c5d35ed144ca87945ef4f7a0998a</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages delivered</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.deliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Count of messages delivered in acknowledgement mode to consumers</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.deliver</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>9b74bc2a830e43e28ad6c44037dbd1d7</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Sum of messages delivered per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.deliver_get.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rate per second of the sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.deliver_get_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>837c46d0fd7d4ad18669dcbf62ae7025</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Sum of messages delivered</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.deliver_get[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.deliver_get</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>232ee8103a5d4fb6b2b41ca641f19088</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages published per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.publish.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rate per second of messages published</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.publish_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>dfafc461ad8a45ba8f08a12ec9f4e2d3</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages published</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.publish[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Count of messages published</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.publish</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>888dbb2c1b13429b9d20034fcc783f14</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Count per second of the total messages in the queue</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_details.rate</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>a34e852ddce64d80a88129eef9ba1ab2</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages redelivered per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.redeliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rate per second of subset of messages in deliver_get which had the redelivered flag set</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.redeliver_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>75501a52ffab4972a5988ac4ae0c82d8</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages redelivered</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.redeliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Count of subset of messages in deliver_get which had the redelivered flag set</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.redeliver</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>171e5dbff18f47c98da2c1a3b7120622</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages</name><type>DEPENDENT</type><key>rabbitmq.queue.messages[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Count of the total messages in the queue</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>b6f52153a22144338e6d002287446ac1</uuid><expression>min(/RabbitMQ node by HTTP/rabbitmq.queue.messages[&quot;{#VHOST}/{#QUEUE}&quot;],5m)&gt;{$RABBITMQ.MESSAGES.MAX.WARN:&quot;{#QUEUE}&quot;}</expression><name>RabbitMQ: Too many messages in queue [{#VHOST}][{#QUEUE}]</name><event_name>RabbitMQ: Too many messages in queue [{#VHOST}][{#QUEUE}] (over {$RABBITMQ.MESSAGES.MAX.WARN:&quot;{#QUEUE}&quot;} for 5m)</event_name><opdata>Current value: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>f55c5f66ddac46fd95c5379875342284</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages ready per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages_ready.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number per second of messages ready to be delivered to clients</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_ready_details.rate</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>67c9a8eee9a54eed946ab141927494c4</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages ready</name><type>DEPENDENT</type><key>rabbitmq.queue.messages_ready[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of messages ready to be delivered to clients</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_ready</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>a8cc3296990640a6bf5d7319ba2e8650</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages unacknowledged per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages_unacknowledged.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number per second of messages delivered to clients but not yet acknowledged</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_unacknowledged_details.rate</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>bb6a84983caa486482e241c6bf7e9534</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages unacknowledged</name><type>DEPENDENT</type><key>rabbitmq.queue.messages_unacknowledged[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of messages delivered to clients but not yet acknowledged</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_unacknowledged</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype></item_prototypes><graph_prototypes><graph_prototype><uuid>4e6b194fd13f4b97a66ee4d335958003</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages per second</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.ack.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.deliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.deliver_get.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.publish.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages_ready.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>6</sortorder><color>AC8C14</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.redeliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>7</sortorder><color>611F27</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages_unacknowledged.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><uuid>adba8787c1d14670a5ca3bf07d9dc663</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages status</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.ack[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.deliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.deliver_get[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.publish[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages_ready[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>6</sortorder><color>AC8C14</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages.redeliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>7</sortorder><color>611F27</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.queue.messages_unacknowledged[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><master_item><key>rabbitmq.get_queues</key></master_item><lld_macro_paths><lld_macro_path><lld_macro>{#NODE}</lld_macro><path>$.node</path></lld_macro_path><lld_macro_path><lld_macro>{#QUEUE}</lld_macro><path>$.name</path></lld_macro_path><lld_macro_path><lld_macro>{#VHOST}</lld_macro><path>$.vhost</path></lld_macro_path></lld_macro_paths></discovery_rule></discovery_rules><tags><tag><tag>class</tag><value>software</value></tag><tag><tag>target</tag><value>rabbitmq</value></tag></tags><macros><macro><macro>{$RABBITMQ.API.PASSWORD}</macro><value>zabbix</value></macro><macro><macro>{$RABBITMQ.API.PORT}</macro><value>15672</value><description>The port of RabbitMQ API endpoint</description></macro><macro><macro>{$RABBITMQ.API.SCHEME}</macro><value>http</value><description>Request scheme which may be http or https</description></macro><macro><macro>{$RABBITMQ.API.USER}</macro><value>zbx_monitor</value></macro><macro><macro>{$RABBITMQ.CLUSTER.NAME}</macro><value>rabbit</value><description>The name of RabbitMQ cluster</description></macro><macro><macro>{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}</macro><value>.*</value><description>Filter of discoverable queues</description></macro><macro><macro>{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}</macro><value>CHANGE_IF_NEEDED</value><description>Filter to exclude discovered queues</description></macro><macro><macro>{$RABBITMQ.MESSAGES.MAX.WARN}</macro><value>1000</value><description>Maximum number of messages in the queue for trigger expression</description></macro><macro><macro>{$RABBITMQ.RESPONSE_TIME.MAX.WARN}</macro><value>10</value><description>Maximum RabbitMQ response time in seconds for trigger expression</description></macro></macros><dashboards><dashboard><uuid>5e70f5ff6706442abc83ec1b206d9fe4</uuid><name>RabbitMQ node status</name><pages><page><widgets><widget><type>GRAPH_CLASSIC</type><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by HTTP</host><name>RabbitMQ: Node status</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><x>12</x><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by HTTP</host><name>RabbitMQ: Uptime</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><y>5</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by HTTP</host><name>RabbitMQ: Disk free</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><x>12</x><y>5</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by HTTP</host><name>RabbitMQ: Memory used</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><y>10</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by HTTP</host><name>RabbitMQ: File descriptors</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><x>12</x><y>10</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by HTTP</host><name>RabbitMQ: Sockets</name></value></field></fields></widget></widgets></page></pages></dashboard></dashboards><valuemaps><valuemap><uuid>e65c3d3e8ea443a281b37c51ca461c26</uuid><name>Alarm state</name><mappings><mapping><value>0</value><newvalue>Ok</newvalue></mapping><mapping><value>1</value><newvalue>Alarm</newvalue></mapping></mappings></valuemap><valuemap><uuid>55188bbb2ede4300a6292b373ee36ab7</uuid><name>RabbitMQ healthcheck</name><mappings><mapping><value>0</value><newvalue>Failed</newvalue></mapping><mapping><value>1</value><newvalue>Ok</newvalue></mapping><mapping><value>2</value><newvalue>Error</newvalue></mapping></mappings></valuemap><valuemap><uuid>aaf7d0b8b306412b8a3272343708518f</uuid><name>Service state</name><mappings><mapping><value>0</value><newvalue>Down</newvalue></mapping><mapping><value>1</value><newvalue>Up</newvalue></mapping></mappings></valuemap></valuemaps></template></templates><graphs><graph><uuid>02f7ec07b4384795bbf5212e9ea06fb0</uuid><name>RabbitMQ: Disk free</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.disk_free</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>FF0000</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.disk_free_limit</key></item></graph_item></graph_items></graph><graph><uuid>71eff9e96a8b46acbe1cf00d1e0cc388</uuid><name>RabbitMQ: File descriptors</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.fd_used</key></item></graph_item></graph_items></graph><graph><uuid>d4e9c478e03c4ecab7538c3baa77f61f</uuid><name>RabbitMQ: Memory used</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.mem_used</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>FF0000</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.mem_limit</key></item></graph_item></graph_items></graph><graph><uuid>e6497c3e2847407ca8f912e34d9357b4</uuid><name>RabbitMQ: Node status</name><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.running</key></item></graph_item></graph_items></graph><graph><uuid>f3c071a0c20340f1bf86ecd66b911bb2</uuid><name>RabbitMQ: Sockets</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.sockets_used</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.sockets_total</key></item></graph_item></graph_items></graph><graph><uuid>415ce1917ecc4575bcbeeaf3b01df4cb</uuid><name>RabbitMQ: Uptime</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by HTTP</host><key>rabbitmq.node.uptime</key></item></graph_item></graph_items></graph></graphs></zabbix_export>
