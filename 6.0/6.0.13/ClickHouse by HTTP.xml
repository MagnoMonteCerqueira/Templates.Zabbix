<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:14:45Z</date><groups><group><uuid>748ad4d098d447d492bb935c907f652f</uuid><name>Templates/Databases</name></group></groups><templates><template><uuid>95f2053c21094ad4968440b562cc7ea2</uuid><template>ClickHouse by HTTP</template><name>ClickHouse by HTTP</name><description>Get node metrics from ClickHouse HTTP interface using HTTP agent.

Template tooling version used: 0.41</description><groups><group><name>Templates/Databases</name></group></groups><items><item><uuid>595446e408b844519e8db1ea91543134</uuid><name>ClickHouse: Current distribute connections</name><type>DEPENDENT</type><key>clickhouse.connections.distribute</key><delay>0</delay><history>7d</history><description>Number of connections to remote servers sending data that was INSERTed into Distributed tables.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;DistributedSend&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>connections</value></tag></tags></item><item><uuid>d2d72a607672442b957228f0bea8dcca</uuid><name>ClickHouse: Current HTTP connections</name><type>DEPENDENT</type><key>clickhouse.connections.http</key><delay>0</delay><history>7d</history><description>Number of connections to HTTP server.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;HTTPConnection&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>connections</value></tag></tags></item><item><uuid>0829591332244c75a219f3b811ebf9ce</uuid><name>ClickHouse: Current Interserver connections</name><type>DEPENDENT</type><key>clickhouse.connections.interserver</key><delay>0</delay><history>7d</history><description>Number of connections from other replicas to fetch parts.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;InterserverConnection&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>connections</value></tag></tags></item><item><uuid>88d4855d22604d79927d40c0d3b106c5</uuid><name>ClickHouse: Current MySQL connections</name><type>DEPENDENT</type><key>clickhouse.connections.mysql</key><delay>0</delay><history>7d</history><description>Number of connections to MySQL server.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;MySQLConnection&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>connections</value></tag></tags></item><item><uuid>11786fff830d4d79b914a22c5f85da7f</uuid><name>ClickHouse: Current TCP connections</name><type>DEPENDENT</type><key>clickhouse.connections.tcp</key><delay>0</delay><history>7d</history><description>Number of connections to TCP server (clients with native interface).</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;TCPConnection&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>connections</value></tag></tags></item><item><uuid>46d8ed7374274d71a06119f50463f26c</uuid><name>ClickHouse: Get dictionaries info</name><type>HTTP_AGENT</type><key>clickhouse.dictionaries</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.data</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>SELECT * FROM system.dictionaries format JSON</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>dictionaries</value></tag><tag><tag>component</tag><value>raw</value></tag></tags></item><item><uuid>b7bbca72bbd14b20930e60c3c1cdcb8e</uuid><name>ClickHouse: Current distributed files to insert</name><type>DEPENDENT</type><key>clickhouse.distributed.files</key><delay>0</delay><history>7d</history><description>Number of pending files to process for asynchronous insertion into Distributed tables. Number of files for every shard is summed.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;DistributedFilesToInsert&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>4ecadb993aa74126a807df3af4b892ed</uuid><expression>min(/ClickHouse by HTTP/clickhouse.distributed.files,5m)&gt;{$CLICKHOUSE.DELAYED.FILES.DISTRIBUTED.COUNT.MAX.WARN}</expression><name>ClickHouse: Too many distributed files to insert</name><event_name>ClickHouse: Too many distributed files to insert (over {$CLICKHOUSE.DELAYED.FILES.DISTRIBUTED.COUNT.MAX.WARN} for 5 min)</event_name><priority>WARNING</priority><description>&quot;Clickhouse servers and &lt;remote_servers&gt; in config.xml
https://clickhouse.tech/docs/en/operations/table_engines/distributed/&quot;</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>capacity</value></tag></tags></trigger></triggers></item><item><uuid>e056f8519dec4c8dace036bf993a6d47</uuid><name>ClickHouse: Distributed connection fail with retry per second</name><type>DEPENDENT</type><key>clickhouse.distributed.files.fail.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>&quot;Connection failures after all retries in replicated DB connection pool&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;DistributedConnectionFailAtAll&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>connections</value></tag></tags></item><item><uuid>3859c5ee6f25419f9da7e7899c9a71af</uuid><name>ClickHouse: Distributed connection fail with retry per second</name><type>DEPENDENT</type><key>clickhouse.distributed.files.retry.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Connection retries in replicated DB connection pool</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;DistributedConnectionFailTry&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>connections</value></tag></tags></item><item><uuid>81130b88e0b04b9ea677a80b6fd6ce22</uuid><name>ClickHouse: Delayed insert queries</name><type>DEPENDENT</type><key>clickhouse.insert.delay</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>&quot;Number of INSERT queries that are throttled due to high number of active data parts for partition in a MergeTree table.&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;DelayedInserts&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>queries</value></tag></tags><triggers><trigger><uuid>164dc9841cdd4b77a650792cf1bac701</uuid><expression>min(/ClickHouse by HTTP/clickhouse.insert.delay,5m)&gt;{$CLICKHOUSE.DELAYED.INSERTS.MAX.WARN}</expression><name>ClickHouse: Too many throttled insert queries</name><event_name>ClickHouse: Too many throttled insert queries (over {$CLICKHOUSE.DELAYED.INSERTS.MAX.WARN) for 5 min)</event_name><priority>WARNING</priority><description>Clickhouse have INSERT queries that are throttled due to high number of active data parts for partition in a MergeTree, please decrease INSERT frequency</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>e2477dd38510489c8ea7509e9a37cb50</uuid><name>ClickHouse: Inserted bytes per second</name><type>DEPENDENT</type><key>clickhouse.inserted_bytes.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>Bps</units><description>The number of uncompressed bytes inserted in all tables.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;InsertedBytes&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags></item><item><uuid>e09cfd7db8be48a485bda8c5f033d210</uuid><name>ClickHouse: Inserted rows per second</name><type>DEPENDENT</type><key>clickhouse.inserted_rows.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>The number of rows inserted in all tables.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;InsertedRows&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>410f7ee66ee84e3eb27940312ddf23d2</uuid><name>ClickHouse: New INSERT queries per second</name><type>DEPENDENT</type><key>clickhouse.insert_query.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number of INSERT queries to be interpreted and potentially executed. Does not include queries that failed to parse or were rejected due to AST size limits, quota limits or limits on the number of simultaneously running queries. May include internal queries initiated by ClickHouse itself. Does not count subqueries.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;InsertQuery&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>queries</value></tag></tags></item><item><uuid>04c970694a6f40c89e4d3b53f27b7530</uuid><name>ClickHouse: Allocated bytes</name><type>DEPENDENT</type><key>clickhouse.jemalloc.allocated</key><delay>0</delay><history>7d</history><units>B</units><description>&quot;Total number of bytes allocated by the application.&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;jemalloc.allocated&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.asynchronous_metrics</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>7aa71031aec74fbb9a2ec126076705a2</uuid><name>ClickHouse: Mapped memory</name><type>DEPENDENT</type><key>clickhouse.jemalloc.mapped</key><delay>0</delay><history>7d</history><units>B</units><description>&quot;Total number of bytes in active extents mapped by the allocator.&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;jemalloc.mapped&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.asynchronous_metrics</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>32cc450854e94c6a9adbdde3c76b94d7</uuid><name>ClickHouse: Resident memory</name><type>DEPENDENT</type><key>clickhouse.jemalloc.resident</key><delay>0</delay><history>7d</history><units>B</units><description>Maximum number of bytes in physically resident data pages mapped by the allocator,
comprising all pages dedicated to allocator metadata, pages backing active allocations,
and unused dirty pages.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;jemalloc.resident&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.asynchronous_metrics</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>c99265c296f14189aaf65bf68b7d5037</uuid><name>ClickHouse: Max count of parts per partition across all tables</name><type>DEPENDENT</type><key>clickhouse.max.part.count.for.partition</key><delay>0</delay><history>7d</history><description>Clickhouse MergeTree table engine split each INSERT query to partitions (PARTITION BY expression) and add one or more PARTS per INSERT inside each partition,
after that background merge process run.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;MaxPartCountForPartition&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.asynchronous_metrics</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>21e6d3c6047145c59cbd00032699ee99</uuid><expression>min(/ClickHouse by HTTP/clickhouse.max.part.count.for.partition,5m)&gt;{$CLICKHOUSE.PARTS.PER.PARTITION.WARN} * 0.9</expression><name>ClickHouse: Too many MergeTree parts</name><event_name>ClickHouse: Too many MergeTree parts (over 90% of {$CLICKHOUSE.PARTS.PER.PARTITION.WARN})</event_name><priority>WARNING</priority><description>Descease INSERT queries frequency.
Clickhouse MergeTree table engine split each INSERT query to partitions (PARTITION BY expression)
and add one or more PARTS per INSERT inside each partition,
after that background merge process run, and when you have too much unmerged parts inside partition,
SELECT queries performance can significate degrade, so clickhouse try delay insert, or abort it.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>a4344162643142c9be3b09439b466a5d</uuid><name>ClickHouse: Memory used for queries</name><type>DEPENDENT</type><key>clickhouse.memory.tracking</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>&quot;Total amount of memory (bytes) allocated in currently executing queries.&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;MemoryTracking&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>921670c46d9a4e5b85f2049d64298ab4</uuid><name>ClickHouse: Memory used for background merges</name><type>DEPENDENT</type><key>clickhouse.memory.tracking.background</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>&quot;Total amount of memory (bytes) allocated in background processing pool (that is dedicated for background merges, mutations and fetches).
 Note that this value may include a drift when the memory was allocated in a context of background processing pool and freed in other context or vice-versa. This happens naturally due to caches for tables indexes and doesn't indicate memory leaks.&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;MemoryTrackingInBackgroundProcessingPool&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>f881ea3cb2a2434d9cfac0d0896279f5</uuid><name>ClickHouse: Memory used for background moves</name><type>DEPENDENT</type><key>clickhouse.memory.tracking.background.moves</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>&quot;Total amount of memory (bytes) allocated in background processing pool (that is dedicated for background moves). Note that this value may include a drift when the memory was allocated in a context of background processing pool and freed in other context or vice-versa.
 This happens naturally due to caches for tables indexes and doesn't indicate memory leaks.&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;MemoryTrackingInBackgroundMoveProcessingPool&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>3cd23448136c4ea8892483b1fbacec82</uuid><name>ClickHouse: Memory used for merges</name><type>DEPENDENT</type><key>clickhouse.memory.tracking.merges</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>Total amount of memory (bytes) allocated for background merges. Included in MemoryTrackingInBackgroundProcessingPool. Note that this value may include a drift when the memory was allocated in a context of background processing pool and freed in other context or vice-versa.
This happens naturally due to caches for tables indexes and doesn't indicate memory leaks.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;MemoryTrackingForMerges&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>1f4641ef040546e0afcccc818f4d3471</uuid><name>ClickHouse: Memory used for background schedule pool</name><type>DEPENDENT</type><key>clickhouse.memory.tracking.schedule.pool</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>B</units><description>&quot;Total amount of memory (bytes) allocated in background schedule pool (that is dedicated for bookkeeping tasks of Replicated tables).&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;MemoryTrackingInBackgroundSchedulePool&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>5e98b9c4f1ee42238f363d76354ef537</uuid><name>ClickHouse: Current running merges</name><type>DEPENDENT</type><key>clickhouse.merge.current</key><delay>0</delay><history>7d</history><description>Number of executing background merges</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;Merge&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>queries</value></tag></tags></item><item><uuid>50e33e8fc1904870bdc6d7f13d16943d</uuid><name>ClickHouse: Uncompressed bytes merged per second</name><type>DEPENDENT</type><key>clickhouse.merge_bytes.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>Bps</units><description>Uncompressed bytes that were read for background merges</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;MergedUncompressedBytes&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>a2afbf66601344bdb5ab72a7374bbe8b</uuid><name>ClickHouse: Merged rows per second</name><type>DEPENDENT</type><key>clickhouse.merge_rows.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rows read for background merges.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;MergedRows&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>83061f56dce24364906cae761419b148</uuid><name>ClickHouse: Network errors per second</name><type>DEPENDENT</type><key>clickhouse.network.error.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Network errors (timeouts and connection failures) during query execution, background pool tasks and DNS cache update.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;NetworkErrors&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags><triggers><trigger><uuid>d49b9e8978bd416f81ea01b935879d81</uuid><expression>min(/ClickHouse by HTTP/clickhouse.network.error.rate,5m)&gt;{$CLICKHOUSE.NETWORK.ERRORS.MAX.WARN}</expression><name>ClickHouse: Too many network errors</name><event_name>ClickHouse: Too many network errors (over {$CLICKHOUSE.NETWORK.ERRORS.MAX.WARN} in 5m)</event_name><priority>WARNING</priority><description>Number of errors (timeouts and connection failures) during query execution, background pool tasks and DNS cache update is too high.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>cb40b0cf1296436d9a4e41062d1b3fa9</uuid><name>ClickHouse: Ping</name><type>HTTP_AGENT</type><key>clickhouse.ping</key><history>7d</history><valuemap><name>Service state</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>Ok\.</parameter><parameter>1</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>10m</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/ping</url><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>network</value></tag></tags></item><item><uuid>4fb14efc757542c1b50605bdfb2e23cb</uuid><name>ClickHouse: Longest currently running query time</name><type>HTTP_AGENT</type><key>clickhouse.process.elapsed</key><history>7d</history><value_type>FLOAT</value_type><units>s</units><description>Get longest running query.</description><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>SELECT max(elapsed) FROM system.processes</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>queries</value></tag></tags><triggers><trigger><uuid>2410e7b63c8340b6b08ec729d7093be6</uuid><expression>last(/ClickHouse by HTTP/clickhouse.process.elapsed)&gt;{$CLICKHOUSE.QUERY_TIME.MAX.WARN}</expression><name>ClickHouse: There are queries running is long</name><event_name>ClickHouse: There are queries running more than {$CLICKHOUSE.QUERY_TIME.MAX.WARN} seconds</event_name><priority>AVERAGE</priority><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>071ae233708b417b97cfeced5021c139</uuid><name>ClickHouse: Current running queries</name><type>DEPENDENT</type><key>clickhouse.query.current</key><delay>0</delay><history>7d</history><description>Number of executing queries</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;Query&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>queries</value></tag></tags></item><item><uuid>0fb342f6a494443c8389f79439e94791</uuid><name>ClickHouse: New queries per second</name><type>DEPENDENT</type><key>clickhouse.query.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number of queries to be interpreted and potentially executed. Does not include queries that failed to parse or were rejected due to AST size limits, quota limits or limits on the number of simultaneously running queries. May include internal queries initiated by ClickHouse itself. Does not count subqueries.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.data.event == &quot;Query&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>queries</value></tag></tags></item><item><uuid>fb671accbbaa4bd58a107dc3661419af</uuid><name>ClickHouse: Read syscalls in fly</name><type>DEPENDENT</type><key>clickhouse.read</key><delay>0</delay><history>7d</history><description>Number of read (read, pread, io_getevents, etc.) syscalls in fly</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;Read&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>eb4c47501d9c4cdf9e55347ccc9a38bd</uuid><name>ClickHouse: Read bytes per second</name><type>DEPENDENT</type><key>clickhouse.read_bytes.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>Bps</units><description>&quot;Number of bytes (the number of bytes before decompression) read from compressed sources (files, network).&quot;</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;ReadCompressedBytes&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags></item><item><uuid>3793962be3494772832796c932947e1d</uuid><name>ClickHouse: Get replicas info</name><type>HTTP_AGENT</type><key>clickhouse.replicas</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.data</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>SELECT database, table, is_readonly, is_session_expired, future_parts, parts_to_check, queue_size, inserts_in_queue, merges_in_queue, log_max_index, log_pointer, total_replicas, active_replicas, log_max_index - log_pointer as replica_lag FROM system.replicas format JSON</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>raw</value></tag><tag><tag>component</tag><value>replicas</value></tag></tags></item><item><uuid>78ed9728eb634df1807c64637c862f9a</uuid><name>ClickHouse: Replication lag across all tables</name><type>DEPENDENT</type><key>clickhouse.replicas.max.absolute.delay</key><delay>0</delay><history>7d</history><units>s</units><description>Maximum replica queue delay relative to current time</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;ReplicasMaxAbsoluteDelay&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.asynchronous_metrics</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag></tags><triggers><trigger><uuid>fc47a407b15744e79b70088ec249951a</uuid><expression>min(/ClickHouse by HTTP/clickhouse.replicas.max.absolute.delay,5m)&gt;{$CLICKHOUSE.REPLICA.MAX.WARN}</expression><name>ClickHouse: Replication lag is too high</name><event_name>ClickHouse: Replication lag is too high (over {$CLICKHOUSE.REPLICA.MAX.WARN} sec for 5min)</event_name><priority>WARNING</priority><description>When replica have too much lag, it can be skipped from Distributed SELECT Queries without errors
and you will have wrong query results.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>dd61675348374d2ea06cdde144fe4e26</uuid><name>ClickHouse: Total number read-only Replicas</name><type>DEPENDENT</type><key>clickhouse.replicas.readonly.total</key><delay>0</delay><history>7d</history><description>Number of Replicated tables that are currently in readonly state
due to re-initialization after ZooKeeper session loss
or due to startup without ZooKeeper configured.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;ReadonlyReplica&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag></tags></item><item><uuid>5d2a35daf81a49888e3dfab916fab8be</uuid><name>ClickHouse: Total replication tasks in queue</name><type>DEPENDENT</type><key>clickhouse.replicas.sum.queue.size</key><delay>0</delay><history>7d</history><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;ReplicasSumQueueSize&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.asynchronous_metrics</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag></tags></item><item><uuid>572036e5b2c74197bd61afc753f6e759</uuid><name>ClickHouse: Revision</name><type>DEPENDENT</type><key>clickhouse.revision</key><delay>0</delay><history>7d</history><description>Revision of the server.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;Revision&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>application</value></tag></tags></item><item><uuid>f89f3e27ca4f4e109ae6fe6b74dcc2ca</uuid><name>ClickHouse: New SELECT queries per second</name><type>DEPENDENT</type><key>clickhouse.select_query.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number of SELECT queries to be interpreted and potentially executed. Does not include queries that failed to parse or were rejected due to AST size limits, quota limits or limits on the number of simultaneously running queries. May include internal queries initiated by ClickHouse itself. Does not count subqueries.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;SelectQuery&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>queries</value></tag></tags></item><item><uuid>6c84e0abd186467882d2d3842749f937</uuid><name>ClickHouse: Get system.asynchronous_metrics</name><type>HTTP_AGENT</type><key>clickhouse.system.asynchronous_metrics</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Get metrics that are calculated periodically in the background</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.data</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>select metric, value from system.asynchronous_metrics format JSON</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>asynchronous-metrics</value></tag><tag><tag>component</tag><value>raw</value></tag></tags></item><item><uuid>8aa612d27547446e9457aeaf6e94e320</uuid><name>ClickHouse: Get system.events</name><type>HTTP_AGENT</type><key>clickhouse.system.events</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Get information about the number of events that have occurred in the system.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.data</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>select event, value from system.events format JSON</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>raw</value></tag><tag><tag>component</tag><value>system-events</value></tag></tags></item><item><uuid>2193464b67724392905deef21f2f7c20</uuid><name>ClickHouse: Get system.metrics</name><type>HTTP_AGENT</type><key>clickhouse.system.metrics</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Get metrics which can be calculated instantly, or have a current value format JSONEachRow</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.data</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>select metric, value from system.metrics format JSON</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>raw</value></tag><tag><tag>component</tag><value>system-metrics</value></tag></tags></item><item><uuid>88c843c6d4fd43c794d1447109146312</uuid><name>ClickHouse: Get system.settings</name><type>HTTP_AGENT</type><key>clickhouse.system.settings</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Get information about settings that are currently in use.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.data</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1h</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>select name, value from system.settings format JSON</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>raw</value></tag><tag><tag>component</tag><value>system-settings</value></tag></tags><triggers><trigger><uuid>dfd9500636824ebf9d51d93650d62613</uuid><expression>last(/ClickHouse by HTTP/clickhouse.system.settings,#1)&lt;&gt;last(/ClickHouse by HTTP/clickhouse.system.settings,#2) and length(last(/ClickHouse by HTTP/clickhouse.system.settings))&gt;0</expression><name>ClickHouse: Configuration has been changed</name><event_name>ClickHouse: Version has changed (new version: {ITEM.VALUE})</event_name><priority>INFO</priority><description>ClickHouse configuration has been changed. Ack to close.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>042f4b688cfe488fbd0e80f40f51ce78</uuid><name>ClickHouse: Get tables info</name><type>HTTP_AGENT</type><key>clickhouse.tables</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.data</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>select database, table, sum(bytes) as bytes, count() as parts, sum(rows) as rows from system.parts where active = 1 group by database, table format JSON</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>raw</value></tag><tag><tag>component</tag><value>tables</value></tag></tags></item><item><uuid>99b894b181b44a4f8ef10280b881b273</uuid><name>ClickHouse: Uptime</name><type>DEPENDENT</type><key>clickhouse.uptime</key><delay>0</delay><history>7d</history><units>s</units><description>Number of seconds since ClickHouse server start</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;Uptime&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.asynchronous_metrics</key></master_item><tags><tag><tag>component</tag><value>application</value></tag></tags><triggers><trigger><uuid>975cebc1b4324f83b5a8853fd666a179</uuid><expression>nodata(/ClickHouse by HTTP/clickhouse.uptime,30m)=1</expression><name>ClickHouse: Failed to fetch info data</name><event_name>ClickHouse: Failed to fetch info data (or no data for 30m)</event_name><priority>WARNING</priority><description>Zabbix has not received data for items for the last 30 minutes</description><manual_close>YES</manual_close><dependencies><dependency><name>ClickHouse: Service is down</name><expression>last(/ClickHouse by HTTP/clickhouse.ping)=0 or last(/ClickHouse by HTTP/net.tcp.service[{$CLICKHOUSE.SCHEME},&quot;{HOST.CONN}&quot;,&quot;{$CLICKHOUSE.PORT}&quot;]) = 0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger><trigger><uuid>e1316d3a83174cc49ab96ad90c46150b</uuid><expression>last(/ClickHouse by HTTP/clickhouse.uptime)&lt;10m</expression><name>ClickHouse: has been restarted</name><event_name>ClickHouse: has been restarted (uptime &lt; 10m)</event_name><priority>INFO</priority><description>Uptime is less than 10 minutes.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>d09b77c25dfd45249df05fc3f6d45b7b</uuid><name>ClickHouse: Version</name><type>HTTP_AGENT</type><key>clickhouse.version</key><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>Version of the server</description><preprocessing><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><url>{$CLICKHOUSE.SCHEME}://{HOST.CONN}:{$CLICKHOUSE.PORT}/</url><query_fields><query_field><name>query</name><value>SELECT version()</value></query_field></query_fields><headers><header><name>X-ClickHouse-User</name><value>{$CLICKHOUSE.USER}</value></header><header><name>X-ClickHouse-Key</name><value>{$CLICKHOUSE.PASSWORD}</value></header></headers><tags><tag><tag>component</tag><value>application</value></tag></tags><triggers><trigger><uuid>244dcf8dc8584e1686585160c261ef85</uuid><expression>last(/ClickHouse by HTTP/clickhouse.version,#1)&lt;&gt;last(/ClickHouse by HTTP/clickhouse.version,#2) and length(last(/ClickHouse by HTTP/clickhouse.version))&gt;0</expression><name>ClickHouse: Version has changed</name><event_name>ClickHouse: Version has changed (new version: {ITEM.VALUE})</event_name><priority>INFO</priority><description>ClickHouse version has changed. Ack to close.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>5bac794c8c7e438c924cd16b708dc281</uuid><name>ClickHouse: Write syscalls in fly</name><type>DEPENDENT</type><key>clickhouse.write</key><delay>0</delay><history>7d</history><description>Number of write (write, pwrite, io_getevents, etc.) syscalls in fly</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;Write&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>381805a8145a48c2a1f2586996b66a94</uuid><name>ClickHouse: ZooKeeper exceptions per second</name><type>DEPENDENT</type><key>clickhouse.zookeeper.exceptions.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Count of ZooKeeper exceptions that does not belong to user/hardware exceptions.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;ZooKeeperOtherExceptions&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>zookeeper</value></tag></tags></item><item><uuid>f8e6a866d8c745d39ed124f19afe8041</uuid><name>ClickHouse: ZooKeeper hardware exceptions per second</name><type>DEPENDENT</type><key>clickhouse.zookeeper.hw_exceptions.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Count of ZooKeeper exceptions caused by session moved/expired, connection loss, marshalling error, operation timed out and invalid zhandle state.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;ZooKeeperHardwareExceptions&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>zookeeper</value></tag></tags></item><item><uuid>071fb0471b8e40c3a5bb79c694cecce0</uuid><name>ClickHouse: ZooKeeper requests</name><type>DEPENDENT</type><key>clickhouse.zookeeper.request</key><delay>0</delay><history>7d</history><description>Number of requests to ZooKeeper in progress.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;ZooKeeperRequest&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>zookeeper</value></tag></tags></item><item><uuid>3e344ea728a54bc38b4098e7f6e2d087</uuid><name>ClickHouse: ZooKeeper sessions</name><type>DEPENDENT</type><key>clickhouse.zookeeper.session</key><delay>0</delay><history>7d</history><description>Number of sessions (connections) to ZooKeeper. Should be no more than one.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;ZooKeeperSession&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>zookeeper</value></tag></tags><triggers><trigger><uuid>655622aa6c5c48c8b38d5a519602ef05</uuid><expression>min(/ClickHouse by HTTP/clickhouse.zookeeper.session,5m)&gt;1</expression><name>ClickHouse: Too many ZooKeeper sessions opened</name><priority>WARNING</priority><description>Number of sessions (connections) to ZooKeeper.
Should be no more than one, because using more than one connection to ZooKeeper may lead to bugs due to lack of linearizability (stale reads) that ZooKeeper consistency model allows.</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>4931797c1034488fb9a2fc01e22b599c</uuid><name>ClickHouse: ZooKeeper user exceptions per second</name><type>DEPENDENT</type><key>clickhouse.zookeeper.user_exceptions.rate</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Count of ZooKeeper exceptions caused by no znodes, bad version, node exists, node empty and no children for ephemeral.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;ZooKeeperUserExceptions&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>zookeeper</value></tag></tags></item><item><uuid>b9fbc2f76b9c4de3b196ffc82ec10209</uuid><name>ClickHouse: ZooKeeper wait time</name><type>DEPENDENT</type><key>clickhouse.zookeeper.wait.time</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>s</units><description>Time spent in waiting for ZooKeeper operations.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.event == &quot;ZooKeeperWaitMicroseconds&quot;)].value.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>MULTIPLIER</type><parameters><parameter>0.000001</parameter></parameters></step><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>clickhouse.system.events</key></master_item><tags><tag><tag>component</tag><value>zookeeper</value></tag></tags></item><item><uuid>696aa071a9b24b29acbce2f1b5c49da3</uuid><name>ClickHouse: ZooKeeper watches</name><type>DEPENDENT</type><key>clickhouse.zookeeper.watch</key><delay>0</delay><history>7d</history><description>Number of watches (e.g., event subscriptions) in ZooKeeper.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.metric == &quot;ZooKeeperWatch&quot;)].value.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.system.metrics</key></master_item><tags><tag><tag>component</tag><value>zookeeper</value></tag></tags></item><item><uuid>68d1e19a6ec2401ba0dd509de7df2812</uuid><name>ClickHouse: Check port availability</name><type>SIMPLE</type><key>net.tcp.service[{$CLICKHOUSE.SCHEME},&quot;{HOST.CONN}&quot;,&quot;{$CLICKHOUSE.PORT}&quot;]</key><history>7d</history><valuemap><name>Service state</name></valuemap><preprocessing><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>10m</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>network</value></tag></tags><triggers><trigger><uuid>1d4b9842b66b4da9ab3750944b2fa050</uuid><expression>last(/ClickHouse by HTTP/net.tcp.service[{$CLICKHOUSE.SCHEME},&quot;{HOST.CONN}&quot;,&quot;{$CLICKHOUSE.PORT}&quot;])=0</expression><name>ClickHouse: Port {$CLICKHOUSE.PORT} is unavailable</name><priority>AVERAGE</priority><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item></items><discovery_rules><discovery_rule><uuid>add428c918e34dc9aeb58f946f16cbd2</uuid><name>Dictionaries</name><type>DEPENDENT</type><key>clickhouse.dictionaries.discovery</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#NAME}</macro><value>{$CLICKHOUSE.LLD.FILTER.DICT.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#NAME}</macro><value>{$CLICKHOUSE.LLD.FILTER.DICT.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition></conditions></filter><description>Info about dictionaries</description><item_prototypes><item_prototype><uuid>18cc050ff9c84d01ab61df1283fcce97</uuid><name>ClickHouse: Dictionary {#NAME}: Bytes allocated</name><type>DEPENDENT</type><key>clickhouse.dictionary.bytes_allocated[&quot;{#NAME}&quot;]</key><delay>0</delay><history>7d</history><units>B</units><description>The amount of RAM the dictionary uses.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.name == &quot;{#NAME}&quot;)].bytes_allocated.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.dictionaries</key></master_item><tags><tag><tag>component</tag><value>dictionaries</value></tag><tag><tag>dictionary</tag><value>{#NAME}</value></tag></tags></item_prototype><item_prototype><uuid>fa4efa26e3f64fc89c9d7dad39a610ca</uuid><name>ClickHouse: Dictionary {#NAME}: Element count</name><type>DEPENDENT</type><key>clickhouse.dictionary.element_count[&quot;{#NAME}&quot;]</key><delay>0</delay><history>7d</history><description>Number of items stored in the dictionary.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.name == &quot;{#NAME}&quot;)].element_count.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.dictionaries</key></master_item><tags><tag><tag>component</tag><value>dictionaries</value></tag><tag><tag>dictionary</tag><value>{#NAME}</value></tag></tags></item_prototype><item_prototype><uuid>d9e333b7c1694ef482683679275dcd8d</uuid><name>ClickHouse: Dictionary {#NAME}: Load factor</name><type>DEPENDENT</type><key>clickhouse.dictionary.load_factor[&quot;{#NAME}&quot;]</key><delay>0</delay><history>7d</history><units>%</units><description>The percentage filled in the dictionary (for a hashed dictionary, the percentage filled in the hash table).</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.name == &quot;{#NAME}&quot;)].bytes_allocated.first()</parameter></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>100</parameter></parameters></step></preprocessing><master_item><key>clickhouse.dictionaries</key></master_item><tags><tag><tag>component</tag><value>dictionaries</value></tag><tag><tag>dictionary</tag><value>{#NAME}</value></tag></tags></item_prototype></item_prototypes><master_item><key>clickhouse.dictionaries</key></master_item><lld_macro_paths><lld_macro_path><lld_macro>{#NAME}</lld_macro><path>$.name</path></lld_macro_path></lld_macro_paths></discovery_rule><discovery_rule><uuid>ddb7c8c688264a5a8907fbdd6974d395</uuid><name>Replicas</name><type>DEPENDENT</type><key>clickhouse.replicas.discovery</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#DB}</macro><value>{$CLICKHOUSE.LLD.FILTER.DB.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#DB}</macro><value>{$CLICKHOUSE.LLD.FILTER.DB.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition></conditions></filter><description>Info about replicas</description><item_prototypes><item_prototype><uuid>be577e21420244cb9d47c9fb9e23904a</uuid><name>ClickHouse: {#DB}.{#TABLE}: Active replicas</name><type>DEPENDENT</type><key>clickhouse.replica.active_replicas[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of replicas of this table that have a session in ZooKeeper (i.e., the number of functioning replicas). (Have a non-zero value only where there is an active session with ZooKeeper).</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].active_replicas.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>0a84f6788b3f447d958e031df0e2301c</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica future parts</name><type>DEPENDENT</type><key>clickhouse.replica.future_parts[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of data parts that will appear as the result of INSERTs or merges that haven't been done yet.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].future_parts.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>6b49a71fcf244b8cb88e21423ac92ae2</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica queue inserts size</name><type>DEPENDENT</type><key>clickhouse.replica.inserts_in_queue[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of inserts of blocks of data that need to be made.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].inserts_in_queue.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>29977fdd52c64c4ca0b3565187365a0c</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica readonly</name><type>DEPENDENT</type><key>clickhouse.replica.is_readonly[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Whether the replica is in read-only mode.
This mode is turned on if the config doesn't have sections with ZooKeeper, if an unknown error occurred when re-initializing sessions in ZooKeeper, and during session re-initialization in ZooKeeper.</description><valuemap><name>Replicas state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].is_readonly.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>7cfd2342d3654407a941cb56fde5c6bf</uuid><expression>min(/ClickHouse by HTTP/clickhouse.replica.is_readonly[&quot;{#DB}.{#TABLE}&quot;],5m)=1</expression><name>ClickHouse: {#DB}.{#TABLE} Replica is readonly</name><priority>WARNING</priority><description>This mode is turned on if the config doesn't have sections with ZooKeeper, if an unknown error occurred when re-initializing sessions in ZooKeeper, and during session re-initialization in ZooKeeper.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>a889475b8ddf48109af3dd2b7ed58627</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica session expired</name><type>DEPENDENT</type><key>clickhouse.replica.is_session_expired[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>True if the ZooKeeper session expired</description><valuemap><name>Replicas state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].is_session_expired.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>765475cc0be84ce1b85d1f026d08c326</uuid><expression>min(/ClickHouse by HTTP/clickhouse.replica.is_session_expired[&quot;{#DB}.{#TABLE}&quot;],5m)=1</expression><name>ClickHouse: {#DB}.{#TABLE} Replica session is expired</name><priority>WARNING</priority><description>This mode is turned on if the config doesn't have sections with ZooKeeper, if an unknown error occurred when re-initializing sessions in ZooKeeper, and during session re-initialization in ZooKeeper.</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>8acd6e2195064708886d9944af264c32</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica lag</name><type>DEPENDENT</type><key>clickhouse.replica.lag[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Difference between log_max_index and log_pointer</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].replica_lag.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>0b06b448c0ad433c94c2a3788ca53e1a</uuid><expression>min(/ClickHouse by HTTP/clickhouse.replica.lag[&quot;{#DB}.{#TABLE}&quot;],5m) &gt; {$CLICKHOUSE.LOG_POSITION.DIFF.MAX.WARN}</expression><name>ClickHouse: {#DB}.{#TABLE}: Difference between log_max_index and log_pointer is too high</name><event_name>ClickHouse: {#DB}.{#TABLE}: Difference between log_max_index and log_pointer is too high (More than {$CLICKHOUSE.LOG_POSITION.DIFF.MAX.WARN} for 5m)</event_name><priority>WARNING</priority><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>267603d761864e4cbf764558520ed83c</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica log max index</name><type>DEPENDENT</type><key>clickhouse.replica.log_max_index[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Maximum entry number in the log of general activity. (Have a non-zero value only where there is an active session with ZooKeeper).</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].log_max_index.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>93bf89b0befa4c238f2143c1841ef629</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica log pointer</name><type>DEPENDENT</type><key>clickhouse.replica.log_pointer[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Maximum entry number in the log of general activity that the replica copied to its execution queue, plus one. (Have a non-zero value only where there is an active session with ZooKeeper).</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].log_pointer.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>7b0da84f1e3f4705a209c6be025fc738</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica queue merges size</name><type>DEPENDENT</type><key>clickhouse.replica.merges_in_queue[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of merges waiting to be made.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].merges_in_queue.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>51a83465b90e4c82835030fec4f79b6f</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica parts to check</name><type>DEPENDENT</type><key>clickhouse.replica.parts_to_check[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of data parts in the queue for verification. A part is put in the verification queue if there is suspicion that it might be damaged.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].parts_to_check.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>52ef1c26f14842868424f0c5bf81b35b</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica queue size</name><type>DEPENDENT</type><key>clickhouse.replica.queue_size[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Size of the queue for operations waiting to be performed.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].queue_size.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>6fe0a15168db4abfa1cd2a2ee45d62ad</uuid><expression>min(/ClickHouse by HTTP/clickhouse.replica.queue_size[&quot;{#DB}.{#TABLE}&quot;],5m)&gt;{$CLICKHOUSE.QUEUE.SIZE.MAX.WARN:&quot;{#TABLE}&quot;}</expression><name>ClickHouse: {#DB}.{#TABLE}: Too many operations in queue</name><event_name>ClickHouse: {#DB}.{#TABLE}: Too many operations in queue (over {$CLICKHOUSE.QUEUE.SIZE.MAX.WARN} for 5m)</event_name><priority>WARNING</priority><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>0fc2781f4be44f0e85176e5ed05dc05e</uuid><name>ClickHouse: {#DB}.{#TABLE}: Total replicas</name><type>DEPENDENT</type><key>clickhouse.replica.total_replicas[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Total number of known replicas of this table. (Have a non-zero value only where there is an active session with ZooKeeper).</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].total_replicas.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.replicas</key></master_item><tags><tag><tag>component</tag><value>replication</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype></item_prototypes><trigger_prototypes><trigger_prototype><uuid>f46f1b8d75c54129b6e2ff9ede2501b5</uuid><expression>max(/ClickHouse by HTTP/clickhouse.replica.active_replicas[&quot;{#DB}.{#TABLE}&quot;],5m) &lt; last(/ClickHouse by HTTP/clickhouse.replica.total_replicas[&quot;{#DB}.{#TABLE}&quot;])</expression><name>ClickHouse: {#DB}.{#TABLE}: Number of active replicas less than number of total replicas</name><priority>WARNING</priority><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes><graph_prototypes><graph_prototype><uuid>131e0d19c35f4d87aa62b7766e6e1db3</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica log activity</name><graph_items><graph_item><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.replica.log_max_index[&quot;{#DB}.{#TABLE}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.replica.log_pointer[&quot;{#DB}.{#TABLE}&quot;]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><uuid>195f5d50a1f0488b9db5d2f1e6a6e8c3</uuid><name>ClickHouse: {#DB}.{#TABLE}: Replica queues</name><graph_items><graph_item><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.replica.merges_in_queue[&quot;{#DB}.{#TABLE}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.replica.inserts_in_queue[&quot;{#DB}.{#TABLE}&quot;]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>ClickHouse by HTTP</host><key>clickhouse.replica.queue_size[&quot;{#DB}.{#TABLE}&quot;]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><item><host>ClickHouse by HTTP</host><key>clickhouse.replica.future_parts[&quot;{#DB}.{#TABLE}&quot;]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><item><host>ClickHouse by HTTP</host><key>clickhouse.replica.parts_to_check[&quot;{#DB}.{#TABLE}&quot;]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><master_item><key>clickhouse.replicas</key></master_item><lld_macro_paths><lld_macro_path><lld_macro>{#DB}</lld_macro><path>$.database</path></lld_macro_path><lld_macro_path><lld_macro>{#TABLE}</lld_macro><path>$.table</path></lld_macro_path></lld_macro_paths></discovery_rule><discovery_rule><uuid>a82f8d0f0a4b493dab0c2133b90113cc</uuid><name>Tables</name><type>DEPENDENT</type><key>clickhouse.tables.discovery</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#DB}</macro><value>{$CLICKHOUSE.LLD.FILTER.DB.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#DB}</macro><value>{$CLICKHOUSE.LLD.FILTER.DB.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition></conditions></filter><description>Info about tables</description><item_prototypes><item_prototype><uuid>f7bb82b047a84c0185b5ca040a75e287</uuid><name>ClickHouse: {#DB}: Bytes</name><type>DEPENDENT</type><key>clickhouse.db.bytes[&quot;{#DB}&quot;]</key><delay>0</delay><history>7d</history><units>B</units><description>Database size in bytes.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot;)].bytes.sum()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.tables</key></master_item><tags><tag><tag>component</tag><value>tables</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>3075954290af4f35b1620a5f15d2947d</uuid><name>ClickHouse: {#DB}.{#TABLE}: Bytes</name><type>DEPENDENT</type><key>clickhouse.table.bytes[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><units>B</units><description>Table size in bytes. Database: {#DB}, table: {#TABLE}</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].bytes.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.tables</key></master_item><tags><tag><tag>component</tag><value>tables</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>e50e12adb7ef47e6ba40db01e7ae01e4</uuid><name>ClickHouse: {#DB}.{#TABLE}: Parts</name><type>DEPENDENT</type><key>clickhouse.table.parts[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of parts of the table. Database: {#DB}, table: {#TABLE}</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].parts.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.tables</key></master_item><tags><tag><tag>component</tag><value>tables</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype><item_prototype><uuid>0ba557c544854f47bcd9cc65d33f14e7</uuid><name>ClickHouse: {#DB}.{#TABLE}: Rows</name><type>DEPENDENT</type><key>clickhouse.table.rows[&quot;{#DB}.{#TABLE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of rows in the table. Database: {#DB}, table: {#TABLE}</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.database == &quot;{#DB}&quot; &amp;&amp; @.table == &quot;{#TABLE}&quot;)].rows.first()</parameter></parameters></step></preprocessing><master_item><key>clickhouse.tables</key></master_item><tags><tag><tag>component</tag><value>tables</value></tag><tag><tag>database</tag><value>{#DB}</value></tag><tag><tag>table</tag><value>{#TABLE}</value></tag></tags></item_prototype></item_prototypes><master_item><key>clickhouse.tables</key></master_item><lld_macro_paths><lld_macro_path><lld_macro>{#DB}</lld_macro><path>$.database</path></lld_macro_path><lld_macro_path><lld_macro>{#TABLE}</lld_macro><path>$.table</path></lld_macro_path></lld_macro_paths></discovery_rule></discovery_rules><tags><tag><tag>class</tag><value>database</value></tag><tag><tag>target</tag><value>clickhouse</value></tag></tags><macros><macro><macro>{$CLICKHOUSE.DELAYED.FILES.DISTRIBUTED.COUNT.MAX.WARN}</macro><value>600</value><description>Maximum size of distributed files queue to insert for trigger expression.</description></macro><macro><macro>{$CLICKHOUSE.DELAYED.INSERTS.MAX.WARN}</macro><value>0</value><description>Maximum number of delayed inserts for trigger expression.</description></macro><macro><macro>{$CLICKHOUSE.LLD.FILTER.DB.MATCHES}</macro><value>.*</value><description>Filter of discoverable databases</description></macro><macro><macro>{$CLICKHOUSE.LLD.FILTER.DB.NOT_MATCHES}</macro><value>CHANGE_IF_NEEDED</value><description>Filter to exclude discovered databases</description></macro><macro><macro>{$CLICKHOUSE.LLD.FILTER.DICT.MATCHES}</macro><value>.*</value><description>Filter of discoverable dictionaries</description></macro><macro><macro>{$CLICKHOUSE.LLD.FILTER.DICT.NOT_MATCHES}</macro><value>CHANGE_IF_NEEDED</value><description>Filter to exclude discovered dictionaries</description></macro><macro><macro>{$CLICKHOUSE.LOG_POSITION.DIFF.MAX.WARN}</macro><value>30</value><description>Maximum diff between log_pointer and log_max_index.</description></macro><macro><macro>{$CLICKHOUSE.NETWORK.ERRORS.MAX.WARN}</macro><value>5</value><description>Maximum number of smth for trigger expression</description></macro><macro><macro>{$CLICKHOUSE.PARTS.PER.PARTITION.WARN}</macro><value>300</value><description>Maximum number of parts per partition for trigger expression.</description></macro><macro><macro>{$CLICKHOUSE.PASSWORD}</macro><value>zabbix_pass</value></macro><macro><macro>{$CLICKHOUSE.PORT}</macro><value>8123</value><description>The port of ClickHouse HTTP endpoint</description></macro><macro><macro>{$CLICKHOUSE.QUERY_TIME.MAX.WARN}</macro><value>600</value><description>Maximum ClickHouse query time in seconds for trigger expression</description></macro><macro><macro>{$CLICKHOUSE.QUEUE.SIZE.MAX.WARN}</macro><value>20</value><description>Maximum size of the queue for operations waiting to be performed for trigger expression.</description></macro><macro><macro>{$CLICKHOUSE.REPLICA.MAX.WARN}</macro><value>600</value><description>Replication lag across all tables for trigger expression.</description></macro><macro><macro>{$CLICKHOUSE.SCHEME}</macro><value>http</value><description>Request scheme which may be http or https</description></macro><macro><macro>{$CLICKHOUSE.USER}</macro><value>zabbix</value></macro></macros><valuemaps><valuemap><uuid>4d926c30529447b3816cec3f1440b47a</uuid><name>Replicas state</name><mappings><mapping><value>0</value><newvalue>False</newvalue></mapping><mapping><value>1</value><newvalue>True</newvalue></mapping></mappings></valuemap><valuemap><uuid>94147888c7ad4f5bae864eb2698f0237</uuid><name>Service state</name><mappings><mapping><value>0</value><newvalue>Down</newvalue></mapping><mapping><value>1</value><newvalue>Up</newvalue></mapping></mappings></valuemap></valuemaps></template></templates><triggers><trigger><uuid>803947a6de9340ed8596510dcbbeacac</uuid><expression>last(/ClickHouse by HTTP/clickhouse.ping)=0 or last(/ClickHouse by HTTP/net.tcp.service[{$CLICKHOUSE.SCHEME},&quot;{HOST.CONN}&quot;,&quot;{$CLICKHOUSE.PORT}&quot;]) = 0</expression><name>ClickHouse: Service is down</name><priority>AVERAGE</priority><manual_close>YES</manual_close><dependencies><dependency><name>ClickHouse: Port {$CLICKHOUSE.PORT} is unavailable</name><expression>last(/ClickHouse by HTTP/net.tcp.service[{$CLICKHOUSE.SCHEME},&quot;{HOST.CONN}&quot;,&quot;{$CLICKHOUSE.PORT}&quot;])=0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers><graphs><graph><uuid>fc2f8de59c874876addb08ec633338d4</uuid><name>ClickHouse: Current activity</name><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.query.current</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.merge.current</key></item></graph_item></graph_items></graph><graph><uuid>b1b66d510e424965b7e82b902e0f2e58</uuid><name>ClickHouse: Current connections</name><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.connections.tcp</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.connections.http</key></item></graph_item><graph_item><sortorder>2</sortorder><drawtype>BOLD_LINE</drawtype><color>F63100</color><item><host>ClickHouse by HTTP</host><key>clickhouse.connections.mysql</key></item></graph_item><graph_item><sortorder>3</sortorder><drawtype>BOLD_LINE</drawtype><color>A54F10</color><item><host>ClickHouse by HTTP</host><key>clickhouse.connections.interserver</key></item></graph_item><graph_item><sortorder>4</sortorder><drawtype>BOLD_LINE</drawtype><color>FC6EA3</color><item><host>ClickHouse by HTTP</host><key>clickhouse.connections.distribute</key></item></graph_item></graph_items></graph><graph><uuid>59935d9f612f468b97288d9a0dc62b26</uuid><name>ClickHouse: Distributed</name><graph_items><graph_item><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.distributed.files.retry.rate</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.distributed.files.fail.rate</key></item></graph_item><graph_item><sortorder>2</sortorder><drawtype>BOLD_LINE</drawtype><color>F63100</color><yaxisside>RIGHT</yaxisside><item><host>ClickHouse by HTTP</host><key>clickhouse.distributed.files</key></item></graph_item></graph_items></graph><graph><uuid>edd18c769edd442cba00adf97ae4192a</uuid><name>ClickHouse: Insert/Merge bytes rate</name><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.inserted_bytes.rate</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.merge_bytes.rate</key></item></graph_item></graph_items></graph><graph><uuid>0fd813049e7449b69366021ffa0d3ec7</uuid><name>ClickHouse: Insert/Merge rows rate</name><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.inserted_rows.rate</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.merge_rows.rate</key></item></graph_item></graph_items></graph><graph><uuid>5a688818d4fa44f687aa8415abddc7c0</uuid><name>ClickHouse: Memory Usage</name><graph_items><graph_item><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.memory.tracking.merges</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.memory.tracking.schedule.pool</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>ClickHouse by HTTP</host><key>clickhouse.memory.tracking.background.moves</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><item><host>ClickHouse by HTTP</host><key>clickhouse.memory.tracking.background</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><item><host>ClickHouse by HTTP</host><key>clickhouse.memory.tracking</key></item></graph_item></graph_items></graph><graph><uuid>ba22cf13ef6f46299651d15fb860016d</uuid><name>ClickHouse: Memory Utilization</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.jemalloc.allocated</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>GRADIENT_LINE</drawtype><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.jemalloc.resident</key></item></graph_item><graph_item><sortorder>2</sortorder><drawtype>GRADIENT_LINE</drawtype><color>F63100</color><item><host>ClickHouse by HTTP</host><key>clickhouse.jemalloc.mapped</key></item></graph_item></graph_items></graph><graph><uuid>9593c61ecdfa4c83ab9421ed85a82f36</uuid><name>ClickHouse: Queries rate</name><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.query.rate</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.select_query.rate</key></item></graph_item><graph_item><sortorder>2</sortorder><drawtype>BOLD_LINE</drawtype><color>F63100</color><item><host>ClickHouse by HTTP</host><key>clickhouse.insert_query.rate</key></item></graph_item></graph_items></graph><graph><uuid>eaa80cf006e84d26903cf1004a268a31</uuid><name>ClickHouse: Syscalls in fly</name><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.read</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.write</key></item></graph_item></graph_items></graph><graph><uuid>eda00404a372434ea4f511c219bf3295</uuid><name>ClickHouse: Uptime</name><graph_items><graph_item><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.uptime</key></item></graph_item></graph_items></graph><graph><uuid>c90d0b21105e42bd9f4399d77ba0a81a</uuid><name>ClickHouse: Zookeeper exceptions rate</name><graph_items><graph_item><color>1A7C11</color><item><host>ClickHouse by HTTP</host><key>clickhouse.zookeeper.exceptions.rate</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>ClickHouse by HTTP</host><key>clickhouse.zookeeper.hw_exceptions.rate</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>ClickHouse by HTTP</host><key>clickhouse.zookeeper.user_exceptions.rate</key></item></graph_item><graph_item><sortorder>3</sortorder><drawtype>BOLD_LINE</drawtype><color>A54F10</color><yaxisside>RIGHT</yaxisside><item><host>ClickHouse by HTTP</host><key>clickhouse.zookeeper.watch</key></item></graph_item></graph_items></graph></graphs></zabbix_export>
