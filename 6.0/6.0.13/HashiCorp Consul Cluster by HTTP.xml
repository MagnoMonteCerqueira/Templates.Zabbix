<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:15:08Z</date><groups><group><uuid>a571c0d144b14fd4a87a9d9b2aa9fcd6</uuid><name>Templates/Applications</name></group></groups><templates><template><uuid>3db29bb6b2b14fa289ba7915264efcdf</uuid><template>HashiCorp Consul Cluster by HTTP</template><name>HashiCorp Consul Cluster by HTTP</name><description>Get HashiCorp Consul Cluster services and nodes by HTTP agent from API endpoints.

Don't forget to change macros {$CONSUL.CLUSTER.URL}, {$CONSUL.TOKEN}.
Some metrics may not be collected depending on your HashiCorp Consul instance version and configuration.
More information about metrics you can find in official documentation: https://www.consul.io/docs/agent/telemetry

You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback

Template tooling version used: 0.42</description><groups><group><name>Templates/Applications</name></group></groups><items><item><uuid>fd087c72bb7842c6b84b0b70788506b0</uuid><name>Consul cluster: Get services</name><type>HTTP_AGENT</type><key>consul.get_catalog_services</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Catalog of services registered in a given datacenter.</description><preprocessing><step><type>CHECK_NOT_SUPPORTED</type><parameters><parameter/></parameters></step></preprocessing><timeout>15s</timeout><url>{$CONSUL.CLUSTER.URL}/v1/catalog/services</url><headers><header><name>X-Consul-Token</name><value>{$CONSUL.TOKEN}</value></header><header><name>X-Consul-Namespace</name><value>{$CONSUL.NAMESPACE}</value></header></headers><tags><tag><tag>component</tag><value>raw</value></tag></tags></item><item><uuid>cad23435cc454f01b47034bd8427931d</uuid><name>Consul cluster: Get nodes Serf health status</name><type>HTTP_AGENT</type><key>consul.get_cluster_serf</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Get Serf Health Status for all agents in cluster.</description><preprocessing><step><type>CHECK_NOT_SUPPORTED</type><parameters><parameter/></parameters></step></preprocessing><timeout>15s</timeout><url>{$CONSUL.CLUSTER.URL}/v1/health/state/any?filter=CheckID==serfHealth</url><headers><header><name>X-Consul-Token</name><value>{$CONSUL.TOKEN}</value></header><header><name>X-Consul-Namespace</name><value>{$CONSUL.NAMESPACE}</value></header></headers><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>raw</value></tag></tags></item><item><uuid>e52fcc1af52e4df5b18118355260a8d6</uuid><name>Consul cluster: Cluster leader</name><type>HTTP_AGENT</type><key>consul.get_leader</key><history>7d</history><trends>0</trends><value_type>TEXT</value_type><description>Current leader address.</description><preprocessing><step><type>CHECK_NOT_SUPPORTED</type><parameters><parameter/></parameters></step><step><type>TRIM</type><parameters><parameter>&quot;</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1h</parameter></parameters></step></preprocessing><timeout>15s</timeout><url>{$CONSUL.CLUSTER.URL}/v1/status/leader</url><headers><header><name>X-Consul-Token</name><value>{$CONSUL.TOKEN}</value></header></headers><tags><tag><tag>component</tag><value>leader</value></tag><tag><tag>component</tag><value>raw</value></tag></tags><triggers><trigger><uuid>8f612c3cfbb74f55a7defed05039e2a5</uuid><expression>last(/HashiCorp Consul Cluster by HTTP/consul.get_leader,#1)&lt;&gt;last(/HashiCorp Consul Cluster by HTTP/consul.get_leader,#2) and length(last(/HashiCorp Consul Cluster by HTTP/consul.get_leader))&gt;0</expression><name>Consul cluster: Leader has been changed</name><event_name>Consul cluster: Leader has been changed (new value received: {ITEM.VALUE})</event_name><priority>INFO</priority><description>Consul cluster version has changed. Ack to close.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>859451004516499e9636d96cde023d21</uuid><name>Consul cluster: Get nodes</name><type>HTTP_AGENT</type><key>consul.get_nodes</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Catalog of nodes registered in a given datacenter.</description><preprocessing><step><type>CHECK_NOT_SUPPORTED</type><parameters><parameter/></parameters></step></preprocessing><timeout>15s</timeout><url>{$CONSUL.CLUSTER.URL}/v1/catalog/nodes</url><headers><header><name>X-Consul-Token</name><value>{$CONSUL.TOKEN}</value></header></headers><tags><tag><tag>component</tag><value>raw</value></tag></tags></item><item><uuid>2400f78a5ada4a59b63fc049b6e3b3bf</uuid><name>Consul cluster: Nodes: peers</name><type>HTTP_AGENT</type><key>consul.get_peers</key><history>7d</history><description>The number of Raft peers for the datacenter in which the agent is running.</description><preprocessing><step><type>CHECK_NOT_SUPPORTED</type><parameters><parameter/></parameters></step><step><type>JSONPATH</type><parameters><parameter>$.length()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><timeout>15s</timeout><url>{$CONSUL.CLUSTER.URL}/v1/status/peers</url><headers><header><name>X-Consul-Token</name><value>{$CONSUL.TOKEN}</value></header></headers><tags><tag><tag>component</tag><value>raft</value></tag></tags></item><item><uuid>31be2fd640a141279d41871df877a42c</uuid><name>Consul: Nodes: critical</name><type>DEPENDENT</type><key>consul.nodes_critical</key><delay>0</delay><history>7d</history><description>Number of agents on current dc with serf health status 'critical'.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.Status == &quot;critical&quot;)].length()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_cluster_serf</key></master_item><tags><tag><tag>component</tag><value>consul</value></tag></tags><triggers><trigger><uuid>8660702ae3674eb083d6dacb81ec3a4d</uuid><expression>last(/HashiCorp Consul Cluster by HTTP/consul.nodes_critical)&gt;0</expression><name>Consul: One or more nodes in cluster in 'critical' state</name><priority>AVERAGE</priority><description>One or more agents on current dc with serf health status 'critical'.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>6303f2b128f64bec9760bc3807bb9a34</uuid><name>Consul: Nodes: passing</name><type>DEPENDENT</type><key>consul.nodes_passing</key><delay>0</delay><history>7d</history><description>Number of agents on current dc with serf health status 'passing'.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.Status == &quot;passing&quot;)].length()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_cluster_serf</key></master_item><tags><tag><tag>component</tag><value>consul</value></tag></tags></item><item><uuid>3eef4079f15d4db8852822ebda6d36fe</uuid><name>Consul: Nodes: total</name><type>DEPENDENT</type><key>consul.nodes_total</key><delay>0</delay><history>7d</history><description>Number of nodes on current dc.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.length()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_nodes</key></master_item><tags><tag><tag>component</tag><value>consul</value></tag></tags></item><item><uuid>b02337cc9a6b4c34a85d85a231c4e51f</uuid><name>Consul: Nodes: warning</name><type>DEPENDENT</type><key>consul.nodes_warning</key><delay>0</delay><history>7d</history><description>Number of agents on current dc with serf health status 'warning'.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.Status == &quot;warning&quot;)].length()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_cluster_serf</key></master_item><tags><tag><tag>component</tag><value>consul</value></tag></tags><triggers><trigger><uuid>92136d6ee73b4bb5b88b9f1da1afe740</uuid><expression>last(/HashiCorp Consul Cluster by HTTP/consul.nodes_warning)&gt;0</expression><name>Consul: One or more nodes in cluster in 'warning' state</name><priority>WARNING</priority><description>One or more agents on current dc with serf health status 'warning'.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>30101e37fce144bdacce0a58b4c9de0e</uuid><name>Consul: Services: total</name><type>DEPENDENT</type><key>consul.services_total</key><delay>0</delay><history>7d</history><description>Number of services on current dc.</description><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>return Object.keys(JSON.parse(value)).length;</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_catalog_services</key></master_item><tags><tag><tag>component</tag><value>consul</value></tag></tags></item></items><discovery_rules><discovery_rule><uuid>ea1b655bdf7940f6a431e2e04a8dfcd6</uuid><name>Consul cluster nodes discovery</name><type>DEPENDENT</type><key>consul.lld_nodes</key><delay>0</delay><filter><conditions><condition><macro>{#NODE_NAME}</macro><value>{$CONSUL.LLD.FILTER.NODE_NAME.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#NODE_NAME}</macro><value>{$CONSUL.LLD.FILTER.NODE_NAME.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition></conditions></filter><item_prototypes><item_prototype><uuid>ddb71b90bde94760a4a456c15e647917</uuid><name>Consul: Node [&quot;{#NODE_NAME}&quot;]: Serf Health</name><type>DEPENDENT</type><key>consul.serf.health[&quot;{#NODE_NAME}&quot;]</key><delay>0</delay><history>7d</history><description>Node Serf Health Status.</description><valuemap><name>Consul health state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.Node == &quot;{#NODE_NAME}&quot; &amp;&amp; @.CheckID == &quot;serfHealth&quot;)].Status.first()</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>var state = ['passing', 'warning', 'critical'];

return state.indexOf(value.trim()) === -1 ? 255 : state.indexOf(value.trim());</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_cluster_serf</key></master_item><tags><tag><tag>component</tag><value>health</value></tag></tags></item_prototype></item_prototypes><host_prototypes><host_prototype><uuid>20efdd208e1548a7877a970e1600e5ba</uuid><host>Consul {#NODE_NAME}</host><name>Consul {#NODE_NAME}</name><group_links><group_link><group><name>Templates/Applications</name></group></group_link></group_links><group_prototypes><group_prototype><name>Consul cluster/{#NODE_DATACENTER}</name></group_prototype></group_prototypes><templates><template><name>HashiCorp Consul Node by HTTP</name></template></templates><macros><macro><macro>{$CONSUL.NODE.API.URL}</macro><value>{#NODE_API_URL}</value><description>Consul instance URL</description></macro></macros><tags><tag><tag>address</tag><value>{#NODE_ADDRESS}</value></tag><tag><tag>datacenter</tag><value>{#NODE_DATACENTER}</value></tag></tags><custom_interfaces>YES</custom_interfaces><interfaces><interface><ip>{#NODE_ADDRESS}</ip></interface></interfaces></host_prototype></host_prototypes><master_item><key>consul.get_nodes</key></master_item><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>var data = JSON.parse(value),
    consul_api_scheme = '{$CONSUL.API.SCHEME}',
    consul_api_port = '{$CONSUL.API.PORT}',
    result = [];

data.forEach(function(instance) {
    if (instance[&quot;ID&quot;] != '') {
      result.push({
      '{#NODE_NAME}': instance[&quot;Node&quot;],
      '{#NODE_ADDRESS}': instance[&quot;Address&quot;],
      '{#NODE_API_URL}': consul_api_scheme + '://' + instance[&quot;Address&quot;] + ':' + consul_api_port,
      '{#NODE_DATACENTER}': instance[&quot;Datacenter&quot;]
      });
    }
  });

return JSON.stringify(result)</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>d84aadcb4d4d4215826c859de416b739</uuid><name>Consul cluster services discovery</name><type>DEPENDENT</type><key>consul.lld_services</key><delay>0</delay><filter><conditions><condition><macro>{#SERVICE_NAME}</macro><value>{$CONSUL.LLD.FILTER.SERVICE_NAME.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#SERVICE_NAME}</macro><value>{$CONSUL.LLD.FILTER.SERVICE_NAME.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition></conditions></filter><item_prototypes><item_prototype><uuid>38576dd458a94259ab273204ffe9aebd</uuid><name>Consul cluster: [&quot;{#SERVICE_NAME}&quot;]: Get raw service state</name><type>HTTP_AGENT</type><key>consul.get_service_stats[&quot;{#SERVICE_NAME}&quot;]</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Retrieve service instances providing the service indicated on the path.</description><preprocessing><step><type>CHECK_NOT_SUPPORTED</type><parameters><parameter/></parameters></step></preprocessing><timeout>15s</timeout><url>{$CONSUL.CLUSTER.URL}/v1/health/service/{#SERVICE_NAME}</url><status_codes>200, 429, 503</status_codes><headers><header><name>X-Consul-Token</name><value>{$CONSUL.TOKEN}</value></header><header><name>X-Consul-Namespace</name><value>{$CONSUL.NAMESPACE}</value></header></headers><tags><tag><tag>component</tag><value>service</value></tag><tag><tag>service</tag><value>{#SERVICE_NAME}</value></tag></tags></item_prototype><item_prototype><uuid>70a37e9934fa47f3bd7d553c70179d10</uuid><name>Consul: Service [&quot;{#SERVICE_NAME}&quot;]: Nodes critical</name><type>DEPENDENT</type><key>consul.service.nodes_critical[&quot;{#SERVICE_NAME}&quot;]</key><delay>0</delay><history>7d</history><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.Service.Service == &quot;{#SERVICE_NAME}&quot;)].Checks[?(@.CheckID == &quot;serfHealth&quot; &amp;&amp; @.Status == 'critical')].length()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_service_stats[&quot;{#SERVICE_NAME}&quot;]</key></master_item><tags><tag><tag>component</tag><value>service</value></tag><tag><tag>service</tag><value>{#SERVICE_NAME}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>60919b58bd484597aa7ec03f308eb614</uuid><expression>last(/HashiCorp Consul Cluster by HTTP/consul.service.nodes_critical[&quot;{#SERVICE_NAME}&quot;])&gt;{$CONSUL.CLUSTER.SERVICE_NODES.CRITICAL.MAX.AVG:&quot;{#SERVICE_NAME}&quot;}</expression><name>Consul: Service [&quot;{#SERVICE_NAME}&quot;]: Too many nodes with service status 'critical'</name><event_name>Consul: Service [&quot;{#SERVICE_NAME}&quot;]: Too many nodes with service status 'critical' (over {$CONSUL.CLUSTER.SERVICE_NODES.CRITICAL.MAX.AVG:&quot;{#SERVICE_NAME}&quot;})</event_name><priority>AVERAGE</priority><description>One or more nodes with service status 'critical'.</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>3807bd01fda5425694eb8e4169eb4078</uuid><name>Consul: Service [&quot;{#SERVICE_NAME}&quot;]: Nodes passing</name><type>DEPENDENT</type><key>consul.service.nodes_passing[&quot;{#SERVICE_NAME}&quot;]</key><delay>0</delay><history>7d</history><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.Service.Service == &quot;{#SERVICE_NAME}&quot;)].Checks[?(@.CheckID == &quot;serfHealth&quot; &amp;&amp; @.Status == 'passing')].length()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_service_stats[&quot;{#SERVICE_NAME}&quot;]</key></master_item><tags><tag><tag>component</tag><value>service</value></tag><tag><tag>service</tag><value>{#SERVICE_NAME}</value></tag></tags></item_prototype><item_prototype><uuid>8a23dbb1d28c472291c06e0da572424a</uuid><name>Consul: Service [&quot;{#SERVICE_NAME}&quot;]: Nodes warning</name><type>DEPENDENT</type><key>consul.service.nodes_warning[&quot;{#SERVICE_NAME}&quot;]</key><delay>0</delay><history>7d</history><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.Service.Service == &quot;{#SERVICE_NAME}&quot;)].Checks[?(@.CheckID == &quot;serfHealth&quot; &amp;&amp; @.Status == 'warning')].length()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><master_item><key>consul.get_service_stats[&quot;{#SERVICE_NAME}&quot;]</key></master_item><tags><tag><tag>component</tag><value>service</value></tag><tag><tag>service</tag><value>{#SERVICE_NAME}</value></tag></tags></item_prototype></item_prototypes><master_item><key>consul.get_catalog_services</key></master_item><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>var data = [];

Object.keys(JSON.parse(value)).forEach(function (v) {
    data.push({ '{#SERVICE_NAME}': v })
});

return JSON.stringify(data);</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing></discovery_rule></discovery_rules><tags><tag><tag>class</tag><value>software</value></tag><tag><tag>target</tag><value>consul</value></tag></tags><macros><macro><macro>{$CONSUL.API.PORT}</macro><value>8500</value><description>Consul API port. Using in node LLD.</description></macro><macro><macro>{$CONSUL.API.SCHEME}</macro><value>http</value><description>Consul API scheme. Using in node LLD.</description></macro><macro><macro>{$CONSUL.CLUSTER.URL}</macro><value>http://localhost:8500</value><description>Consul cluster URL.</description></macro><macro><macro>{$CONSUL.LLD.FILTER.NODE_NAME.MATCHES}</macro><value>.*</value><description>Filter of discoverable discovered nodes.</description></macro><macro><macro>{$CONSUL.LLD.FILTER.NODE_NAME.NOT_MATCHES}</macro><value>CHANGE IF NEEDED</value><description>Filter to exclude discovered nodes.</description></macro><macro><macro>{$CONSUL.LLD.FILTER.SERVICE_NAME.MATCHES}</macro><value>.*</value><description>Filter of discoverable discovered services.</description></macro><macro><macro>{$CONSUL.LLD.FILTER.SERVICE_NAME.NOT_MATCHES}</macro><value>CHANGE IF NEEDED</value><description>Filter to exclude discovered services.</description></macro><macro><macro>{$CONSUL.NAMESPACE}</macro><description>Consul service namespace. Enterprise only, in case of Open Source version leave this macro empty. Do not specify this macro to get all of services.</description></macro><macro><macro>{$CONSUL.SERVICE_NODES.CRITICAL.MAX.AVG}</macro><value>0</value><description>Maximum number of service nodes in status 'critical' for trigger expression. Can be used with context.</description></macro><macro><macro>{$CONSUL.TOKEN}</macro><value>&lt;PUT YOUR AUTH TOKEN&gt;</value><description>Consul auth token.</description></macro></macros><valuemaps><valuemap><uuid>9c120a74ede844e6a410b7e2c2d712bb</uuid><name>Consul health state</name><mappings><mapping><value>0</value><newvalue>passing</newvalue></mapping><mapping><value>1</value><newvalue>warning</newvalue></mapping><mapping><value>2</value><newvalue>critical</newvalue></mapping><mapping><value>255</value><newvalue>unknown</newvalue></mapping></mappings></valuemap></valuemaps></template></templates></zabbix_export>
