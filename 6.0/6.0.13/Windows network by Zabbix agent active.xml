<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:14:48Z</date><groups><group><uuid>57b7ae836ca64446ba2c296389c009b7</uuid><name>Templates/Modules</name></group></groups><templates><template><uuid>792cb76a1a6340d8acb36d8802d22c00</uuid><template>Windows network by Zabbix agent active</template><name>Windows network by Zabbix agent active</name><description>Template tooling version used: 0.41</description><groups><group><name>Templates/Modules</name></group></groups><items><item><uuid>7c115b04b8904cc187aa3c8bbf456a57</uuid><name>Network interfaces WMI get</name><type>ZABBIX_ACTIVE</type><key>wmi.getall[root\cimv2,&quot;select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus&gt;0&quot;]</key><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>Raw data of win32_networkadapter.</description><preprocessing><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1h</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>raw</value></tag></tags></item></items><discovery_rules><discovery_rule><uuid>876e793097d949e49d23b6c4e7df4988</uuid><name>Network interfaces discovery</name><type>DEPENDENT</type><key>net.if.discovery</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#IFNAME}</macro><value>{$NET.IF.IFNAME.MATCHES}</value><formulaid>E</formulaid></condition><condition><macro>{#IFNAME}</macro><value>{$NET.IF.IFNAME.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>F</formulaid></condition><condition><macro>{#IFDESCR}</macro><value>{$NET.IF.IFDESCR.MATCHES}</value><formulaid>C</formulaid></condition><condition><macro>{#IFDESCR}</macro><value>{$NET.IF.IFDESCR.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>D</formulaid></condition><condition><macro>{#IFALIAS}</macro><value>{$NET.IF.IFALIAS.MATCHES}</value><formulaid>A</formulaid></condition><condition><macro>{#IFALIAS}</macro><value>{$NET.IF.IFALIAS.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>B</formulaid></condition></conditions></filter><description>Discovery of installed network interfaces.</description><item_prototypes><item_prototype><uuid>a1c5afacb66f4c9abf4f8e901f42cb64</uuid><name>Interface {#IFNAME}({#IFALIAS}): Inbound packets discarded</name><type>ZABBIX_ACTIVE</type><key>net.if.in[&quot;{#IFGUID}&quot;,dropped]</key><delay>3m</delay><history>7d</history><description>The number of incoming packets dropped on the network interface.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>3ee5bf3e405c4de2856bfaa729b0f469</uuid><name>Interface {#IFNAME}({#IFALIAS}): Inbound packets with errors</name><type>ZABBIX_ACTIVE</type><key>net.if.in[&quot;{#IFGUID}&quot;,errors]</key><delay>3m</delay><history>7d</history><description>The number of incoming packets with errors on the network interface.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>ea8b2a4901254965b40e57f7bdf1ea3f</uuid><name>Interface {#IFNAME}({#IFALIAS}): Bits received</name><type>ZABBIX_ACTIVE</type><key>net.if.in[&quot;{#IFGUID}&quot;]</key><delay>3m</delay><history>7d</history><units>bps</units><description>Incoming traffic on the network interface.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>8</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>8feffdee85e2486191de0968ec7918b7</uuid><name>Interface {#IFNAME}({#IFALIAS}): Outbound packets discarded</name><type>ZABBIX_ACTIVE</type><key>net.if.out[&quot;{#IFGUID}&quot;,dropped]</key><delay>3m</delay><history>7d</history><description>The number of outgoing packets dropped on the network interface.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>84d1943e15c046f894bf0219288671e4</uuid><name>Interface {#IFNAME}({#IFALIAS}): Outbound packets with errors</name><type>ZABBIX_ACTIVE</type><key>net.if.out[&quot;{#IFGUID}&quot;,errors]</key><delay>3m</delay><history>7d</history><description>The number of outgoing packets with errors on the network interface.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>fb0785a7e7e54743bef715fb60dbe890</uuid><name>Interface {#IFNAME}({#IFALIAS}): Bits sent</name><type>ZABBIX_ACTIVE</type><key>net.if.out[&quot;{#IFGUID}&quot;]</key><delay>3m</delay><history>7d</history><units>bps</units><description>Outgoing traffic on the network interface.</description><preprocessing><step><type>CHANGE_PER_SECOND</type><parameters><parameter/></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>8</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>27bf112e7c1f4652aa326fa240215e41</uuid><name>Interface {#IFNAME}({#IFALIAS}): Speed</name><type>DEPENDENT</type><key>net.if.speed[&quot;{#IFGUID}&quot;]</key><delay>0</delay><history>7d</history><trends>0d</trends><units>bps</units><description>Estimated bandwidth of the network interface if any.</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.GUID == &quot;{#IFGUID}&quot;)].Speed.first()</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step><step><type>JAVASCRIPT</type><parameters><parameter>return (value=='9223372036854775807' ? 0 : value)</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1h</parameter></parameters></step></preprocessing><master_item><key>wmi.getall[root\cimv2,&quot;select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus&gt;0&quot;]</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype><item_prototype><uuid>44fd303ebab348ceb99c74599c587cb4</uuid><name>Interface {#IFNAME}({#IFALIAS}): Operational status</name><type>DEPENDENT</type><key>net.if.status[&quot;{#IFGUID}&quot;]</key><delay>0</delay><history>7d</history><trends>0</trends><description>The operational status of the network interface.</description><valuemap><name>Win32_NetworkAdapter::NetConnectionStatus</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.GUID == &quot;{#IFGUID}&quot;)].NetConnectionStatus.first()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>wmi.getall[root\cimv2,&quot;select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus&gt;0&quot;]</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>d2af1fae64c940f2b2b923e159b836e6</uuid><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])&lt;&gt;2 and (last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;],#1)&lt;&gt;last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;],#2))</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])=2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>This trigger expression works as follows:
1. Can be triggered if operations status is down.
2. {$IFCONTROL:\&quot;{#IFNAME}\&quot;}=1 - user can redefine Context macro to value - 0. That marks this interface as not important.
    No new trigger will be fired if this interface is down.
3. {TEMPLATE_NAME:METRIC.diff()}=1) - trigger fires only if operational status is different from Connected(2).

WARNING: if closed manually - won't fire again on next poll, because of .diff.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>14f7982f0a1a49799646fe4685df7db8</uuid><name>Interface {#IFNAME}({#IFALIAS}): Interface type</name><type>DEPENDENT</type><key>net.if.type[&quot;{#IFGUID}&quot;]</key><delay>0</delay><history>7d</history><trends>0d</trends><description>The type of the network interface.</description><valuemap><name>Win32_NetworkAdapter::AdapterTypeId</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.GUID == &quot;{#IFGUID}&quot;)].AdapterTypeId.first()</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>wmi.getall[root\cimv2,&quot;select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus&gt;0&quot;]</key></master_item><tags><tag><tag>component</tag><value>network</value></tag><tag><tag>description</tag><value>{#IFALIAS}</value></tag><tag><tag>interface</tag><value>{#IFNAME}</value></tag></tags></item_prototype></item_prototypes><trigger_prototypes><trigger_prototype><uuid>d2629ca744034cf7b92a39d7f847195a</uuid><expression>change(/Windows network by Zabbix agent active/net.if.speed[&quot;{#IFGUID}&quot;])&lt;0 and
last(/Windows network by Zabbix agent active/net.if.speed[&quot;{#IFGUID}&quot;])&gt;0 and
last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])=2</expression><name>Interface {#IFNAME}({#IFALIAS}): Ethernet has changed to lower speed than it was before</name><opdata>Current reported speed: {ITEM.LASTVALUE1}</opdata><priority>INFO</priority><description>This Ethernet connection has transitioned down from its known maximum speed. This might be a sign of autonegotiation issues. Ack to close.</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])&lt;&gt;2 and (last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;],#1)&lt;&gt;last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;],#2))</expression><recovery_expression>last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])=2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>capacity</value></tag></tags></trigger_prototype><trigger_prototype><uuid>3bdd014bdaf04f0885816cbf1da11309</uuid><expression>(avg(/Windows network by Zabbix agent active/net.if.in[&quot;{#IFGUID}&quot;],15m)&gt;({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}/100)*last(/Windows network by Zabbix agent active/net.if.speed[&quot;{#IFGUID}&quot;]) or
avg(/Windows network by Zabbix agent active/net.if.out[&quot;{#IFGUID}&quot;],15m)&gt;({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}/100)*last(/Windows network by Zabbix agent active/net.if.speed[&quot;{#IFGUID}&quot;])) and
last(/Windows network by Zabbix agent active/net.if.speed[&quot;{#IFGUID}&quot;])&gt;0</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>avg(/Windows network by Zabbix agent active/net.if.in[&quot;{#IFGUID}&quot;],15m)&lt;(({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}-3)/100)*last(/Windows network by Zabbix agent active/net.if.speed[&quot;{#IFGUID}&quot;]) and
avg(/Windows network by Zabbix agent active/net.if.out[&quot;{#IFGUID}&quot;],15m)&lt;(({$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}-3)/100)*last(/Windows network by Zabbix agent active/net.if.speed[&quot;{#IFGUID}&quot;])</recovery_expression><name>Interface {#IFNAME}({#IFALIAS}): High bandwidth usage</name><event_name>Interface {#IFNAME}({#IFALIAS}): High bandwidth usage (&gt;{$IF.UTIL.MAX:&quot;{#IFNAME}&quot;}%)</event_name><opdata>In: {ITEM.LASTVALUE1}, out: {ITEM.LASTVALUE3}, speed: {ITEM.LASTVALUE2}</opdata><priority>WARNING</priority><description>The network interface utilization is close to its estimated maximum bandwidth.</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])&lt;&gt;2 and (last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;],#1)&lt;&gt;last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;],#2))</expression><recovery_expression>last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])=2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype><trigger_prototype><uuid>e29c3aa283d74838b45040394a3eabe1</uuid><expression>min(/Windows network by Zabbix agent active/net.if.in[&quot;{#IFGUID}&quot;,errors],5m)&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}
or min(/Windows network by Zabbix agent active/net.if.out[&quot;{#IFGUID}&quot;,errors],5m)&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}</expression><recovery_mode>RECOVERY_EXPRESSION</recovery_mode><recovery_expression>max(/Windows network by Zabbix agent active/net.if.in[&quot;{#IFGUID}&quot;,errors],5m)&lt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}*0.8
and max(/Windows network by Zabbix agent active/net.if.out[&quot;{#IFGUID}&quot;,errors],5m)&lt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;}*0.8</recovery_expression><name>Interface {#IFNAME}({#IFALIAS}): High error rate</name><event_name>Interface {#IFNAME}({#IFALIAS}): High error rate (&gt;{$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;} for 5m)</event_name><opdata>errors in: {ITEM.LASTVALUE1}, errors out: {ITEM.LASTVALUE2}</opdata><priority>WARNING</priority><description>Recovers when below 80% of {$IF.ERRORS.WARN:&quot;{#IFNAME}&quot;} threshold</description><manual_close>YES</manual_close><dependencies><dependency><name>Interface {#IFNAME}({#IFALIAS}): Link down</name><expression>{$IFCONTROL:&quot;{#IFNAME}&quot;}=1 and last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])&lt;&gt;2 and (last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;],#1)&lt;&gt;last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;],#2))</expression><recovery_expression>last(/Windows network by Zabbix agent active/net.if.status[&quot;{#IFGUID}&quot;])=2 or {$IFCONTROL:&quot;{#IFNAME}&quot;}=0</recovery_expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes><graph_prototypes><graph_prototype><uuid>5042d069d9364413bc594f2a22a31cb6</uuid><name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>Windows network by Zabbix agent active</host><key>net.if.in[&quot;{#IFGUID}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>2774A4</color><item><host>Windows network by Zabbix agent active</host><key>net.if.out[&quot;{#IFGUID}&quot;]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><yaxisside>RIGHT</yaxisside><item><host>Windows network by Zabbix agent active</host><key>net.if.out[&quot;{#IFGUID}&quot;,errors]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><yaxisside>RIGHT</yaxisside><item><host>Windows network by Zabbix agent active</host><key>net.if.in[&quot;{#IFGUID}&quot;,errors]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><yaxisside>RIGHT</yaxisside><item><host>Windows network by Zabbix agent active</host><key>net.if.out[&quot;{#IFGUID}&quot;,dropped]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><yaxisside>RIGHT</yaxisside><item><host>Windows network by Zabbix agent active</host><key>net.if.in[&quot;{#IFGUID}&quot;,dropped]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><master_item><key>wmi.getall[root\cimv2,&quot;select Name,Description,NetConnectionID,Speed,AdapterTypeId,NetConnectionStatus,GUID from win32_networkadapter where PhysicalAdapter=True and NetConnectionStatus&gt;0&quot;]</key></master_item><preprocessing><step><type>JAVASCRIPT</type><parameters><parameter>output = JSON.parse(value).map(function(net){
    return {
        &quot;{#IFNAME}&quot;: net.Name,
        &quot;{#IFDESCR}&quot;: net.Description,
        &quot;{#IFALIAS}&quot;: net.NetConnectionID,
        &quot;{#IFGUID}&quot;: net.GUID
    }})
return JSON.stringify({&quot;data&quot;: output})</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1h</parameter></parameters></step></preprocessing></discovery_rule></discovery_rules><macros><macro><macro>{$IF.ERRORS.WARN}</macro><value>2</value></macro><macro><macro>{$IF.UTIL.MAX}</macro><value>90</value></macro><macro><macro>{$IFCONTROL}</macro><value>1</value></macro><macro><macro>{$NET.IF.IFALIAS.MATCHES}</macro><value>.*</value><description>This macro is used in Network interface discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$NET.IF.IFALIAS.NOT_MATCHES}</macro><value>CHANGE_THIS</value><description>This macro is used in Network interface discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$NET.IF.IFDESCR.MATCHES}</macro><value>.*</value><description>This macro is used in Network interface discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$NET.IF.IFDESCR.NOT_MATCHES}</macro><value>CHANGE_THIS</value><description>This macro is used in Network interface discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$NET.IF.IFNAME.MATCHES}</macro><value>.*</value><description>This macro is used in Network interface discovery. Can be overridden on the host or linked template level.</description></macro><macro><macro>{$NET.IF.IFNAME.NOT_MATCHES}</macro><value>Miniport|Virtual|Teredo|Kernel|Loopback|Bluetooth|HTTPS|6to4|QoS|Layer</value><description>This macro is used in Network interface discovery. Can be overridden on the host or linked template level.</description></macro></macros><dashboards><dashboard><uuid>1f4737b4a5364b35a8358dccedf6a492</uuid><name>Network interfaces</name><pages><page><widgets><widget><type>GRAPH_PROTOTYPE</type><width>24</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>2</value></field><field><type>INTEGER</type><name>columns</name><value>1</value></field><field><type>INTEGER</type><name>rows</name><value>1</value></field><field><type>GRAPH_PROTOTYPE</type><name>graphid</name><value><host>Windows network by Zabbix agent active</host><name>Interface {#IFNAME}({#IFALIAS}): Network traffic</name></value></field></fields></widget></widgets></page></pages></dashboard></dashboards><valuemaps><valuemap><uuid>7300d3f66dec4f90bcd6889d206db89f</uuid><name>Win32_NetworkAdapter::AdapterTypeId</name><mappings><mapping><value>0</value><newvalue>Ethernet 802.3</newvalue></mapping><mapping><value>1</value><newvalue>Token Ring 802.5</newvalue></mapping><mapping><value>2</value><newvalue>Fiber Distributed Data Interface (FDDI)</newvalue></mapping><mapping><value>3</value><newvalue>Wide Area Network (WAN)</newvalue></mapping><mapping><value>4</value><newvalue>LocalTalk</newvalue></mapping><mapping><value>5</value><newvalue>Ethernet using DIX header format</newvalue></mapping><mapping><value>6</value><newvalue>ARCNET</newvalue></mapping><mapping><value>7</value><newvalue>ARCNET (878.2)</newvalue></mapping><mapping><value>8</value><newvalue>ATM</newvalue></mapping><mapping><value>9</value><newvalue>Wireless</newvalue></mapping><mapping><value>10</value><newvalue>Infrared Wireless</newvalue></mapping><mapping><value>11</value><newvalue>Bpc</newvalue></mapping><mapping><value>12</value><newvalue>CoWan</newvalue></mapping><mapping><value>13</value><newvalue>1394</newvalue></mapping></mappings></valuemap><valuemap><uuid>a1e647b6b26547bfbc044d213150c71b</uuid><name>Win32_NetworkAdapter::NetConnectionStatus</name><mappings><mapping><value>0</value><newvalue>Disconnected</newvalue></mapping><mapping><value>1</value><newvalue>Connecting</newvalue></mapping><mapping><value>2</value><newvalue>Connected</newvalue></mapping><mapping><value>3</value><newvalue>Disconnecting</newvalue></mapping><mapping><value>4</value><newvalue>Hardware Not Present</newvalue></mapping><mapping><value>5</value><newvalue>Hardware Disabled</newvalue></mapping><mapping><value>6</value><newvalue>Hardware Malfunction</newvalue></mapping><mapping><value>7</value><newvalue>Media Disconnected</newvalue></mapping><mapping><value>8</value><newvalue>Authenticating</newvalue></mapping><mapping><value>9</value><newvalue>Authentication Succeeded</newvalue></mapping><mapping><value>10</value><newvalue>Authentication Failed</newvalue></mapping><mapping><value>11</value><newvalue>Invalid Address</newvalue></mapping><mapping><value>12</value><newvalue>Credentials Required</newvalue></mapping></mappings></valuemap></valuemaps></template></templates></zabbix_export>
