<?xml version="1.0" encoding="UTF-8"?>
<zabbix_export><version>6.0</version><date>2023-02-11T16:14:43Z</date><groups><group><uuid>a571c0d144b14fd4a87a9d9b2aa9fcd6</uuid><name>Templates/Applications</name></group></groups><templates><template><uuid>d5dc11ae9ab143a89c4be534bbb35188</uuid><template>RabbitMQ node by Zabbix agent</template><name>RabbitMQ node by Zabbix agent</name><description>Get node metrics from RabbitMQ management plugin provided an HTTP-based API using Zabbix agent.

You can discuss this template or leave feedback on our forum https://www.zabbix.com/forum/zabbix-suggestions-and-feedback/387226-discussion-thread-for-official-zabbix-template-rabbitmq

Template tooling version used: 0.41</description><groups><group><name>Templates/Applications</name></group></groups><items><item><uuid>b1f191f9077f4382b5b87e0085ae2622</uuid><name>RabbitMQ: Service response time</name><key>net.tcp.service.perf[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;]</key><history>7d</history><value_type>FLOAT</value_type><units>s</units><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>5cb80a7552d74e44a83d0825f039f89f</uuid><expression>min(/RabbitMQ node by Zabbix agent/net.tcp.service.perf[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;],5m)&gt;{$RABBITMQ.RESPONSE_TIME.MAX.WARN}</expression><name>RabbitMQ: Service response time is too high</name><event_name>RabbitMQ: Service response time is too high (over {$RABBITMQ.RESPONSE_TIME.MAX.WARN}s for 5m)</event_name><priority>WARNING</priority><manual_close>YES</manual_close><dependencies><dependency><name>RabbitMQ: Process is not running</name><expression>last(/RabbitMQ node by Zabbix agent/proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;])=0</expression></dependency><dependency><name>RabbitMQ: Service is down</name><expression>last(/RabbitMQ node by Zabbix agent/net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;])=0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>6229b623f5ff40f9a65e9573b3b86e3f</uuid><name>RabbitMQ: Service ping</name><key>net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;]</key><history>7d</history><valuemap><name>Service state</name></valuemap><preprocessing><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>10m</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>network</value></tag></tags><triggers><trigger><uuid>af5cfb0004e04562a9720b9e1b41fd5b</uuid><expression>last(/RabbitMQ node by Zabbix agent/net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;])=0</expression><name>RabbitMQ: Service is down</name><priority>AVERAGE</priority><manual_close>YES</manual_close><dependencies><dependency><name>RabbitMQ: Process is not running</name><expression>last(/RabbitMQ node by Zabbix agent/proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;])=0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>0b195bf594c44b1f869b4a7671f61453</uuid><name>RabbitMQ: CPU utilization</name><key>proc.cpu.util[&quot;{$RABBITMQ.PROCESS_NAME}&quot;]</key><history>7d</history><value_type>FLOAT</value_type><units>%</units><description>Process CPU utilization percentage.</description><tags><tag><tag>component</tag><value>cpu</value></tag></tags></item><item><uuid>6f13f672d8ce4c9592e0f3f5ec3b0ec4</uuid><name>RabbitMQ: Memory usage (rss)</name><key>proc.mem[&quot;{$RABBITMQ.PROCESS_NAME}&quot;,,,,rss]</key><history>7d</history><units>B</units><description>Resident set size memory used by process in bytes.</description><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>4faac75027d14304ab071602df8f2937</uuid><name>RabbitMQ: Memory usage (vsize)</name><key>proc.mem[&quot;{$RABBITMQ.PROCESS_NAME}&quot;,,,,vsize]</key><history>7d</history><units>B</units><description>Virtual memory size used by process in bytes.</description><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>8f1c8d2449c44ab590842184d9deb3a6</uuid><name>RabbitMQ: Number of processes running</name><key>proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;]</key><history>7d</history><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>2979bc7d779b404696f7eac273e99ea7</uuid><expression>last(/RabbitMQ node by Zabbix agent/proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;])=0</expression><name>RabbitMQ: Process is not running</name><priority>HIGH</priority><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>7dad79be93bd46bba7a2540b38080b06</uuid><name>RabbitMQ: Free disk space</name><type>DEPENDENT</type><key>rabbitmq.node.disk_free</key><delay>0</delay><history>7d</history><units>B</units><description>Current free disk space</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.disk_free</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>d8de1eb13f024ce99388fc4bb68d6ad0</uuid><name>RabbitMQ: Disk free alarm</name><type>DEPENDENT</type><key>rabbitmq.node.disk_free_alarm</key><delay>0</delay><history>7d</history><description>Does the node have disk alarm</description><valuemap><name>Alarm state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.disk_free_alarm</parameter></parameters></step><step><type>BOOL_TO_DECIMAL</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag></tags><triggers><trigger><uuid>b68cb12ecd4046fd80a717fb557f04e8</uuid><expression>last(/RabbitMQ node by Zabbix agent/rabbitmq.node.disk_free_alarm)=1</expression><name>RabbitMQ: Free disk space alarm</name><event_name>RabbitMQ: Free disk space alarm (Free space threshold has been reached)</event_name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>https://www.rabbitmq.com/disk-alarms.html</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>4e62b476bd11497f9190d1f720f22f75</uuid><name>RabbitMQ: Disk free limit</name><type>DEPENDENT</type><key>rabbitmq.node.disk_free_limit</key><delay>0</delay><history>7d</history><units>B</units><description>Disk free space limit in bytes</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.disk_free_limit</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>09aeab86c69846eb82d27c2f82f46d2b</uuid><name>RabbitMQ: Used file descriptors</name><type>DEPENDENT</type><key>rabbitmq.node.fd_used</key><delay>0</delay><history>7d</history><description>Used file descriptors</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.fd_used</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>storage</value></tag></tags></item><item><uuid>e059b278ba384133a72dc723c2b2c40b</uuid><name>RabbitMQ: Memory alarm</name><type>DEPENDENT</type><key>rabbitmq.node.mem_alarm</key><delay>0</delay><history>7d</history><description>Does the host has memory alarm</description><valuemap><name>Alarm state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.mem_alarm</parameter></parameters></step><step><type>BOOL_TO_DECIMAL</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags><triggers><trigger><uuid>ec6ae727fe774b0fa56bb4d9ad773e35</uuid><expression>last(/RabbitMQ node by Zabbix agent/rabbitmq.node.mem_alarm)=1</expression><name>RabbitMQ: Memory alarm</name><event_name>RabbitMQ: Memory alarm (Memory usage threshold has been reached)</event_name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>https://www.rabbitmq.com/memory.html</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>54bd4a47d635444e8e2e955325dbb976</uuid><name>RabbitMQ: Memory limit</name><type>DEPENDENT</type><key>rabbitmq.node.mem_limit</key><delay>0</delay><history>7d</history><units>B</units><description>Memory usage high watermark in bytes</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.mem_limit</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>d6a01ec409a6449986c5c0a81ffaf914</uuid><name>RabbitMQ: Memory used</name><type>DEPENDENT</type><key>rabbitmq.node.mem_used</key><delay>0</delay><history>7d</history><units>B</units><description>Memory used in bytes</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.mem_used</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag></tags></item><item><uuid>db91f84a5ad7412c959fbfe4e3b6df88</uuid><name>RabbitMQ: Management plugin version</name><type>DEPENDENT</type><key>rabbitmq.node.overview.management_version</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>Version of the management plugin in use</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.management_version</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>52a0be5049ee40748761d301a644315b</uuid><name>RabbitMQ: RabbitMQ version</name><type>DEPENDENT</type><key>rabbitmq.node.overview.rabbitmq_version</key><delay>0</delay><history>7d</history><trends>0</trends><value_type>CHAR</value_type><description>Version of RabbitMQ on the node which processed this request</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.rabbitmq_version</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>1d</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>daf98bb4593d4697bc51423b2f65ba41</uuid><expression>last(/RabbitMQ node by Zabbix agent/rabbitmq.node.overview.rabbitmq_version,#1)&lt;&gt;last(/RabbitMQ node by Zabbix agent/rabbitmq.node.overview.rabbitmq_version,#2) and length(last(/RabbitMQ node by Zabbix agent/rabbitmq.node.overview.rabbitmq_version))&gt;0</expression><name>RabbitMQ: Version has changed</name><event_name>RabbitMQ: Version has changed (new version: {ITEM.VALUE})</event_name><priority>INFO</priority><description>The RabbitMQ version has changed. Perform Ack to close.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>5e8c1ed0b073461eb14477edac3c756a</uuid><name>RabbitMQ: Number of network partitions</name><type>DEPENDENT</type><key>rabbitmq.node.partitions</key><delay>0</delay><history>7d</history><description>Number of network partitions this node is seeing</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.partitions</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>return JSON.parse(value).length;</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>network</value></tag></tags><triggers><trigger><uuid>5bed266725e94000804b0ecc7bce6209</uuid><expression>min(/RabbitMQ node by Zabbix agent/rabbitmq.node.partitions,5m)&gt;0</expression><name>RabbitMQ: Number of network partitions is too high</name><event_name>RabbitMQ: Number of network partitions is too high (more than 0 for 5m)</event_name><opdata>Current value: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><description>https://www.rabbitmq.com/partitions.html#detecting</description><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger></triggers></item><item><uuid>087fcb3992ef4e35bacd4b6e69ef93d3</uuid><name>RabbitMQ: Is running</name><type>DEPENDENT</type><key>rabbitmq.node.running</key><delay>0</delay><history>7d</history><description>Is the node running or not</description><valuemap><name>Service state</name></valuemap><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.running</parameter></parameters></step><step><type>BOOL_TO_DECIMAL</type><parameters><parameter/></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>253acf98446e4790975b330d44dd6b96</uuid><expression>max(/RabbitMQ node by Zabbix agent/rabbitmq.node.running,5m)=0</expression><name>RabbitMQ: Node is not running</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>RabbitMQ node is not running</description><dependencies><dependency><name>RabbitMQ: Process is not running</name><expression>last(/RabbitMQ node by Zabbix agent/proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;])=0</expression></dependency><dependency><name>RabbitMQ: Service is down</name><expression>last(/RabbitMQ node by Zabbix agent/net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;])=0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>1ae6f429e99d4ddaa54aa6adab6b8100</uuid><name>RabbitMQ: Runtime run queue</name><type>DEPENDENT</type><key>rabbitmq.node.run_queue</key><delay>0</delay><history>7d</history><description>Average number of Erlang processes waiting to run</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.run_queue</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>3aa508520f224150a05a7ebb64d22c5e</uuid><name>RabbitMQ: Sockets available</name><type>DEPENDENT</type><key>rabbitmq.node.sockets_total</key><delay>0</delay><history>7d</history><description>File descriptors available for use as sockets</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.sockets_total</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>de2cbe02ff6c47d78b6c7105709f4805</uuid><name>RabbitMQ: Sockets used</name><type>DEPENDENT</type><key>rabbitmq.node.sockets_used</key><delay>0</delay><history>7d</history><description>Number of file descriptors used as sockets</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.sockets_used</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags></item><item><uuid>a28b6c8cca5544b79c2d9946c1978c7e</uuid><name>RabbitMQ: Uptime</name><type>DEPENDENT</type><key>rabbitmq.node.uptime</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><units>s</units><description>Uptime in milliseconds</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.uptime</parameter></parameters></step><step><type>MULTIPLIER</type><parameters><parameter>0.001</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key></master_item><tags><tag><tag>component</tag><value>system</value></tag></tags><triggers><trigger><uuid>729c448ebabb417bb7ce17b1634c4484</uuid><expression>last(/RabbitMQ node by Zabbix agent/rabbitmq.node.uptime)&lt;10m</expression><name>RabbitMQ: Host has been restarted</name><event_name>RabbitMQ: {HOST.NAME} has been restarted (uptime &lt; 10m)</event_name><priority>INFO</priority><description>Uptime is less than 10 minutes.</description><manual_close>YES</manual_close><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger></triggers></item><item><uuid>61730555a0ae4f798ea740effb82764c</uuid><name>RabbitMQ: Get nodes</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;]</key><history>1h</history><trends>0</trends><value_type>TEXT</value_type><description>The HTTP API endpoint that returns nodes metrics</description><preprocessing><step><type>REGEX</type><parameters><parameter>\n\s?\n(.*)</parameter><parameter>\1</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>raw</value></tag></tags><triggers><trigger><uuid>4f2a88d09b1b49879d80e0794ec19e0e</uuid><expression>nodata(/RabbitMQ node by Zabbix agent/web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/nodes/{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}?memory=true&quot;],30m)=1</expression><name>RabbitMQ: Failed to fetch nodes data</name><event_name>RabbitMQ: Failed to fetch nodes data (or no data for 30m)</event_name><priority>WARNING</priority><description>Zabbix has not received data for items for the last 30 minutes.</description><manual_close>YES</manual_close><dependencies><dependency><name>RabbitMQ: Process is not running</name><expression>last(/RabbitMQ node by Zabbix agent/proc.num[&quot;{$RABBITMQ.PROCESS_NAME}&quot;])=0</expression></dependency><dependency><name>RabbitMQ: Service is down</name><expression>last(/RabbitMQ node by Zabbix agent/net.tcp.service[&quot;{$RABBITMQ.API.SCHEME}&quot;,&quot;{$RABBITMQ.API.HOST}&quot;,&quot;{$RABBITMQ.API.PORT}&quot;])=0</expression></dependency></dependencies><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger></triggers></item><item><uuid>1af326f40cdb407a96b34025062b4743</uuid><name>RabbitMQ: Get node overview</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key><history>1h</history><trends>0</trends><value_type>TEXT</value_type><description>The HTTP API endpoint that returns cluster-wide metrics</description><preprocessing><step><type>REGEX</type><parameters><parameter>\n\s?\n(.*)</parameter><parameter>\1</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>raw</value></tag></tags></item><item><uuid>7fb61ad564db42d5a373912491f5c9d3</uuid><name>RabbitMQ: Get queues</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key><history>1h</history><trends>0</trends><value_type>TEXT</value_type><description>The HTTP API endpoint that returns queues metrics</description><preprocessing><step><type>REGEX</type><parameters><parameter>\n\s?\n(.*)</parameter><parameter>\1</parameter></parameters></step></preprocessing><tags><tag><tag>component</tag><value>raw</value></tag></tags></item></items><discovery_rules><discovery_rule><uuid>04ef7d13809c45009553815f60ef5ba8</uuid><name>Health Check 3.8.9- discovery</name><type>DEPENDENT</type><key>rabbitmq.healthcheck.v389.discovery</key><delay>0</delay><description>Specific metrics up to and including version 3.8.4</description><item_prototypes><item_prototype><uuid>8b959a9d03dc4ae8bed7292973f4fcc4</uuid><name>RabbitMQ: Healthcheck{#SINGLETON}</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/healthchecks/node{#SINGLETON}&quot;]</key><history>7h</history><description>Runs basic healthchecks in the current node. Checks that the rabbit application is running, channels and queues can be listed successfully, and that no alarms are in effect.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>\n\s?\n(.*)</parameter><parameter>\1</parameter></parameters></step><step><type>JSONPATH</type><parameters><parameter>$.status</parameter></parameters></step><step><type>BOOL_TO_DECIMAL</type><parameters><parameter/></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>system</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>bf6bcbda20ed46cbb779d9c1f446dfa8</uuid><expression>last(/RabbitMQ node by Zabbix agent/web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/healthchecks/node{#SINGLETON}&quot;])=0</expression><name>RabbitMQ: Node healthcheck failed</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>https://www.rabbitmq.com/monitoring.html#health-checks</description><tags><tag><tag>scope</tag><value>availability</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key></master_item><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.management_version</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                     parseInt(value.split('.')[1]) * 100 +
                     parseInt(value.split('.')[2])
return JSON.stringify(rabbit_version &lt; 30810 ? [{'{#SINGLETON}': ''}] : []);</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>3c0021a3e57142eb806deb5b47b6700a</uuid><name>Health Check 3.8.10+ discovery</name><type>DEPENDENT</type><key>rabbitmq.healthcheck.v3810.discovery</key><delay>0</delay><description>Version 3.8.10+ specific metrics</description><item_prototypes><item_prototype><uuid>0f1cd729d8f4447db25e0af19eae595d</uuid><name>RabbitMQ: Healthcheck: expiration date on the certificates{#SINGLETON}</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/certificate-expiration/1/months{#SINGLETON}&quot;]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Checks the expiration date on the certificates for every listener configured to use TLS. Responds a 200 OK if all certificates are valid (have not expired), otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>certificate</value></tag><tag><tag>component</tag><value>health</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>d180912136c74e5cb246655ecab75f57</uuid><expression>last(/RabbitMQ node by Zabbix agent/web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/certificate-expiration/1/months{#SINGLETON}&quot;])=0</expression><name>RabbitMQ: There are valid TLS certificates expiring in the next month</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>701449b128cb42cdb971fc608ba9f29b</uuid><name>RabbitMQ: Healthcheck: local alarms in effect on this node{#SINGLETON}</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/local-alarms{#SINGLETON}&quot;]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Responds a 200 OK if there are no local alarms in effect on the target node, otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>system</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>62962f18baa4480294e097fec2cc5e4c</uuid><expression>last(/RabbitMQ node by Zabbix agent/web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/local-alarms{#SINGLETON}&quot;])=0</expression><name>RabbitMQ: There are active alarms in the node</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>7a07966d8dde4f2caa9ff95693b86974</uuid><name>RabbitMQ: Healthcheck: classic mirrored queues without synchronized mirrors online{#SINGLETON}</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-mirror-sync-critical{#SINGLETON}&quot;]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Checks if there are classic mirrored queues without synchronized mirrors online (queues that would potentially lose data if the target node is shut down). Responds a 200 OK if there are no such classic mirrored queues, otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>queues</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>19e392f9e48e4c8287e04751a2a73843</uuid><expression>last(/RabbitMQ node by Zabbix agent/web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-mirror-sync-critical{#SINGLETON}&quot;])=0</expression><name>RabbitMQ: There are queues that could potentially lose data if this node goes offline.</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>f6ec1bb1cc4741be852136fac2c63333</uuid><name>RabbitMQ: Healthcheck: queues with minimum online quorum{#SINGLETON}</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-quorum-critical{#SINGLETON}&quot;]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Checks if there are quorum queues with minimum online quorum (queues that would lose their quorum and availability if the target node is shut down). Responds a 200 OK if there are no such quorum queues, otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>queues</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>e063b6dde6a0484ba1561861d8b1f0c1</uuid><expression>last(/RabbitMQ node by Zabbix agent/web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/node-is-quorum-critical{#SINGLETON}&quot;])=0</expression><name>RabbitMQ: There are queues that would lose their quorum and availability if this node is shut down.</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>0d1ad3daf2bb46dba2c9913c1684a0d4</uuid><name>RabbitMQ: Healthcheck: virtual hosts on this node{#SINGLETON}</name><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/virtual-hosts{#SINGLETON}&quot;]</key><history>7d</history><authtype>BASIC</authtype><username>{$RABBITMQ.API.USER}</username><password>{$RABBITMQ.API.PASSWORD}</password><description>Responds a 200 OK if all virtual hosts and running on the target node, otherwise responds with a 503 Service Unavailable.</description><valuemap><name>RabbitMQ healthcheck</name></valuemap><preprocessing><step><type>REGEX</type><parameters><parameter>HTTP\/1\.1\b\s(\d+)</parameter><parameter>\1</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>switch(value){ 
case '200': return 1 
case '503': return 0 
default: 2}</parameter></parameters></step><step><type>DISCARD_UNCHANGED_HEARTBEAT</type><parameters><parameter>3h</parameter></parameters></step></preprocessing><status_codes>200,503,404</status_codes><retrieve_mode>HEADERS</retrieve_mode><tags><tag><tag>component</tag><value>health</value></tag><tag><tag>component</tag><value>system</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>b61117e5eeff4d41a9a2f1729ec174b2</uuid><expression>last(/RabbitMQ node by Zabbix agent/web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/health/checks/virtual-hosts{#SINGLETON}&quot;])=0</expression><name>RabbitMQ: There are not running virtual hosts</name><opdata>Current state: {ITEM.LASTVALUE1}</opdata><priority>AVERAGE</priority><description>http://{HOST.CONN}:{$RABBITMQ.API.PORT}/api/index.html</description><tags><tag><tag>scope</tag><value>notice</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype></item_prototypes><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/overview&quot;]</key></master_item><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.management_version</parameter></parameters></step><step><type>JAVASCRIPT</type><parameters><parameter>var rabbit_version = parseInt(value.split('.')[0]) * 10000 +
                     parseInt(value.split('.')[1]) * 100 +
                     parseInt(value.split('.')[2])
return JSON.stringify(rabbit_version &gt;= 30810 ? [{'{#SINGLETON}': ''}] : []);</parameter></parameters></step></preprocessing></discovery_rule><discovery_rule><uuid>d1d32fc6ae1f445a98144a31214ca825</uuid><name>Queues discovery</name><type>DEPENDENT</type><key>rabbitmq.queues.discovery</key><delay>0</delay><filter><evaltype>AND</evaltype><conditions><condition><macro>{#QUEUE}</macro><value>{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}</value><formulaid>B</formulaid></condition><condition><macro>{#QUEUE}</macro><value>{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}</value><operator>NOT_MATCHES_REGEX</operator><formulaid>C</formulaid></condition><condition><macro>{#NODE}</macro><value>{$RABBITMQ.CLUSTER.NAME}@{HOST.NAME}</value><formulaid>A</formulaid></condition></conditions></filter><description>Individual queue metrics</description><item_prototypes><item_prototype><uuid>158f41423b094efcb90ac273d1e6349c</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Get data</name><type>DEPENDENT</type><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>0</history><trends>0</trends><value_type>TEXT</value_type><description>The HTTP API endpoint that returns [{#VHOST}][{#QUEUE}] queue metrics</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$[?(@.name == &quot;{#QUEUE}&quot; &amp;&amp; @.vhost == &quot;{#VHOST}&quot;)].first()</parameter></parameters></step></preprocessing><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key></master_item><tags><tag><tag>component</tag><value>raw</value></tag></tags></item_prototype><item_prototype><uuid>fcbee789f2864010b26ac69894659e77</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Consumers</name><type>DEPENDENT</type><key>rabbitmq.queue.consumers[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of consumers</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.consumers</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>consumers</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>4b4491d5fb2b41eeae044c3d28de1b18</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Memory</name><type>DEPENDENT</type><key>rabbitmq.queue.memory[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><units>B</units><description>Bytes of memory consumed by the Erlang process associated with the queue, including stack, heap and internal structures</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.memory</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>memory</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>223fa7a8372f4e9883d376c9f3e1af2e</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages acknowledged per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.ack.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number per second of messages delivered to clients and acknowledged</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.ack_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>335513a34e6a4909acfa1be278dd31b3</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages acknowledged</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.ack[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of messages delivered to clients and acknowledged</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.ack</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>55b774e5aac249edbb8881373060b15b</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages delivered per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.deliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Count of messages delivered in acknowledgement mode to consumers</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.deliver_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>2a87988327e1483c84d3f1867bab367f</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages delivered</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.deliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Count of messages delivered in acknowledgement mode to consumers</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.deliver</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>3f3024da744349b59c7810dfd10d11a3</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Sum of messages delivered per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.deliver_get.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rate per second of the sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.deliver_get_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>ad5e9fa0260e4170887fb2dfdc508959</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Sum of messages delivered</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.deliver_get[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Sum of messages delivered in acknowledgement mode to consumers, in no-acknowledgement mode to consumers, in acknowledgement mode in response to basic.get, and in no-acknowledgement mode in response to basic.get</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.deliver_get</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>393306b9cb0148038d02ad9c48cf1fbb</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages published per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.publish.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rate per second of messages published</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.publish_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>44814c9f6f154fdcbab66249d0777eae</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages published</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.publish[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Count of messages published</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.publish</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>9096e81341374d2fb7dd58e932783afc</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Count per second of the total messages in the queue</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_details.rate</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>8902103fd86746d0851b75a1262e36a9</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages redelivered per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.redeliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Rate per second of subset of messages in deliver_get which had the redelivered flag set</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.redeliver_details.rate</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>3ac1a4b83c9f4d4c8a438d39aca8e82a</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages redelivered</name><type>DEPENDENT</type><key>rabbitmq.queue.messages.redeliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Count of subset of messages in deliver_get which had the redelivered flag set</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.message_stats.redeliver</parameter></parameters><error_handler>CUSTOM_VALUE</error_handler><error_handler_params>0</error_handler_params></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>aabd7d6fe6a047d186504386d3a48ae1</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages</name><type>DEPENDENT</type><key>rabbitmq.queue.messages[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Count of the total messages in the queue</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags><trigger_prototypes><trigger_prototype><uuid>58986cee2b4846b3b7bd3caf772d7ac6</uuid><expression>min(/RabbitMQ node by Zabbix agent/rabbitmq.queue.messages[&quot;{#VHOST}/{#QUEUE}&quot;],5m)&gt;{$RABBITMQ.MESSAGES.MAX.WARN:&quot;{#QUEUE}&quot;}</expression><name>RabbitMQ: Too many messages in queue [{#VHOST}][{#QUEUE}]</name><event_name>RabbitMQ: Too many messages in queue [{#VHOST}][{#QUEUE}] (over {$RABBITMQ.MESSAGES.MAX.WARN:&quot;{#QUEUE}&quot;} for 5m)</event_name><opdata>Current value: {ITEM.LASTVALUE1}</opdata><priority>WARNING</priority><tags><tag><tag>scope</tag><value>performance</value></tag></tags></trigger_prototype></trigger_prototypes></item_prototype><item_prototype><uuid>d2e1a2857b314ed3818f92312f5d0043</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages ready per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages_ready.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number per second of messages ready to be delivered to clients</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_ready_details.rate</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>4a75c2d9e0354f47b1c8243bad17bd58</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages ready</name><type>DEPENDENT</type><key>rabbitmq.queue.messages_ready[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of messages ready to be delivered to clients</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_ready</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>d5d88879e3b844d7b03ab956a673daff</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages unacknowledged per second</name><type>DEPENDENT</type><key>rabbitmq.queue.messages_unacknowledged.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><value_type>FLOAT</value_type><description>Number per second of messages delivered to clients but not yet acknowledged</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_unacknowledged_details.rate</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype><item_prototype><uuid>252dcf1262014ce599a2eec81f7223eb</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages unacknowledged</name><type>DEPENDENT</type><key>rabbitmq.queue.messages_unacknowledged[&quot;{#VHOST}/{#QUEUE}&quot;]</key><delay>0</delay><history>7d</history><description>Number of messages delivered to clients but not yet acknowledged</description><preprocessing><step><type>JSONPATH</type><parameters><parameter>$.messages_unacknowledged</parameter></parameters></step></preprocessing><master_item><key>rabbitmq.get_exchanges[&quot;{#VHOST}/{#QUEUE}&quot;]</key></master_item><tags><tag><tag>component</tag><value>messages</value></tag><tag><tag>queue</tag><value>{#QUEUE}</value></tag><tag><tag>vhost</tag><value>{#VHOST}</value></tag></tags></item_prototype></item_prototypes><graph_prototypes><graph_prototype><uuid>a6223df79d334c29ada36ba20729b885</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages per second</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.ack.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.deliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.deliver_get.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.publish.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages_ready.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>6</sortorder><color>AC8C14</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.redeliver.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>7</sortorder><color>611F27</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages_unacknowledged.rate[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item></graph_items></graph_prototype><graph_prototype><uuid>03c88aa9d8b94389aafcf607dff1756f</uuid><name>RabbitMQ: Queue [{#VHOST}][{#QUEUE}]: Messages status</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.ack[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>2</sortorder><color>F63100</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.deliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>3</sortorder><color>A54F10</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.deliver_get[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>4</sortorder><color>FC6EA3</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.publish[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>5</sortorder><color>6C59DC</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages_ready[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>6</sortorder><color>AC8C14</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages.redeliver[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item><graph_item><sortorder>7</sortorder><color>611F27</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.queue.messages_unacknowledged[&quot;{#VHOST}/{#QUEUE}&quot;]</key></item></graph_item></graph_items></graph_prototype></graph_prototypes><master_item><key>web.page.get[&quot;{$RABBITMQ.API.SCHEME}://{$RABBITMQ.API.USER}:{$RABBITMQ.API.PASSWORD}@{$RABBITMQ.API.HOST}:{$RABBITMQ.API.PORT}/api/queues&quot;]</key></master_item><lld_macro_paths><lld_macro_path><lld_macro>{#NODE}</lld_macro><path>$.node</path></lld_macro_path><lld_macro_path><lld_macro>{#QUEUE}</lld_macro><path>$.name</path></lld_macro_path><lld_macro_path><lld_macro>{#VHOST}</lld_macro><path>$.vhost</path></lld_macro_path></lld_macro_paths></discovery_rule></discovery_rules><tags><tag><tag>class</tag><value>software</value></tag><tag><tag>target</tag><value>rabbitmq</value></tag></tags><macros><macro><macro>{$RABBITMQ.API.HOST}</macro><value>127.0.0.1</value><description>The hostname or IP of RabbitMQ API endpoint</description></macro><macro><macro>{$RABBITMQ.API.PASSWORD}</macro><value>zabbix</value></macro><macro><macro>{$RABBITMQ.API.PORT}</macro><value>15672</value><description>The port of RabbitMQ API endpoint</description></macro><macro><macro>{$RABBITMQ.API.SCHEME}</macro><value>http</value><description>Request scheme which may be http or https</description></macro><macro><macro>{$RABBITMQ.API.USER}</macro><value>zbx_monitor</value></macro><macro><macro>{$RABBITMQ.CLUSTER.NAME}</macro><value>rabbit</value><description>The name of RabbitMQ cluster</description></macro><macro><macro>{$RABBITMQ.LLD.FILTER.QUEUE.MATCHES}</macro><value>.*</value><description>Filter of discoverable queues</description></macro><macro><macro>{$RABBITMQ.LLD.FILTER.QUEUE.NOT_MATCHES}</macro><value>CHANGE_IF_NEEDED</value><description>Filter to exclude discovered queues</description></macro><macro><macro>{$RABBITMQ.MESSAGES.MAX.WARN}</macro><value>1000</value><description>Maximum number of messages in the queue for trigger expression</description></macro><macro><macro>{$RABBITMQ.PROCESS_NAME}</macro><value>beam.smp</value><description>RabbitMQ server process name</description></macro><macro><macro>{$RABBITMQ.RESPONSE_TIME.MAX.WARN}</macro><value>10</value><description>Maximum RabbitMQ response time in seconds for trigger expression</description></macro></macros><dashboards><dashboard><uuid>ce0af043ed2c4e7c988674c9ecb787d6</uuid><name>RabbitMQ node status</name><pages><page><widgets><widget><type>GRAPH_CLASSIC</type><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by Zabbix agent</host><name>RabbitMQ: Node status</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><x>12</x><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by Zabbix agent</host><name>RabbitMQ: Uptime</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><y>5</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by Zabbix agent</host><name>RabbitMQ: Disk free</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><x>12</x><y>5</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by Zabbix agent</host><name>RabbitMQ: Memory used</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><y>10</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by Zabbix agent</host><name>RabbitMQ: File descriptors</name></value></field></fields></widget><widget><type>GRAPH_CLASSIC</type><x>12</x><y>10</y><width>12</width><height>5</height><fields><field><type>INTEGER</type><name>source_type</name><value>0</value></field><field><type>GRAPH</type><name>graphid</name><value><host>RabbitMQ node by Zabbix agent</host><name>RabbitMQ: Sockets</name></value></field></fields></widget></widgets></page></pages></dashboard></dashboards><valuemaps><valuemap><uuid>ce579def20ac488dbce1ff69baaa8c50</uuid><name>Alarm state</name><mappings><mapping><value>0</value><newvalue>Ok</newvalue></mapping><mapping><value>1</value><newvalue>Alarm</newvalue></mapping></mappings></valuemap><valuemap><uuid>08ee896f31a1457a8e9b4f6f251700d4</uuid><name>RabbitMQ healthcheck</name><mappings><mapping><value>0</value><newvalue>Failed</newvalue></mapping><mapping><value>1</value><newvalue>Ok</newvalue></mapping><mapping><value>2</value><newvalue>Error</newvalue></mapping></mappings></valuemap><valuemap><uuid>c369d410303349b4973431b6ff8dcb85</uuid><name>Service state</name><mappings><mapping><value>0</value><newvalue>Down</newvalue></mapping><mapping><value>1</value><newvalue>Up</newvalue></mapping></mappings></valuemap></valuemaps></template></templates><graphs><graph><uuid>72472749150041d59a52ce5abb3dc03e</uuid><name>RabbitMQ: Disk free</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.disk_free</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>FF0000</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.disk_free_limit</key></item></graph_item></graph_items></graph><graph><uuid>132133fc0fd04002a5a50fc0d5169e6a</uuid><name>RabbitMQ: File descriptors</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.fd_used</key></item></graph_item></graph_items></graph><graph><uuid>180a5d36d48f44fbaf6f86c5cf9e10f9</uuid><name>RabbitMQ: Memory usage</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>proc.mem[&quot;{$RABBITMQ.PROCESS_NAME}&quot;,,,,vsize]</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>RabbitMQ node by Zabbix agent</host><key>proc.mem[&quot;{$RABBITMQ.PROCESS_NAME}&quot;,,,,rss]</key></item></graph_item></graph_items></graph><graph><uuid>a5949ccf83434f1fb26cfe0a3671085e</uuid><name>RabbitMQ: Memory used</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.mem_used</key></item></graph_item><graph_item><sortorder>1</sortorder><drawtype>BOLD_LINE</drawtype><color>FF0000</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.mem_limit</key></item></graph_item></graph_items></graph><graph><uuid>358fb67c294d4486a79797818ebde851</uuid><name>RabbitMQ: Node status</name><graph_items><graph_item><drawtype>BOLD_LINE</drawtype><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.running</key></item></graph_item></graph_items></graph><graph><uuid>7e5fec850547465091a38f78268a207f</uuid><name>RabbitMQ: Sockets</name><graph_items><graph_item><drawtype>GRADIENT_LINE</drawtype><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.sockets_used</key></item></graph_item><graph_item><sortorder>1</sortorder><color>2774A4</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.sockets_total</key></item></graph_item></graph_items></graph><graph><uuid>bf2b0b66f4d94549aae9cbe04dfe9bd2</uuid><name>RabbitMQ: Uptime</name><graph_items><graph_item><color>1A7C11</color><item><host>RabbitMQ node by Zabbix agent</host><key>rabbitmq.node.uptime</key></item></graph_item></graph_items></graph></graphs></zabbix_export>
